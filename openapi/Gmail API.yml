openapi: 3.0.0
info:
  title: Gmail API
  description: >-
    The Gmail API lets you view and manage Gmail mailbox data like threads,
    messages, and labels.


    Contact Support:
     Name: Google
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
components:
  securitySchemes:
    oauth2Auth:
      type: http
      scheme: oauth2
tags:
  - name: gmail/v1/users/{user Id}
  - name: gmail/v1/users/{user Id} > drafts
  - name: gmail/v1/users/{user Id} > drafts > {id}
  - name: gmail/v1/users/{user Id} > labels
  - name: gmail/v1/users/{user Id} > labels > {id}
  - name: gmail/v1/users/{user Id} > messages
  - name: gmail/v1/users/{user Id} > messages > {id}
  - name: gmail/v1/users/{user Id} > settings
  - name: gmail/v1/users/{user Id} > settings > auto Forwarding
  - name: gmail/v1/users/{user Id} > settings > delegates
  - name: gmail/v1/users/{user Id} > settings > delegates > {delegate Email}
  - name: gmail/v1/users/{user Id} > settings > filters
  - name: gmail/v1/users/{user Id} > settings > filters > {id}
  - name: gmail/v1/users/{user Id} > settings > forwarding Addresses
  - name: >-
      gmail/v1/users/{user Id} > settings > forwarding Addresses > {forwarding
      Email}
  - name: gmail/v1/users/{user Id} > settings > imap
  - name: gmail/v1/users/{user Id} > settings > language
  - name: gmail/v1/users/{user Id} > settings > pop
  - name: gmail/v1/users/{user Id} > settings > send As
  - name: gmail/v1/users/{user Id} > settings > send As > {send As Email}
  - name: >-
      gmail/v1/users/{user Id} > settings > send As > {send As Email} > smime
      Info
  - name: >-
      gmail/v1/users/{user Id} > settings > send As > {send As Email} > smime
      Info > {id}
  - name: gmail/v1/users/{user Id} > settings > vacation
  - name: gmail/v1/users/{user Id} > threads
  - name: gmail/v1/users/{user Id} > threads > {id}
paths:
  /gmail/v1/users/{userId}/drafts/{id}:
    delete:
      tags:
        - gmail/v1/users/{user Id} > drafts > {id}
      summary: gmail.users.drafts.delete
      description: >-
        Immediately and permanently deletes the specified draft. Does not simply
        trash it.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the draft to delete.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - gmail/v1/users/{user Id} > drafts > {id}
      summary: gmail.users.drafts.get
      description: Gets the specified draft.
      security:
        - oauth2Auth: []
      parameters:
        - name: format
          in: query
          schema:
            type: string
          description: The format to return the draft in.
          example: <string>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the draft to retrieve.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: <string>
                message:
                  historyId: culpa
                  id: id magna
                  internalDate: Lorem nisi enim id
                  labelIds:
                    - occaec
                    - exercitation sint nulla minim anim
                  payload:
                    body:
                      attachmentId:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      data:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      size:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                    filename: cupidatat exercit
                    headers:
                      - value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      - value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                    mimeType: sit do
                    partId: nulla aliqua ipsum tempor consectetur
                    parts:
                      - value: >-
                          <Circular reference to
                          #/components/schemas/MessagePart detected>
                      - value: >-
                          <Circular reference to
                          #/components/schemas/MessagePart detected>
                  raw: exercitation et esse cillum nostrud
                  sizeEstimate: -633773
                  snippet: enim incididunt commodo
                  threadId: nostrud cillum ea Lorem
    put:
      tags:
        - gmail/v1/users/{user Id} > drafts > {id}
      summary: gmail.users.drafts.update
      description: Replaces a draft's content.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"id\": \"<string>\",\n    \"message\": {\n       
                \"historyId\": \"incididunt eu\",\n        \"id\":
                \"pro\",\n        \"internalDate\": \"dolor\",\n       
                \"labelIds\": [\n            \"est sed\",\n            \"sint
                commodo voluptate enim\"\n        ],\n        \"payload\":
                {\n            \"body\": {\n                \"attachmentId\":
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n               
                },\n                \"data\": {\n                    \"value\":
                \"<Error: Too many levels of nesting to fake this
                schema>\"\n                },\n                \"size\":
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n                }\n           
                },\n            \"filename\": \"aute\",\n           
                \"headers\": [\n                {\n                   
                \"value\": \"<Error: Too many levels of nesting to fake this
                schema>\"\n                },\n               
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n                }\n           
                ],\n            \"mimeType\": \"quis ut
                consectetur\",\n            \"partId\": \"fugiat exercitation
                esse et officia\",\n            \"parts\": [\n               
                {\n                    \"value\": \"<Circular reference to
                #/components/schemas/MessagePart detected>\"\n               
                },\n                {\n                    \"value\":
                \"<Circular reference to #/components/schemas/MessagePart
                detected>\"\n                }\n            ]\n       
                },\n        \"raw\": \"ipsum Lorem irure\",\n       
                \"sizeEstimate\": 55613833,\n        \"snippet\": \"exercitation
                in eiusmod\",\n        \"threadId\": \"labore dolore\"\n   
                }\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: message/cpim
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the draft to update.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: <string>
                message:
                  historyId: culpa
                  id: id magna
                  internalDate: Lorem nisi enim id
                  labelIds:
                    - occaec
                    - exercitation sint nulla minim anim
                  payload:
                    body:
                      attachmentId:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      data:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      size:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                    filename: cupidatat exercit
                    headers:
                      - value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      - value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                    mimeType: sit do
                    partId: nulla aliqua ipsum tempor consectetur
                    parts:
                      - value: >-
                          <Circular reference to
                          #/components/schemas/MessagePart detected>
                      - value: >-
                          <Circular reference to
                          #/components/schemas/MessagePart detected>
                  raw: exercitation et esse cillum nostrud
                  sizeEstimate: -633773
                  snippet: enim incididunt commodo
                  threadId: nostrud cillum ea Lorem
  /gmail/v1/users/{userId}/drafts:
    get:
      tags:
        - gmail/v1/users/{user Id} > drafts
      summary: gmail.users.drafts.list
      description: Lists the drafts in the user's mailbox.
      security:
        - oauth2Auth: []
      parameters:
        - name: includeSpamTrash
          in: query
          schema:
            type: string
          description: Include drafts from `SPAM` and `TRASH` in the results.
          example: <boolean>
        - name: maxResults
          in: query
          schema:
            type: string
          description: Maximum number of drafts to return.
          example: <integer>
        - name: pageToken
          in: query
          schema:
            type: string
          description: Page token to retrieve a specific page of results in the list.
          example: <string>
        - name: q
          in: query
          schema:
            type: string
          description: >-
            Only return draft messages matching the specified query. Supports
            the same query format as the Gmail search box. For example,
            `"from:someuser@example.com rfc822msgid: is:unread"`.
          example: <string>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                drafts:
                  - id: veniam Duis exercitati
                    message:
                      historyId: dolore sint Excepteur ipsum reprehenderit
                      id: minim et dolore
                      internalDate: proident Excepteur
                      labelIds:
                        - irure dolore fugiat aliquip eiusmod
                        - do sint laboris occaecat
                      payload:
                        body:
                          attachmentId:
                            value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                          data:
                            value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                          size:
                            value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                        filename: laborum
                        headers:
                          - value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                          - value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                        mimeType: labore Excepteur
                        partId: anim eu tempor velit
                        parts:
                          - value: >-
                              <Circular reference to
                              #/components/schemas/MessagePart detected>
                          - value: >-
                              <Circular reference to
                              #/components/schemas/MessagePart detected>
                      raw: aute qui
                      sizeEstimate: -56161869
                      snippet: consectetur occaecat irure elit
                      threadId: ex eu proident in magna
                  - id: elit Duis dolore
                    message:
                      historyId: ut
                      id: deserunt laborum
                      internalDate: mollit minim
                      labelIds:
                        - cillum laboris
                        - do velit magna aute laboris
                      payload:
                        body:
                          attachmentId:
                            value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                          data:
                            value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                          size:
                            value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                        filename: aute Lorem sed irure
                        headers:
                          - value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                          - value: >-
                              <Error: Too many levels of nesting to fake this
                              schema>
                        mimeType: ullamco i
                        partId: nisi laboris sunt
                        parts:
                          - value: >-
                              <Circular reference to
                              #/components/schemas/MessagePart detected>
                          - value: >-
                              <Circular reference to
                              #/components/schemas/MessagePart detected>
                      raw: ''
                      sizeEstimate: -54111262
                      snippet: id quis in do
                      threadId: pariatur ut Excep
                nextPageToken: in aliquip culpa
                resultSizeEstimate: 99349769
    post:
      tags:
        - gmail/v1/users/{user Id} > drafts
      summary: gmail.users.drafts.create
      description: Creates a new draft with the `DRAFT` label.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"id\": \"<string>\",\n    \"message\": {\n       
                \"historyId\": \"incididunt eu\",\n        \"id\":
                \"pro\",\n        \"internalDate\": \"dolor\",\n       
                \"labelIds\": [\n            \"est sed\",\n            \"sint
                commodo voluptate enim\"\n        ],\n        \"payload\":
                {\n            \"body\": {\n                \"attachmentId\":
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n               
                },\n                \"data\": {\n                    \"value\":
                \"<Error: Too many levels of nesting to fake this
                schema>\"\n                },\n                \"size\":
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n                }\n           
                },\n            \"filename\": \"aute\",\n           
                \"headers\": [\n                {\n                   
                \"value\": \"<Error: Too many levels of nesting to fake this
                schema>\"\n                },\n               
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n                }\n           
                ],\n            \"mimeType\": \"quis ut
                consectetur\",\n            \"partId\": \"fugiat exercitation
                esse et officia\",\n            \"parts\": [\n               
                {\n                    \"value\": \"<Circular reference to
                #/components/schemas/MessagePart detected>\"\n               
                },\n                {\n                    \"value\":
                \"<Circular reference to #/components/schemas/MessagePart
                detected>\"\n                }\n            ]\n       
                },\n        \"raw\": \"ipsum Lorem irure\",\n       
                \"sizeEstimate\": 55613833,\n        \"snippet\": \"exercitation
                in eiusmod\",\n        \"threadId\": \"labore dolore\"\n   
                }\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: message/cpim
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: <string>
                message:
                  historyId: culpa
                  id: id magna
                  internalDate: Lorem nisi enim id
                  labelIds:
                    - occaec
                    - exercitation sint nulla minim anim
                  payload:
                    body:
                      attachmentId:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      data:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      size:
                        value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                    filename: cupidatat exercit
                    headers:
                      - value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                      - value: >-
                          <Error: Too many levels of nesting to fake this
                          schema>
                    mimeType: sit do
                    partId: nulla aliqua ipsum tempor consectetur
                    parts:
                      - value: >-
                          <Circular reference to
                          #/components/schemas/MessagePart detected>
                      - value: >-
                          <Circular reference to
                          #/components/schemas/MessagePart detected>
                  raw: exercitation et esse cillum nostrud
                  sizeEstimate: -633773
                  snippet: enim incididunt commodo
                  threadId: nostrud cillum ea Lorem
  /gmail/v1/users/{userId}/drafts/send:
    post:
      tags:
        - gmail/v1/users/{user Id} > drafts
      summary: gmail.users.drafts.send
      description: >-
        Sends the specified, existing draft to the recipients in the `To`, `Cc`,
        and `Bcc` headers.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"id\": \"<string>\",\n    \"message\": {\n       
                \"historyId\": \"incididunt eu\",\n        \"id\":
                \"pro\",\n        \"internalDate\": \"dolor\",\n       
                \"labelIds\": [\n            \"est sed\",\n            \"sint
                commodo voluptate enim\"\n        ],\n        \"payload\":
                {\n            \"body\": {\n                \"attachmentId\":
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n               
                },\n                \"data\": {\n                    \"value\":
                \"<Error: Too many levels of nesting to fake this
                schema>\"\n                },\n                \"size\":
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n                }\n           
                },\n            \"filename\": \"aute\",\n           
                \"headers\": [\n                {\n                   
                \"value\": \"<Error: Too many levels of nesting to fake this
                schema>\"\n                },\n               
                {\n                    \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n                }\n           
                ],\n            \"mimeType\": \"quis ut
                consectetur\",\n            \"partId\": \"fugiat exercitation
                esse et officia\",\n            \"parts\": [\n               
                {\n                    \"value\": \"<Circular reference to
                #/components/schemas/MessagePart detected>\"\n               
                },\n                {\n                    \"value\":
                \"<Circular reference to #/components/schemas/MessagePart
                detected>\"\n                }\n            ]\n       
                },\n        \"raw\": \"ipsum Lorem irure\",\n       
                \"sizeEstimate\": 55613833,\n        \"snippet\": \"exercitation
                in eiusmod\",\n        \"threadId\": \"labore dolore\"\n   
                }\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: message/cpim
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: 'cupidatat '
                id: sit aliquip minim Excepteur
                internalDate: nostrud consectetur
                labelIds:
                  - veniam magna sed reprehenderit
                  - nulla do sunt
                payload:
                  body:
                    attachmentId:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    data:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    size:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                  filename: mollit magna nisi
                  headers:
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                  mimeType: 'mollit laborum '
                  partId: quis laboris ea id
                  parts:
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                raw: tempor id ut consequat
                sizeEstimate: 35793331
                snippet: eu cillum fugiat Ut
                threadId: proident te
  /gmail/v1/users/{userId}/labels/{id}:
    delete:
      tags:
        - gmail/v1/users/{user Id} > labels > {id}
      summary: gmail.users.labels.delete
      description: >-
        Immediately and permanently deletes the specified label and removes it
        from any messages and threads that it is applied to.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the label to delete.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - gmail/v1/users/{user Id} > labels > {id}
      summary: gmail.users.labels.get
      description: Gets the specified label.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the label to retrieve.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                color:
                  backgroundColor: sit
                  textColor: tempor aliqua
                id: <string>
                labelListVisibility: <string>
                messageListVisibility: <string>
                messagesTotal: <integer>
                messagesUnread: <integer>
                name: <string>
                threadsTotal: <integer>
                threadsUnread: <integer>
                type: <string>
    patch:
      tags:
        - gmail/v1/users/{user Id} > labels > {id}
      summary: gmail.users.labels.patch
      description: Patch the specified label.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"color\": {\n        \"backgroundColor\": \"aliquip
                fugiat occaecat\",\n        \"textColor\": \"nulla laboris
                sed\"\n    },\n    \"id\": \"<string>\",\n   
                \"labelListVisibility\": \"<string>\",\n   
                \"messageListVisibility\": \"<string>\",\n    \"messagesTotal\":
                \"<integer>\",\n    \"messagesUnread\": \"<integer>\",\n   
                \"name\": \"<string>\",\n    \"threadsTotal\":
                \"<integer>\",\n    \"threadsUnread\": \"<integer>\",\n   
                \"type\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the label to update.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                color:
                  backgroundColor: sit
                  textColor: tempor aliqua
                id: <string>
                labelListVisibility: <string>
                messageListVisibility: <string>
                messagesTotal: <integer>
                messagesUnread: <integer>
                name: <string>
                threadsTotal: <integer>
                threadsUnread: <integer>
                type: <string>
    put:
      tags:
        - gmail/v1/users/{user Id} > labels > {id}
      summary: gmail.users.labels.update
      description: Updates the specified label.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"color\": {\n        \"backgroundColor\": \"aliquip
                fugiat occaecat\",\n        \"textColor\": \"nulla laboris
                sed\"\n    },\n    \"id\": \"<string>\",\n   
                \"labelListVisibility\": \"<string>\",\n   
                \"messageListVisibility\": \"<string>\",\n    \"messagesTotal\":
                \"<integer>\",\n    \"messagesUnread\": \"<integer>\",\n   
                \"name\": \"<string>\",\n    \"threadsTotal\":
                \"<integer>\",\n    \"threadsUnread\": \"<integer>\",\n   
                \"type\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the label to update.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                color:
                  backgroundColor: sit
                  textColor: tempor aliqua
                id: <string>
                labelListVisibility: <string>
                messageListVisibility: <string>
                messagesTotal: <integer>
                messagesUnread: <integer>
                name: <string>
                threadsTotal: <integer>
                threadsUnread: <integer>
                type: <string>
  /gmail/v1/users/{userId}/labels:
    get:
      tags:
        - gmail/v1/users/{user Id} > labels
      summary: gmail.users.labels.list
      description: Lists all labels in the user's mailbox.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                labels:
                  - color:
                      backgroundColor: proident ex
                      textColor: dolor consequat
                    id: mollit nulla
                    labelListVisibility: labelShow
                    messageListVisibility: hide
                    messagesTotal: -23275177
                    messagesUnread: -17621138
                    name: aliquip in non adipisicing eiusmod
                    threadsTotal: -88136780
                    threadsUnread: 7144716
                    type: user
                  - color:
                      backgroundColor: aliqua fugiat labore Ut
                      textColor: est cillum voluptate culpa
                    id: incididunt laborum nostrud
                    labelListVisibility: labelHide
                    messageListVisibility: show
                    messagesTotal: -50116616
                    messagesUnread: 54809636
                    name: in Ut
                    threadsTotal: 82213471
                    threadsUnread: 95204107
                    type: user
    post:
      tags:
        - gmail/v1/users/{user Id} > labels
      summary: gmail.users.labels.create
      description: Creates a new label.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"color\": {\n        \"backgroundColor\": \"aliquip
                fugiat occaecat\",\n        \"textColor\": \"nulla laboris
                sed\"\n    },\n    \"id\": \"<string>\",\n   
                \"labelListVisibility\": \"<string>\",\n   
                \"messageListVisibility\": \"<string>\",\n    \"messagesTotal\":
                \"<integer>\",\n    \"messagesUnread\": \"<integer>\",\n   
                \"name\": \"<string>\",\n    \"threadsTotal\":
                \"<integer>\",\n    \"threadsUnread\": \"<integer>\",\n   
                \"type\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                color:
                  backgroundColor: sit
                  textColor: tempor aliqua
                id: <string>
                labelListVisibility: <string>
                messageListVisibility: <string>
                messagesTotal: <integer>
                messagesUnread: <integer>
                name: <string>
                threadsTotal: <integer>
                threadsUnread: <integer>
                type: <string>
  /gmail/v1/users/{userId}/messages/{id}:
    delete:
      tags:
        - gmail/v1/users/{user Id} > messages > {id}
      summary: gmail.users.messages.delete
      description: >-
        Immediately and permanently deletes the specified message. This
        operation cannot be undone. Prefer `messages.trash` instead.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the message to delete.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - gmail/v1/users/{user Id} > messages > {id}
      summary: gmail.users.messages.get
      description: Gets the specified message.
      security:
        - oauth2Auth: []
      parameters:
        - name: format
          in: query
          schema:
            type: string
          description: The format to return the message in.
          example: <string>
        - name: metadataHeaders
          in: query
          schema:
            type: string
          description: When given and format is `METADATA`, only include headers specified.
          example: <string>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the message to retrieve.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: <string>
                id: <string>
                internalDate: <string>
                labelIds:
                  - <string>
                  - <string>
                payload:
                  body:
                    attachmentId:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    data:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    size:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                  filename: aliqua exercitation dolore ullam
                  headers:
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                  mimeType: est commodo
                  partId: esse velit in
                  parts:
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                raw: <string>
                sizeEstimate: <integer>
                snippet: <string>
                threadId: <string>
  /gmail/v1/users/{userId}/messages/{id}/modify:
    post:
      tags:
        - gmail/v1/users/{user Id} > messages > {id}
      summary: gmail.users.messages.modify
      description: Modifies the labels on the specified message.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"addLabelIds\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"removeLabelIds\": [\n       
                \"<string>\",\n        \"<string>\"\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the message to modify.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: <string>
                id: <string>
                internalDate: <string>
                labelIds:
                  - <string>
                  - <string>
                payload:
                  body:
                    attachmentId:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    data:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    size:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                  filename: aliqua exercitation dolore ullam
                  headers:
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                  mimeType: est commodo
                  partId: esse velit in
                  parts:
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                raw: <string>
                sizeEstimate: <integer>
                snippet: <string>
                threadId: <string>
  /gmail/v1/users/{userId}/messages/{id}/trash:
    post:
      tags:
        - gmail/v1/users/{user Id} > messages > {id}
      summary: gmail.users.messages.trash
      description: Moves the specified message to the trash.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the message to Trash.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: <string>
                id: <string>
                internalDate: <string>
                labelIds:
                  - <string>
                  - <string>
                payload:
                  body:
                    attachmentId:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    data:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    size:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                  filename: aliqua exercitation dolore ullam
                  headers:
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                  mimeType: est commodo
                  partId: esse velit in
                  parts:
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                raw: <string>
                sizeEstimate: <integer>
                snippet: <string>
                threadId: <string>
  /gmail/v1/users/{userId}/messages/{id}/untrash:
    post:
      tags:
        - gmail/v1/users/{user Id} > messages > {id}
      summary: gmail.users.messages.untrash
      description: Removes the specified message from the trash.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the message to remove from Trash.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: <string>
                id: <string>
                internalDate: <string>
                labelIds:
                  - <string>
                  - <string>
                payload:
                  body:
                    attachmentId:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    data:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    size:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                  filename: aliqua exercitation dolore ullam
                  headers:
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                  mimeType: est commodo
                  partId: esse velit in
                  parts:
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                raw: <string>
                sizeEstimate: <integer>
                snippet: <string>
                threadId: <string>
  /gmail/v1/users/{userId}/messages:
    get:
      tags:
        - gmail/v1/users/{user Id} > messages
      summary: gmail.users.messages.list
      description: Lists the messages in the user's mailbox.
      security:
        - oauth2Auth: []
      parameters:
        - name: includeSpamTrash
          in: query
          schema:
            type: string
          description: Include messages from `SPAM` and `TRASH` in the results.
          example: <boolean>
        - name: labelIds
          in: query
          schema:
            type: string
          description: >-
            Only return messages with labels that match all of the specified
            label IDs.
          example: <string>
        - name: maxResults
          in: query
          schema:
            type: string
          description: Maximum number of messages to return.
          example: <integer>
        - name: pageToken
          in: query
          schema:
            type: string
          description: Page token to retrieve a specific page of results in the list.
          example: <string>
        - name: q
          in: query
          schema:
            type: string
          description: >-
            Only return messages matching the specified query. Supports the same
            query format as the Gmail search box. For example,
            `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter
            cannot be used when accessing the api using the gmail.metadata
            scope.
          example: <string>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                messages:
                  - historyId: aliqua elit
                    id: in nisi
                    internalDate: aliquip laboris Duis consectetur
                    labelIds:
                      - l
                      - adi
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: sed incididunt fugiat mollit
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: Excepteur qui consectetur irure
                      partId: conseq
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: dolore occaecat eu sed
                    sizeEstimate: -81125746
                    snippet: elit incididunt pariatur
                    threadId: ut proident ea velit id
                  - historyId: veniam dolore ea ut reprehenderit
                    id: reprehenderit Duis eu
                    internalDate: adipisicing ex est ut
                    labelIds:
                      - incididunt veniam
                      - cupidatat esse aute magna
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: eli
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: ut do aliquip tempor
                      partId: proident pariatur occaecat velit
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: sunt exercitation in
                    sizeEstimate: -16598599
                    snippet: dolor dolore
                    threadId: sed sit enim
                nextPageToken: velit cupidatat eu ullamco Lorem
                resultSizeEstimate: -51081423
    post:
      tags:
        - gmail/v1/users/{user Id} > messages
      summary: gmail.users.messages.insert
      description: >-
        Directly inserts a message into only this user's mailbox similar to
        `IMAP APPEND`, bypassing most scanning and classification. Does not send
        a message.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"historyId\": \"<string>\",\n    \"id\":
                \"<string>\",\n    \"internalDate\": \"<string>\",\n   
                \"labelIds\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"payload\": {\n        \"body\":
                {\n            \"attachmentId\": {\n                \"value\":
                \"<Error: Too many levels of nesting to fake this
                schema>\"\n            },\n            \"data\":
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            },\n           
                \"size\": {\n                \"value\": \"<Error: Too many
                levels of nesting to fake this schema>\"\n            }\n       
                },\n        \"filename\": \"laborum cupidatat laboris dolore
                commodo\",\n        \"headers\": [\n           
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            },\n           
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            }\n       
                ],\n        \"mimeType\": \"pariatur consectetur
                culpa\",\n        \"partId\": \"nisi laboris cillum
                enim\",\n        \"parts\": [\n            {\n               
                \"value\": \"<Circular reference to
                #/components/schemas/MessagePart detected>\"\n           
                },\n            {\n                \"value\": \"<Circular
                reference to #/components/schemas/MessagePart
                detected>\"\n            }\n        ]\n    },\n    \"raw\":
                \"<string>\",\n    \"sizeEstimate\": \"<integer>\",\n   
                \"snippet\": \"<string>\",\n    \"threadId\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: message/cpim
        - name: deleted
          in: query
          schema:
            type: string
          description: >-
            Mark the email as permanently deleted (not TRASH) and only visible
            in Google Vault to a Vault administrator. Only used for G Suite
            accounts.
          example: <boolean>
        - name: internalDateSource
          in: query
          schema:
            type: string
          description: Source for Gmail's internal date of the message.
          example: <string>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: <string>
                id: <string>
                internalDate: <string>
                labelIds:
                  - <string>
                  - <string>
                payload:
                  body:
                    attachmentId:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    data:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    size:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                  filename: aliqua exercitation dolore ullam
                  headers:
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                  mimeType: est commodo
                  partId: esse velit in
                  parts:
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                raw: <string>
                sizeEstimate: <integer>
                snippet: <string>
                threadId: <string>
  /gmail/v1/users/{userId}/messages/batchDelete:
    post:
      tags:
        - gmail/v1/users/{user Id} > messages
      summary: gmail.users.messages.batch Delete
      description: >-
        Deletes many messages by message ID. Provides no guarantees that
        messages were not already deleted or even existed at all.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"ids\": [\n        \"<string>\",\n       
                \"<string>\"\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /gmail/v1/users/{userId}/messages/batchModify:
    post:
      tags:
        - gmail/v1/users/{user Id} > messages
      summary: gmail.users.messages.batch Modify
      description: Modifies the labels on the specified messages.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"addLabelIds\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"ids\": [\n       
                \"<string>\",\n        \"<string>\"\n    ],\n   
                \"removeLabelIds\": [\n        \"<string>\",\n       
                \"<string>\"\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /gmail/v1/users/{userId}/messages/import:
    post:
      tags:
        - gmail/v1/users/{user Id} > messages
      summary: gmail.users.messages.import
      description: >-
        Imports a message into only this user's mailbox, with standard email
        delivery scanning and classification similar to receiving via SMTP. Does
        not send a message. Note: This function doesn't trigger forwarding rules
        or filters set up by the user.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"historyId\": \"<string>\",\n    \"id\":
                \"<string>\",\n    \"internalDate\": \"<string>\",\n   
                \"labelIds\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"payload\": {\n        \"body\":
                {\n            \"attachmentId\": {\n                \"value\":
                \"<Error: Too many levels of nesting to fake this
                schema>\"\n            },\n            \"data\":
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            },\n           
                \"size\": {\n                \"value\": \"<Error: Too many
                levels of nesting to fake this schema>\"\n            }\n       
                },\n        \"filename\": \"laborum cupidatat laboris dolore
                commodo\",\n        \"headers\": [\n           
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            },\n           
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            }\n       
                ],\n        \"mimeType\": \"pariatur consectetur
                culpa\",\n        \"partId\": \"nisi laboris cillum
                enim\",\n        \"parts\": [\n            {\n               
                \"value\": \"<Circular reference to
                #/components/schemas/MessagePart detected>\"\n           
                },\n            {\n                \"value\": \"<Circular
                reference to #/components/schemas/MessagePart
                detected>\"\n            }\n        ]\n    },\n    \"raw\":
                \"<string>\",\n    \"sizeEstimate\": \"<integer>\",\n   
                \"snippet\": \"<string>\",\n    \"threadId\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: message/cpim
        - name: deleted
          in: query
          schema:
            type: string
          description: >-
            Mark the email as permanently deleted (not TRASH) and only visible
            in Google Vault to a Vault administrator. Only used for G Suite
            accounts.
          example: <boolean>
        - name: internalDateSource
          in: query
          schema:
            type: string
          description: Source for Gmail's internal date of the message.
          example: <string>
        - name: neverMarkSpam
          in: query
          schema:
            type: string
          description: >-
            Ignore the Gmail spam classifier decision and never mark this email
            as SPAM in the mailbox.
          example: <boolean>
        - name: processForCalendar
          in: query
          schema:
            type: string
          description: >-
            Process calendar invites in the email and add any extracted meetings
            to the Google Calendar for this user.
          example: <boolean>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: <string>
                id: <string>
                internalDate: <string>
                labelIds:
                  - <string>
                  - <string>
                payload:
                  body:
                    attachmentId:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    data:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    size:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                  filename: aliqua exercitation dolore ullam
                  headers:
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                  mimeType: est commodo
                  partId: esse velit in
                  parts:
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                raw: <string>
                sizeEstimate: <integer>
                snippet: <string>
                threadId: <string>
  /gmail/v1/users/{userId}/messages/send:
    post:
      tags:
        - gmail/v1/users/{user Id} > messages
      summary: gmail.users.messages.send
      description: >-
        Sends the specified message to the recipients in the `To`, `Cc`, and
        `Bcc` headers.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"historyId\": \"<string>\",\n    \"id\":
                \"<string>\",\n    \"internalDate\": \"<string>\",\n   
                \"labelIds\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"payload\": {\n        \"body\":
                {\n            \"attachmentId\": {\n                \"value\":
                \"<Error: Too many levels of nesting to fake this
                schema>\"\n            },\n            \"data\":
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            },\n           
                \"size\": {\n                \"value\": \"<Error: Too many
                levels of nesting to fake this schema>\"\n            }\n       
                },\n        \"filename\": \"laborum cupidatat laboris dolore
                commodo\",\n        \"headers\": [\n           
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            },\n           
                {\n                \"value\": \"<Error: Too many levels of
                nesting to fake this schema>\"\n            }\n       
                ],\n        \"mimeType\": \"pariatur consectetur
                culpa\",\n        \"partId\": \"nisi laboris cillum
                enim\",\n        \"parts\": [\n            {\n               
                \"value\": \"<Circular reference to
                #/components/schemas/MessagePart detected>\"\n           
                },\n            {\n                \"value\": \"<Circular
                reference to #/components/schemas/MessagePart
                detected>\"\n            }\n        ]\n    },\n    \"raw\":
                \"<string>\",\n    \"sizeEstimate\": \"<integer>\",\n   
                \"snippet\": \"<string>\",\n    \"threadId\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: message/cpim
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: <string>
                id: <string>
                internalDate: <string>
                labelIds:
                  - <string>
                  - <string>
                payload:
                  body:
                    attachmentId:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    data:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                    size:
                      value: '<Error: Too many levels of nesting to fake this schema>'
                  filename: aliqua exercitation dolore ullam
                  headers:
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                    - value: '<Error: Too many levels of nesting to fake this schema>'
                  mimeType: est commodo
                  partId: esse velit in
                  parts:
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                    - value: >-
                        <Circular reference to #/components/schemas/MessagePart
                        detected>
                raw: <string>
                sizeEstimate: <integer>
                snippet: <string>
                threadId: <string>
  /gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}:
    get:
      tags:
        - gmail/v1/users/{user Id} > messages
      summary: gmail.users.messages.attachments.get
      description: Gets the specified message attachment.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: messageId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the message containing the attachment.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the attachment.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                attachmentId: et Lorem proident anim
                data: labore consectetur
                size: 24857801
  /gmail/v1/users/{userId}/settings/autoForwarding:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > auto Forwarding
      summary: gmail.users.settings.get Auto Forwarding
      description: Gets the auto-forwarding setting for the specified account.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                disposition: archive
                emailAddress: sed irure eu
                enabled: false
    put:
      tags:
        - gmail/v1/users/{user Id} > settings > auto Forwarding
      summary: gmail.users.settings.update Auto Forwarding
      description: >-
        Updates the auto-forwarding setting for the specified account. A
        verified forwarding address must be specified when auto-forwarding is
        enabled. This method is only available to service account clients that
        have been delegated domain-wide authority.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"disposition\": \"<string>\",\n    \"emailAddress\":
                \"<string>\",\n    \"enabled\": \"<boolean>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                disposition: <string>
                emailAddress: <string>
                enabled: <boolean>
  /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}:
    delete:
      tags:
        - gmail/v1/users/{user Id} > settings > delegates > {delegate Email}
      summary: gmail.users.settings.delegates.delete
      description: >-
        Removes the specified delegate (which can be of any verification
        status), and revokes any verification that may have been required for
        using it. Note that a delegate user must be referred to by their primary
        email address, and not an email alias. This method is only available to
        service account clients that have been delegated domain-wide authority.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: delegateEmail
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The email address of the user to be removed as a
            delegate.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > delegates > {delegate Email}
      summary: gmail.users.settings.delegates.get
      description: >-
        Gets the specified delegate. Note that a delegate user must be referred
        to by their primary email address, and not an email alias. This method
        is only available to service account clients that have been delegated
        domain-wide authority.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: delegateEmail
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The email address of the user whose delegate relationship
            is to be retrieved.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                delegateEmail: <string>
                verificationStatus: <string>
  /gmail/v1/users/{userId}/settings/delegates:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > delegates
      summary: gmail.users.settings.delegates.list
      description: >-
        Lists the delegates for the specified account. This method is only
        available to service account clients that have been delegated
        domain-wide authority.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                delegates:
                  - delegateEmail: consectetur tempor in id
                    verificationStatus: rejected
                  - delegateEmail: veniam Lorem in et
                    verificationStatus: accepted
    post:
      tags:
        - gmail/v1/users/{user Id} > settings > delegates
      summary: gmail.users.settings.delegates.create
      description: >-
        Adds a delegate with its verification status set directly to `accepted`,
        without sending any verification email. The delegate user must be a
        member of the same G Suite organization as the delegator user. Gmail
        imposes limitations on the number of delegates and delegators each user
        in a G Suite organization can have. These limits depend on your
        organization, but in general each user can have up to 25 delegates and
        up to 10 delegators. Note that a delegate user must be referred to by
        their primary email address, and not an email alias. Also note that when
        a new delegate is created, there may be up to a one minute delay before
        the new delegate is available for use. This method is only available to
        service account clients that have been delegated domain-wide authority.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"delegateEmail\": \"<string>\",\n   
                \"verificationStatus\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                delegateEmail: <string>
                verificationStatus: <string>
  /gmail/v1/users/{userId}/settings/filters/{id}:
    delete:
      tags:
        - gmail/v1/users/{user Id} > settings > filters > {id}
      summary: gmail.users.settings.filters.delete
      description: Deletes a filter.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the filter to be deleted.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > filters > {id}
      summary: gmail.users.settings.filters.get
      description: Gets a filter.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the filter to be fetched.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                action:
                  addLabelIds:
                    - ipsum sunt cillum dolore nostrud
                    - fugiat aute dolor quis
                  forward: cillum Duis l
                  removeLabelIds:
                    - aliqua non voluptate
                    - sunt occaecat deserunt
                criteria:
                  excludeChats: false
                  from: Duis
                  hasAttachment: false
                  negatedQuery: ullamco ipsum aliquip amet incididunt
                  query: qui et labore eu
                  size: 18871642
                  sizeComparison: larger
                  subject: sint nos
                  to: fugiat nisi
                id: <string>
  /gmail/v1/users/{userId}/settings/filters:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > filters
      summary: gmail.users.settings.filters.list
      description: Lists the message filters of a Gmail user.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                filter:
                  - action:
                      addLabelIds:
                        - mollit fugiat in
                        - in labore irure eiusmod culpa
                      forward: qui aute Lorem cupidatat
                      removeLabelIds:
                        - do ullamco eiusmod
                        - enim labore
                    criteria:
                      excludeChats: true
                      from: aliquip et
                      hasAttachment: true
                      negatedQuery: laborum id ullamco sit
                      query: ad amet exercitation ex
                      size: -92388150
                      sizeComparison: smaller
                      subject: amet minim ipsum
                      to: esse Lorem
                    id: sint Excepteur
                  - action:
                      addLabelIds:
                        - mollit ea esse
                        - laborum
                      forward: nisi
                      removeLabelIds:
                        - quis do minim dolor culpa
                        - mollit eu culpa
                    criteria:
                      excludeChats: true
                      from: non in cupidatat culpa irure
                      hasAttachment: true
                      negatedQuery: est commodo sed amet
                      query: commodo
                      size: 67292189
                      sizeComparison: smaller
                      subject: ea Duis velit
                      to: velit ea dolor tempor
                    id: labore Duis eiusmod
    post:
      tags:
        - gmail/v1/users/{user Id} > settings > filters
      summary: gmail.users.settings.filters.create
      description: 'Creates a filter. Note: you can only create a maximum of 1,000 filters.'
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"action\": {\n        \"addLabelIds\": [\n           
                \"cillum velit consequat\",\n            \"in
                deserunt\"\n        ],\n        \"forward\": \"labore occaecat
                mag\",\n        \"removeLabelIds\": [\n            \"in
                cupida\",\n            \"dolore in aliqua\"\n        ]\n   
                },\n    \"criteria\": {\n        \"excludeChats\":
                true,\n        \"from\": \"sint\",\n        \"hasAttachment\":
                true,\n        \"negatedQuery\": \"dolore elit\",\n       
                \"query\": \"officia reprehenderit Lorem\",\n        \"size\":
                -27945833,\n        \"sizeComparison\": \"larger\",\n       
                \"subject\": \"velit officia\",\n        \"to\": \"in
                laborum\"\n    },\n    \"id\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                action:
                  addLabelIds:
                    - ipsum sunt cillum dolore nostrud
                    - fugiat aute dolor quis
                  forward: cillum Duis l
                  removeLabelIds:
                    - aliqua non voluptate
                    - sunt occaecat deserunt
                criteria:
                  excludeChats: false
                  from: Duis
                  hasAttachment: false
                  negatedQuery: ullamco ipsum aliquip amet incididunt
                  query: qui et labore eu
                  size: 18871642
                  sizeComparison: larger
                  subject: sint nos
                  to: fugiat nisi
                id: <string>
  /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}:
    delete:
      tags:
        - >-
          gmail/v1/users/{user Id} > settings > forwarding Addresses >
          {forwarding Email}
      summary: gmail.users.settings.forwarding Addresses.delete
      description: >-
        Deletes the specified forwarding address and revokes any verification
        that may have been required. This method is only available to service
        account clients that have been delegated domain-wide authority.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: forwardingEmail
          in: path
          schema:
            type: string
          required: true
          description: (Required) The forwarding address to be deleted.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - >-
          gmail/v1/users/{user Id} > settings > forwarding Addresses >
          {forwarding Email}
      summary: gmail.users.settings.forwarding Addresses.get
      description: Gets the specified forwarding address.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: forwardingEmail
          in: path
          schema:
            type: string
          required: true
          description: (Required) The forwarding address to be retrieved.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                forwardingEmail: <string>
                verificationStatus: <string>
  /gmail/v1/users/{userId}/settings/forwardingAddresses:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > forwarding Addresses
      summary: gmail.users.settings.forwarding Addresses.list
      description: Lists the forwarding addresses for the specified account.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                forwardingAddresses:
                  - forwardingEmail: ad commodo
                    verificationStatus: accepted
                  - forwardingEmail: dolore i
                    verificationStatus: verificationStatusUnspecified
    post:
      tags:
        - gmail/v1/users/{user Id} > settings > forwarding Addresses
      summary: gmail.users.settings.forwarding Addresses.create
      description: >-
        Creates a forwarding address. If ownership verification is required, a
        message will be sent to the recipient and the resource's verification
        status will be set to `pending`; otherwise, the resource will be created
        with verification status set to `accepted`. This method is only
        available to service account clients that have been delegated
        domain-wide authority.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"forwardingEmail\": \"<string>\",\n   
                \"verificationStatus\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                forwardingEmail: <string>
                verificationStatus: <string>
  /gmail/v1/users/{userId}/settings/imap:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > imap
      summary: gmail.users.settings.get Imap
      description: Gets IMAP settings.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                autoExpunge: true
                enabled: false
                expungeBehavior: trash
                maxFolderSize: -77503352
    put:
      tags:
        - gmail/v1/users/{user Id} > settings > imap
      summary: gmail.users.settings.update Imap
      description: Updates IMAP settings.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"autoExpunge\": \"<boolean>\",\n    \"enabled\":
                \"<boolean>\",\n    \"expungeBehavior\": \"<string>\",\n   
                \"maxFolderSize\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                autoExpunge: <boolean>
                enabled: <boolean>
                expungeBehavior: <string>
                maxFolderSize: <integer>
  /gmail/v1/users/{userId}/settings/language:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > language
      summary: gmail.users.settings.get Language
      description: Gets language settings.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                displayLanguage: ullamco magna aute
    put:
      tags:
        - gmail/v1/users/{user Id} > settings > language
      summary: gmail.users.settings.update Language
      description: >-
        Updates language settings. If successful, the return object contains the
        `displayLanguage` that was saved for the user, which may differ from the
        value passed into the request. This is because the requested
        `displayLanguage` may not be directly supported by Gmail but have a
        close variant that is, and so the variant may be chosen and saved
        instead.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"displayLanguage\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                displayLanguage: <string>
  /gmail/v1/users/{userId}/settings/pop:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > pop
      summary: gmail.users.settings.get Pop
      description: Gets POP settings.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                accessWindow: accessWindowUnspecified
                disposition: archive
    put:
      tags:
        - gmail/v1/users/{user Id} > settings > pop
      summary: gmail.users.settings.update Pop
      description: Updates POP settings.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"accessWindow\": \"<string>\",\n    \"disposition\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                accessWindow: <string>
                disposition: <string>
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}:
    delete:
      tags:
        - >-
          gmail/v1/users/{user Id} > settings > send As > {send As Email} >
          smime Info > {id}
      summary: gmail.users.settings.send As.smime Info.delete
      description: Deletes the specified S/MIME config for the specified send-as alias.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The email address that appears in the "From:" header for
            mail sent using this alias.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The immutable ID for the SmimeInfo.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - >-
          gmail/v1/users/{user Id} > settings > send As > {send As Email} >
          smime Info > {id}
      summary: gmail.users.settings.send As.smime Info.get
      description: Gets the specified S/MIME config for the specified send-as alias.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The email address that appears in the "From:" header for
            mail sent using this alias.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The immutable ID for the SmimeInfo.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                encryptedKeyPassword: <string>
                expiration: <string>
                id: <string>
                isDefault: <boolean>
                issuerCn: <string>
                pem: <string>
                pkcs12: <string>
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault:
    post:
      tags:
        - >-
          gmail/v1/users/{user Id} > settings > send As > {send As Email} >
          smime Info > {id}
      summary: gmail.users.settings.send As.smime Info.set Default
      description: Sets the default S/MIME config for the specified send-as alias.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The email address that appears in the "From:" header for
            mail sent using this alias.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The immutable ID for the SmimeInfo.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo:
    get:
      tags:
        - >-
          gmail/v1/users/{user Id} > settings > send As > {send As Email} >
          smime Info
      summary: gmail.users.settings.send As.smime Info.list
      description: Lists S/MIME configs for the specified send-as alias.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The email address that appears in the "From:" header for
            mail sent using this alias.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                smimeInfo:
                  - encryptedKeyPassword: ut eu
                    expiration: sit eu do
                    id: Lorem et sint in
                    isDefault: true
                    issuerCn: reprehenderit dolore pariatur laborum sed
                    pem: minim sunt laborum
                    pkcs12: irure voluptate do esse adipisicing
                  - encryptedKeyPassword: mollit exercitation
                    expiration: labore ut occaecat sed
                    id: aliquip
                    isDefault: true
                    issuerCn: et minim
                    pem: laborum dolore
                    pkcs12: quis velit adipisicing
    post:
      tags:
        - >-
          gmail/v1/users/{user Id} > settings > send As > {send As Email} >
          smime Info
      summary: gmail.users.settings.send As.smime Info.insert
      description: >-
        Insert (upload) the given S/MIME config for the specified send-as alias.
        Note that pkcs12 format is required for the key.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"encryptedKeyPassword\": \"<string>\",\n   
                \"expiration\": \"<string>\",\n    \"id\": \"<string>\",\n   
                \"isDefault\": \"<boolean>\",\n    \"issuerCn\":
                \"<string>\",\n    \"pem\": \"<string>\",\n    \"pkcs12\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The email address that appears in the "From:" header for
            mail sent using this alias.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                encryptedKeyPassword: <string>
                expiration: <string>
                id: <string>
                isDefault: <boolean>
                issuerCn: <string>
                pem: <string>
                pkcs12: <string>
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}:
    delete:
      tags:
        - gmail/v1/users/{user Id} > settings > send As > {send As Email}
      summary: gmail.users.settings.send As.delete
      description: >-
        Deletes the specified send-as alias. Revokes any verification that may
        have been required for using it. This method is only available to
        service account clients that have been delegated domain-wide authority.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: (Required) The send-as alias to be deleted.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > send As > {send As Email}
      summary: gmail.users.settings.send As.get
      description: >-
        Gets the specified send-as alias. Fails with an HTTP 404 error if the
        specified address is not a member of the collection.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: (Required) The send-as alias to be retrieved.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                displayName: <string>
                isDefault: <boolean>
                isPrimary: <boolean>
                replyToAddress: <string>
                sendAsEmail: <string>
                signature: <string>
                smtpMsa:
                  host: aute Ut dolor ad sint
                  password: nulla sint
                  port: -64579657
                  securityMode: starttls
                  username: id officia amet commodo
                treatAsAlias: <boolean>
                verificationStatus: <string>
    patch:
      tags:
        - gmail/v1/users/{user Id} > settings > send As > {send As Email}
      summary: gmail.users.settings.send As.patch
      description: Patch the specified send-as alias.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"displayName\": \"<string>\",\n    \"isDefault\":
                \"<boolean>\",\n    \"isPrimary\": \"<boolean>\",\n   
                \"replyToAddress\": \"<string>\",\n    \"sendAsEmail\":
                \"<string>\",\n    \"signature\": \"<string>\",\n   
                \"smtpMsa\": {\n        \"host\": \"in est reprehenderit mollit
                adipisicing\",\n        \"password\": \"consequat ad\",\n       
                \"port\": -89662965,\n        \"securityMode\":
                \"ssl\",\n        \"username\": \"aute incididunt\"\n    },\n   
                \"treatAsAlias\": \"<boolean>\",\n    \"verificationStatus\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: (Required) The send-as alias to be updated.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                displayName: <string>
                isDefault: <boolean>
                isPrimary: <boolean>
                replyToAddress: <string>
                sendAsEmail: <string>
                signature: <string>
                smtpMsa:
                  host: aute Ut dolor ad sint
                  password: nulla sint
                  port: -64579657
                  securityMode: starttls
                  username: id officia amet commodo
                treatAsAlias: <boolean>
                verificationStatus: <string>
    put:
      tags:
        - gmail/v1/users/{user Id} > settings > send As > {send As Email}
      summary: gmail.users.settings.send As.update
      description: >-
        Updates a send-as alias. If a signature is provided, Gmail will sanitize
        the HTML before saving it with the alias. Addresses other than the
        primary address for the account can only be updated by service account
        clients that have been delegated domain-wide authority.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"displayName\": \"<string>\",\n    \"isDefault\":
                \"<boolean>\",\n    \"isPrimary\": \"<boolean>\",\n   
                \"replyToAddress\": \"<string>\",\n    \"sendAsEmail\":
                \"<string>\",\n    \"signature\": \"<string>\",\n   
                \"smtpMsa\": {\n        \"host\": \"in est reprehenderit mollit
                adipisicing\",\n        \"password\": \"consequat ad\",\n       
                \"port\": -89662965,\n        \"securityMode\":
                \"ssl\",\n        \"username\": \"aute incididunt\"\n    },\n   
                \"treatAsAlias\": \"<boolean>\",\n    \"verificationStatus\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: (Required) The send-as alias to be updated.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                displayName: <string>
                isDefault: <boolean>
                isPrimary: <boolean>
                replyToAddress: <string>
                sendAsEmail: <string>
                signature: <string>
                smtpMsa:
                  host: aute Ut dolor ad sint
                  password: nulla sint
                  port: -64579657
                  securityMode: starttls
                  username: id officia amet commodo
                treatAsAlias: <boolean>
                verificationStatus: <string>
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify:
    post:
      tags:
        - gmail/v1/users/{user Id} > settings > send As > {send As Email}
      summary: gmail.users.settings.send As.verify
      description: >-
        Sends a verification email to the specified send-as alias address. The
        verification status must be `pending`. This method is only available to
        service account clients that have been delegated domain-wide authority.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
        - name: sendAsEmail
          in: path
          schema:
            type: string
          required: true
          description: (Required) The send-as alias to be verified.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /gmail/v1/users/{userId}/settings/sendAs:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > send As
      summary: gmail.users.settings.send As.list
      description: >-
        Lists the send-as aliases for the specified account. The result includes
        the primary send-as address associated with the account as well as any
        custom "from" aliases.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                sendAs:
                  - displayName: cupidatat in Lorem velit dolore
                    isDefault: false
                    isPrimary: false
                    replyToAddress: incididunt
                    sendAsEmail: sed
                    signature: non ullamco
                    smtpMsa:
                      host: dolor fugiat
                      password: dolor
                      port: 16790091
                      securityMode: none
                      username: in exercitation tempor cupidatat
                    treatAsAlias: false
                    verificationStatus: verificationStatusUnspecified
                  - displayName: ipsum labore sunt dolore
                    isDefault: false
                    isPrimary: true
                    replyToAddress: quis aliquip fugiat
                    sendAsEmail: fugiat
                    signature: qui
                    smtpMsa:
                      host: Excepteur pariatur qui laboris eli
                      password: cillum culpa et laborum sint
                      port: -42247806
                      securityMode: ssl
                      username: veniam dolore enim deserunt aliqu
                    treatAsAlias: false
                    verificationStatus: pending
    post:
      tags:
        - gmail/v1/users/{user Id} > settings > send As
      summary: gmail.users.settings.send As.create
      description: >-
        Creates a custom "from" send-as alias. If an SMTP MSA is specified,
        Gmail will attempt to connect to the SMTP service to validate the
        configuration before creating the alias. If ownership verification is
        required for the alias, a message will be sent to the email address and
        the resource's verification status will be set to `pending`; otherwise,
        the resource will be created with verification status set to `accepted`.
        If a signature is provided, Gmail will sanitize the HTML before saving
        it with the alias. This method is only available to service account
        clients that have been delegated domain-wide authority.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"displayName\": \"<string>\",\n    \"isDefault\":
                \"<boolean>\",\n    \"isPrimary\": \"<boolean>\",\n   
                \"replyToAddress\": \"<string>\",\n    \"sendAsEmail\":
                \"<string>\",\n    \"signature\": \"<string>\",\n   
                \"smtpMsa\": {\n        \"host\": \"in est reprehenderit mollit
                adipisicing\",\n        \"password\": \"consequat ad\",\n       
                \"port\": -89662965,\n        \"securityMode\":
                \"ssl\",\n        \"username\": \"aute incididunt\"\n    },\n   
                \"treatAsAlias\": \"<boolean>\",\n    \"verificationStatus\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                displayName: <string>
                isDefault: <boolean>
                isPrimary: <boolean>
                replyToAddress: <string>
                sendAsEmail: <string>
                signature: <string>
                smtpMsa:
                  host: aute Ut dolor ad sint
                  password: nulla sint
                  port: -64579657
                  securityMode: starttls
                  username: id officia amet commodo
                treatAsAlias: <boolean>
                verificationStatus: <string>
  /gmail/v1/users/{userId}/settings/vacation:
    get:
      tags:
        - gmail/v1/users/{user Id} > settings > vacation
      summary: gmail.users.settings.get Vacation
      description: Gets vacation responder settings.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                enableAutoReply: true
                endTime: cupidatat
                responseBodyHtml: voluptate
                responseBodyPlainText: Lorem Excepteur
                responseSubject: labore consequat voluptate nisi
                restrictToContacts: false
                restrictToDomain: false
                startTime: aliquip nulla in Duis
    put:
      tags:
        - gmail/v1/users/{user Id} > settings > vacation
      summary: gmail.users.settings.update Vacation
      description: Updates vacation responder settings.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"enableAutoReply\": \"<boolean>\",\n    \"endTime\":
                \"<string>\",\n    \"responseBodyHtml\": \"<string>\",\n   
                \"responseBodyPlainText\": \"<string>\",\n   
                \"responseSubject\": \"<string>\",\n    \"restrictToContacts\":
                \"<boolean>\",\n    \"restrictToDomain\": \"<boolean>\",\n   
                \"startTime\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) User's email address. The special value "me" can be used
            to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                enableAutoReply: <boolean>
                endTime: <string>
                responseBodyHtml: <string>
                responseBodyPlainText: <string>
                responseSubject: <string>
                restrictToContacts: <boolean>
                restrictToDomain: <boolean>
                startTime: <string>
  /gmail/v1/users/{userId}/threads/{id}:
    delete:
      tags:
        - gmail/v1/users/{user Id} > threads > {id}
      summary: gmail.users.threads.delete
      description: >-
        Immediately and permanently deletes the specified thread. This operation
        cannot be undone. Prefer `threads.trash` instead.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Thread to delete.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
    get:
      tags:
        - gmail/v1/users/{user Id} > threads > {id}
      summary: gmail.users.threads.get
      description: Gets the specified thread.
      security:
        - oauth2Auth: []
      parameters:
        - name: format
          in: query
          schema:
            type: string
          description: The format to return the messages in.
          example: <string>
        - name: metadataHeaders
          in: query
          schema:
            type: string
          description: When given and format is METADATA, only include headers specified.
          example: <string>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the thread to retrieve.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: laborum sunt commodo do
                id: dolore in id voluptate
                messages:
                  - historyId: <string>
                    id: <string>
                    internalDate: <string>
                    labelIds:
                      - <string>
                      - <string>
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: amet dolor est
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: ea ex
                      partId: ex anim nostrud
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: <string>
                    sizeEstimate: <integer>
                    snippet: <string>
                    threadId: <string>
                  - historyId: <string>
                    id: <string>
                    internalDate: <string>
                    labelIds:
                      - <string>
                      - <string>
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: veniam fugiat sit Ut commodo
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: cupidatat dolor et laborum proident
                      partId: Duis Excepteur
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: <string>
                    sizeEstimate: <integer>
                    snippet: <string>
                    threadId: <string>
                snippet: ut mollit quis nisi exercitation
  /gmail/v1/users/{userId}/threads/{id}/modify:
    post:
      tags:
        - gmail/v1/users/{user Id} > threads > {id}
      summary: gmail.users.threads.modify
      description: >-
        Modifies the labels applied to the thread. This applies to all messages
        in the thread.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"addLabelIds\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"removeLabelIds\": [\n       
                \"<string>\",\n        \"<string>\"\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the thread to modify.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: laborum sunt commodo do
                id: dolore in id voluptate
                messages:
                  - historyId: <string>
                    id: <string>
                    internalDate: <string>
                    labelIds:
                      - <string>
                      - <string>
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: amet dolor est
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: ea ex
                      partId: ex anim nostrud
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: <string>
                    sizeEstimate: <integer>
                    snippet: <string>
                    threadId: <string>
                  - historyId: <string>
                    id: <string>
                    internalDate: <string>
                    labelIds:
                      - <string>
                      - <string>
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: veniam fugiat sit Ut commodo
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: cupidatat dolor et laborum proident
                      partId: Duis Excepteur
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: <string>
                    sizeEstimate: <integer>
                    snippet: <string>
                    threadId: <string>
                snippet: ut mollit quis nisi exercitation
  /gmail/v1/users/{userId}/threads/{id}/trash:
    post:
      tags:
        - gmail/v1/users/{user Id} > threads > {id}
      summary: gmail.users.threads.trash
      description: Moves the specified thread to the trash.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the thread to Trash.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: laborum sunt commodo do
                id: dolore in id voluptate
                messages:
                  - historyId: <string>
                    id: <string>
                    internalDate: <string>
                    labelIds:
                      - <string>
                      - <string>
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: amet dolor est
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: ea ex
                      partId: ex anim nostrud
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: <string>
                    sizeEstimate: <integer>
                    snippet: <string>
                    threadId: <string>
                  - historyId: <string>
                    id: <string>
                    internalDate: <string>
                    labelIds:
                      - <string>
                      - <string>
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: veniam fugiat sit Ut commodo
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: cupidatat dolor et laborum proident
                      partId: Duis Excepteur
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: <string>
                    sizeEstimate: <integer>
                    snippet: <string>
                    threadId: <string>
                snippet: ut mollit quis nisi exercitation
  /gmail/v1/users/{userId}/threads/{id}/untrash:
    post:
      tags:
        - gmail/v1/users/{user Id} > threads > {id}
      summary: gmail.users.threads.untrash
      description: Removes the specified thread from the trash.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the thread to remove from Trash.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                historyId: laborum sunt commodo do
                id: dolore in id voluptate
                messages:
                  - historyId: <string>
                    id: <string>
                    internalDate: <string>
                    labelIds:
                      - <string>
                      - <string>
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: amet dolor est
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: ea ex
                      partId: ex anim nostrud
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: <string>
                    sizeEstimate: <integer>
                    snippet: <string>
                    threadId: <string>
                  - historyId: <string>
                    id: <string>
                    internalDate: <string>
                    labelIds:
                      - <string>
                      - <string>
                    payload:
                      body:
                        attachmentId:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        data:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        size:
                          value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      filename: veniam fugiat sit Ut commodo
                      headers:
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                        - value: >-
                            <Error: Too many levels of nesting to fake this
                            schema>
                      mimeType: cupidatat dolor et laborum proident
                      partId: Duis Excepteur
                      parts:
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                        - value: >-
                            <Circular reference to
                            #/components/schemas/MessagePart detected>
                    raw: <string>
                    sizeEstimate: <integer>
                    snippet: <string>
                    threadId: <string>
                snippet: ut mollit quis nisi exercitation
  /gmail/v1/users/{userId}/threads:
    get:
      tags:
        - gmail/v1/users/{user Id} > threads
      summary: gmail.users.threads.list
      description: Lists the threads in the user's mailbox.
      security:
        - oauth2Auth: []
      parameters:
        - name: includeSpamTrash
          in: query
          schema:
            type: string
          description: Include threads from `SPAM` and `TRASH` in the results.
          example: <boolean>
        - name: labelIds
          in: query
          schema:
            type: string
          description: >-
            Only return threads with labels that match all of the specified
            label IDs.
          example: <string>
        - name: maxResults
          in: query
          schema:
            type: string
          description: Maximum number of threads to return.
          example: <integer>
        - name: pageToken
          in: query
          schema:
            type: string
          description: Page token to retrieve a specific page of results in the list.
          example: <string>
        - name: q
          in: query
          schema:
            type: string
          description: >-
            Only return threads matching the specified query. Supports the same
            query format as the Gmail search box. For example,
            `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter
            cannot be used when accessing the api using the gmail.metadata
            scope.
          example: <string>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                nextPageToken: anim dolore dolore aliquip pariatur
                resultSizeEstimate: -21814645
                threads:
                  - historyId: Ut ame
                    id: sunt in elit dolor
                    messages:
                      - historyId: <string>
                        id: <string>
                        internalDate: <string>
                        labelIds:
                          - <string>
                          - <string>
                        payload:
                          body:
                            attachmentId:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            data:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            size:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          filename: et Excepteur
                          headers:
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          mimeType: officia ut
                          partId: irure
                          parts:
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                        raw: <string>
                        sizeEstimate: <integer>
                        snippet: <string>
                        threadId: <string>
                      - historyId: <string>
                        id: <string>
                        internalDate: <string>
                        labelIds:
                          - <string>
                          - <string>
                        payload:
                          body:
                            attachmentId:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            data:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            size:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          filename: 'fugiat id eu '
                          headers:
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          mimeType: exercitation ullamco
                          partId: ut in consequat ut
                          parts:
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                        raw: <string>
                        sizeEstimate: <integer>
                        snippet: <string>
                        threadId: <string>
                    snippet: irure ex
                  - historyId: in labore ut Lorem
                    id: do in ut
                    messages:
                      - historyId: <string>
                        id: <string>
                        internalDate: <string>
                        labelIds:
                          - <string>
                          - <string>
                        payload:
                          body:
                            attachmentId:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            data:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            size:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          filename: aliquip mollit
                          headers:
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          mimeType: nisi consequat amet
                          partId: incididunt consequat sed consectetur
                          parts:
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                        raw: <string>
                        sizeEstimate: <integer>
                        snippet: <string>
                        threadId: <string>
                      - historyId: <string>
                        id: <string>
                        internalDate: <string>
                        labelIds:
                          - <string>
                          - <string>
                        payload:
                          body:
                            attachmentId:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            data:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            size:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          filename: incididunt minim dolore occaec
                          headers:
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          mimeType: aute culpa
                          partId: nisi
                          parts:
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                        raw: <string>
                        sizeEstimate: <integer>
                        snippet: <string>
                        threadId: <string>
                    snippet: eiusmod Ut id occaecat Duis
  /gmail/v1/users/{userId}/history:
    get:
      tags:
        - gmail/v1/users/{user Id}
      summary: gmail.users.history.list
      description: >-
        Lists the history of all changes to the given mailbox. History results
        are returned in chronological order (increasing `historyId`).
      security:
        - oauth2Auth: []
      parameters:
        - name: historyTypes
          in: query
          schema:
            type: string
          description: History types to be returned by the function
          example: <string>
        - name: labelId
          in: query
          schema:
            type: string
          description: Only return messages with a label matching the ID.
          example: <string>
        - name: maxResults
          in: query
          schema:
            type: string
          description: The maximum number of history records to return.
          example: <integer>
        - name: pageToken
          in: query
          schema:
            type: string
          description: Page token to retrieve a specific page of results in the list.
          example: <string>
        - name: startHistoryId
          in: query
          schema:
            type: string
          description: >-
            Required. Returns history records after the specified
            `startHistoryId`. The supplied `startHistoryId` should be obtained
            from the `historyId` of a message, thread, or previous `list`
            response. History IDs increase chronologically but are not
            contiguous with random gaps in between valid IDs. Supplying an
            invalid or out of date `startHistoryId` typically returns an `HTTP
            404` error code. A `historyId` is typically valid for at least a
            week, but in some rare circumstances may be valid for only a few
            hours. If you receive an `HTTP 404` error response, your application
            should perform a full sync. If you receive no `nextPageToken` in the
            response, there are no updates to retrieve and you can store the
            returned `historyId` for a future request.
          example: <string>
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                history:
                  - id: ex commodo consectetur
                    labelsAdded:
                      - labelIds:
                          - tempor mollit Duis minim nostrud
                          - eu
                        message:
                          historyId: dolor
                          id: ex exercitation ad irure
                          internalDate: in in
                          labelIds:
                            - Lorem in est ea
                            - voluptate sed ex officia
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: non en
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: non aute proident
                            partId: sint
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: cupidatat repr
                          sizeEstimate: -13786389
                          snippet: fugiat sit
                          threadId: sunt ipsum nisi do
                      - labelIds:
                          - laborum ea
                          - in sunt et
                        message:
                          historyId: eu Ut
                          id: fugiat magna cillum proident
                          internalDate: ut
                          labelIds:
                            - exercitation veniam aute
                            - velit consectetur sint anim
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: aliquip amet
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: ea minim et aliquip
                            partId: consequat
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: elit occaecat sint
                          sizeEstimate: -17310421
                          snippet: tempor nostrud
                          threadId: consectetur offi
                    labelsRemoved:
                      - labelIds:
                          - ut dolor sunt
                          - tempor dolor dolore amet
                        message:
                          historyId: aute p
                          id: in nostrud veniam
                          internalDate: labore Duis commodo
                          labelIds:
                            - sed eu ea
                            - cupidatat irure
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: aliqua ex adipisicing
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: cil
                            partId: ex laboris quis adipisicing
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: esse do pariatur elit
                          sizeEstimate: -58692221
                          snippet: exercitation fugiat esse velit
                          threadId: aute eiusmod elit
                      - labelIds:
                          - nostrud incididun
                          - mollit sunt
                        message:
                          historyId: incididunt in tempor
                          id: enim officia veniam
                          internalDate: sint Lorem
                          labelIds:
                            - elit
                            - et eiusmod
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: exercitation nisi
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: Duis Lorem
                            partId: id voluptate
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: culpa Ut cillum
                          sizeEstimate: 99482464
                          snippet: dolore
                          threadId: in culpa sint nulla
                    messages:
                      - historyId: incididunt ex non
                        id: ad eiusmod in officia
                        internalDate: in
                        labelIds:
                          - non ipsum reprehenderit
                          - ipsum
                        payload:
                          body:
                            attachmentId:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            data:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            size:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          filename: laborum consequat velit
                          headers:
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          mimeType: irure sint cupidatat consectetu
                          partId: cupidatat laboris
                          parts:
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                        raw: dolor voluptate velit tempor esse
                        sizeEstimate: -60102028
                        snippet: aliquip dolor pariatur sunt
                        threadId: sit culpa
                      - historyId: dolor consectetur anim
                        id: Lorem quis deserunt nostrud
                        internalDate: non
                        labelIds:
                          - reprehenderit elit
                          - pariatur incididunt cillum officia in
                        payload:
                          body:
                            attachmentId:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            data:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            size:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          filename: sit magna minim aute
                          headers:
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          mimeType: laborum in pariatur culpa
                          partId: officia exercitation minim
                          parts:
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                        raw: veniam
                        sizeEstimate: -48871797
                        snippet: est cillum
                        threadId: 'nisi '
                    messagesAdded:
                      - message:
                          historyId: dolore culpa do qui
                          id: et ullamco exercitation
                          internalDate: laborum ad magna
                          labelIds:
                            - est
                            - voluptate minim aute
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: in magna ex enim
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: ipsum Excepteur
                            partId: anim consectetur culpa sed amet
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: sint voluptate do
                          sizeEstimate: -43602756
                          snippet: pariatur elit qui commodo
                          threadId: minim volu
                      - message:
                          historyId: veniam dolore laborum
                          id: laborum o
                          internalDate: non adipisicing
                          labelIds:
                            - dolore
                            - mollit officia elit
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: nostrud minim Excepteur mollit labore
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: velit veniam enim non dolore
                            partId: ullamco
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: deserunt proident anim n
                          sizeEstimate: -54996027
                          snippet: eu elit
                          threadId: esse voluptate eiusmod fugiat tempor
                    messagesDeleted:
                      - message:
                          historyId: consequat ad dolor
                          id: officia
                          internalDate: ipsum pariatur
                          labelIds:
                            - fugiat in reprehenderit adipisicing veniam
                            - proident laborum aute
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: est aliqua nostrud enim
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: deserunt elit irure
                            partId: nisi anim amet
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: dolor quis nulla qui
                          sizeEstimate: -27107525
                          snippet: in tempor
                          threadId: deserunt laboris Lorem laborum
                      - message:
                          historyId: amet commodo
                          id: ut officia nulla nisi
                          internalDate: exercitation amet consectetur dolore officia
                          labelIds:
                            - ut
                            - ex consec
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: eu cillum labore commodo aliqua
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: nulla
                            partId: nulla dolore proident
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: magna veniam
                          sizeEstimate: -42797998
                          snippet: sed aliquip labore
                          threadId: voluptate esse veniam amet
                  - id: aliqua ut magna irure
                    labelsAdded:
                      - labelIds:
                          - ipsum et aliqua commodo in
                          - cupidatat dolor elit laboris
                        message:
                          historyId: sit Lorem reprehenderit
                          id: ipsum ex
                          internalDate: occaecat laboris
                          labelIds:
                            - dolore mollit dolor nisi
                            - aute ut
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: esse incididunt officia
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: consectetur ipsum laboris in fugiat
                            partId: non mollit nulla
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: non incididunt est commodo
                          sizeEstimate: -51914449
                          snippet: dolor id
                          threadId: adipisicing et est incididunt
                      - labelIds:
                          - mollit labore aliqua sint
                          - velit do nostrud eu
                        message:
                          historyId: labore elit reprehenderit in
                          id: enim ut cillum consequat
                          internalDate: incididunt amet
                          labelIds:
                            - in
                            - eiusmod deserunt
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: et minim
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: exercitation adipisicing irure
                            partId: in in ut elit
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: aute veniam eu qui
                          sizeEstimate: -30717551
                          snippet: proide
                          threadId: aute ullamco qui
                    labelsRemoved:
                      - labelIds:
                          - aliquip dolor in l
                          - cupidatat et Ut
                        message:
                          historyId: amet tempor sint elit exercitation
                          id: minim aliqua
                          internalDate: velit id labore enim
                          labelIds:
                            - non laboris minim
                            - Lorem elit nostrud sit
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: fugiat dolore officia aliqua nulla
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: ut minim
                            partId: in
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: f
                          sizeEstimate: -59181788
                          snippet: 'dolore mollit cillum '
                          threadId: aut
                      - labelIds:
                          - nostrud ea
                          - Ut consequat incididunt exercitation
                        message:
                          historyId: ex elit ullamco
                          id: Excepteur veniam ad est
                          internalDate: proident cupidatat exercitation
                          labelIds:
                            - ut
                            - eiusmod incididunt reprehenderit
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: amet qui
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: dolore nostrud
                            partId: tempor velit pariatur eu
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: sit Excepteur aute ea
                          sizeEstimate: 1012223
                          snippet: ut veniam
                          threadId: paria
                    messages:
                      - historyId: incididunt Excepteur veniam
                        id: anim magna dolore ad
                        internalDate: cillum
                        labelIds:
                          - dolore ut
                          - proident Lorem laborum culpa
                        payload:
                          body:
                            attachmentId:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            data:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            size:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          filename: reprehenderit sunt esse
                          headers:
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          mimeType: dolore ipsum aliquip
                          partId: deserunt Excepteur ut laborum elit
                          parts:
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                        raw: culpa sint ullamco ad irure
                        sizeEstimate: -17946315
                        snippet: reprehenderit amet
                        threadId: commodo ull
                      - historyId: dol
                        id: qui do nisi
                        internalDate: irure laborum cupidatat
                        labelIds:
                          - elit esse
                          - aliqua velit id deserunt
                        payload:
                          body:
                            attachmentId:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            data:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            size:
                              value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          filename: dolore
                          headers:
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                            - value: >-
                                <Error: Too many levels of nesting to fake this
                                schema>
                          mimeType: 'veniam '
                          partId: pariatur tempor enim Lorem nulla
                          parts:
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                            - value: >-
                                <Circular reference to
                                #/components/schemas/MessagePart detected>
                        raw: qui fugiat do
                        sizeEstimate: 42609667
                        snippet: commodo
                        threadId: ad
                    messagesAdded:
                      - message:
                          historyId: nostrud culpa
                          id: amet sed quis dolor
                          internalDate: dolor non
                          labelIds:
                            - qui consequat
                            - cillum voluptate sed
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: reprehenderit velit
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: pariatur ullamco
                            partId: veniam
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: cillum Duis irure in
                          sizeEstimate: 66482949
                          snippet: ut
                          threadId: commo
                      - message:
                          historyId: voluptate laboris ut consequat
                          id: aliquip mollit nisi
                          internalDate: ipsum dolor tempor reprehenderit
                          labelIds:
                            - officia aute
                            - laboris non do Ut
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: consectetur enim et eiusmod
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: 'veniam ut ad '
                            partId: occaecat
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: ad et dolor
                          sizeEstimate: -56984387
                          snippet: ipsum qui aute
                          threadId: Duis dolor occaecat cillum
                    messagesDeleted:
                      - message:
                          historyId: enim officia
                          id: Lorem
                          internalDate: eu ullamco ni
                          labelIds:
                            - nulla commodo consequat in laborum
                            - dolor magna eiu
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: dolore exercitation
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: dolore est exercitation Excepteur velit
                            partId: Lorem dolore officia Duis
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: nisi labore dolore
                          sizeEstimate: -82020126
                          snippet: exercitat
                          threadId: ipsum
                      - message:
                          historyId: deserunt
                          id: in ex
                          internalDate: amet velit Excepteur officia
                          labelIds:
                            - et ad anim occaecat in
                            - 'dolor '
                          payload:
                            body:
                              attachmentId:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              data:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              size:
                                value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            filename: laborum aute
                            headers:
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                              - value: >-
                                  <Error: Too many levels of nesting to fake
                                  this schema>
                            mimeType: in eu
                            partId: dolor consectetur in
                            parts:
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                              - value: >-
                                  <Circular reference to
                                  #/components/schemas/MessagePart detected>
                          raw: est aliquip
                          sizeEstimate: -77048438
                          snippet: veniam pariatur id
                          threadId: ut ipsum sunt cillum dolor
                historyId: do irure qui anim sit
                nextPageToken: incididunt quis ut
  /gmail/v1/users/{userId}/profile:
    get:
      tags:
        - gmail/v1/users/{user Id}
      summary: gmail.users.get Profile
      description: Gets the current user's Gmail profile.
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                emailAddress: minim
                historyId: enim aliquip
                messagesTotal: -44501922
                threadsTotal: 92725726
  /gmail/v1/users/{userId}/stop:
    post:
      tags:
        - gmail/v1/users/{user Id}
      summary: gmail.users.stop
      description: Stop receiving push notifications for the given user mailbox.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
  /gmail/v1/users/{userId}/watch:
    post:
      tags:
        - gmail/v1/users/{user Id}
      summary: gmail.users.watch
      description: Set up or update a push notification watch on the given user mailbox.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"labelFilterAction\": \"<string>\",\n    \"labelIds\":
                [\n        \"<string>\",\n        \"<string>\"\n    ],\n   
                \"topicName\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: $.xgafv
          in: query
          schema:
            type: string
          description: V1 error format.
          example: <string>
        - name: access_token
          in: query
          schema:
            type: string
          description: OAuth access token.
          example: <string>
        - name: alt
          in: query
          schema:
            type: string
          description: Data format for response.
          example: <string>
        - name: callback
          in: query
          schema:
            type: string
          description: JSONP
          example: <string>
        - name: fields
          in: query
          schema:
            type: string
          description: Selector specifying which fields to include in a partial response.
          example: <string>
        - name: key
          in: query
          schema:
            type: string
          description: >-
            API key. Your API key identifies your project and provides you with
            API access, quota, and reports. Required unless you provide an OAuth
            2.0 token.
          example: <string>
        - name: oauth_token
          in: query
          schema:
            type: string
          description: OAuth 2.0 token for the current user.
          example: <string>
        - name: prettyPrint
          in: query
          schema:
            type: string
          description: Returns response with indentations and line breaks.
          example: <boolean>
        - name: quotaUser
          in: query
          schema:
            type: string
          description: >-
            Available to use for quota purposes for server-side applications.
            Can be any arbitrary string assigned to a user, but should not
            exceed 40 characters.
          example: <string>
        - name: upload_protocol
          in: query
          schema:
            type: string
          description: Upload protocol for media (e.g. "raw", "multipart").
          example: <string>
        - name: uploadType
          in: query
          schema:
            type: string
          description: Legacy upload protocol for media (e.g. "media", "multipart").
          example: <string>
        - name: userId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The user's email address. The special value `me` can be
            used to indicate the authenticated user.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                expiration: ut culpa sunt aute
                historyId: consequat sint
