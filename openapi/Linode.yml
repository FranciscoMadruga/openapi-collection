openapi: 3.0.0
info:
  title: Linode
  description: >-
    # Introduction

    The Linode API provides the ability to programmatically manage the full

    range of Linode products and services.


    This reference is designed to assist application developers and system

    administrators.  Each endpoint includes descriptions, request syntax, and

    examples using standard HTTP requests. Response data is returned in JSON

    format.



    This document was generated from our OpenAPI Specification.  See the

    <a target="_top" href="https://www.openapis.org">OpenAPI website</a> for
    more information.


    <a target="_top"
    href="https://developers.linode.com/api/docs/v4/openapi.yaml">Download the
    Linode OpenAPI Specification</a>.



    # Changelog


    <a target="_top" href="https://developers.linode.com/changelog">View our
    Changelog</a> to see release

    notes on all changes made to our API.


    # Access and Authentication


    Some endpoints are publicly accessible without requiring authentication.

    All endpoints affecting your Account, however, require either a Personal

    Access Token or OAuth authentication (when using third-party

    applications).


    ## Personal Access Token


    The easiest way to access the API is with a Personal Access Token (PAT)

    generated from the

    <a target="_top" href="https://cloud.linode.com/profile/tokens">Linode Cloud
    Manager</a>.


    All scopes for the OAuth security model (defined below) apply to this

    security model as well.


    ### Authentication


    | Security Scheme Type: | HTTP |

    |-----------------------|------|

    | **HTTP Authorization Scheme** | bearer |


    ## OAuth


    The OAuth workflow is a three-step process to authenticate a User before an

    application can start making API calls on the User's behalf. If all you need

    is a Personal Access Token, feel free to skip ahead to the next section.


    First, the User visits the application's website and is directed to log with

    Linode. The User is then redirected to Linode's authentication server and

    presented the scope levels the application is requesting. Once the User

    accepts the request for access, we redirect them back to the application's

    specified redirect URI with an access code.


    Once the User has logged in to Linode and you have received an exchange
    code,

    you will need to exchange that access code for an Authorization token. You

    do this by making an HTTP POST request to the following address:


    ```

    https://login.linode.com/oauth/token

    ```


    Make this request as `application/x-www-form-urlencoded` or as

    `multipart/form-data` and include the following parameters in the POST body:


    | PARAMETER | DESCRIPTION |

    |-----------|-------------|

    | client_id | Your app's client ID |

    | client_secret | Your app's client secret |

    | code | The code you just received from the redirect |


    You'll get a reponse like this:


    ```json

    {
      "scope": "linodes:read_write",
      "access_token": "03d084436a6c91fbafd5c4b20c82e5056a2e9ce1635920c30dc8d81dc7a6665c"
      "token_type": "bearer",
      "expires_in": 7200,
    }

    ```


    Included in the reponse is `access_token`. With this token, you can proceed
    to make

    authenticated HTTP requests to the API by adding this header to each
    request:


    ```

    Authorization: Bearer
    03d084436a6c91fbafd5c4b20c82e5056a2e9ce1635920c30dc8d81dc7a6665c

    ```


    ### Authentication


    | Security Scheme Type: | Oauth2 |

    |-----------------------|--------|

    | **AuthorizationCode Oauth Flow** |  **Authorization URL:**
    https://login.linode.com/oauth/authorize<br />**Token URL:**
    https://login.linode.com/oauth/token<br />**Scopes:**<br
    /><ul><li>`account:read_only` - Allows access to GET information about your
    Account.</li><li>`account:read_write` - Allows access to all endpoints
    related to your Account.</li><li>`domains:read_only` - Allows access to GET
    Domains on your Account.</li><li>`domains:read_write` - Allows access to all
    Domain endpoints.</li><li>`events:read_only` - Allows access to GET your
    Events.</li><li>`events:read_write` - Allows access to all endpoints related
    to your Events.</li><li>`images:read_only` - Allows access to GET your
    Images.</li><li>`images:read_write` - Allows access to all endpoints related
    to your Images.</li><li>`ips:read_only` - Allows access to GET your
    ips.</li><li>`ips:read_write` - Allows access to all endpoints related to
    your ips.</li><li>`linodes:read_only` - Allows access to GET Linodes on your
    Account.</li><li>`linodes:read_write` - Allow access to all endpoints
    related to your Linodes.</li><li>`longview:read_only` - Allows access to GET
    your Longview Clients.</li><li>`longview:read_write` - Allows access to all
    endpoints related to your Longview
    Clients.</li><li>`nodebalancers:read_only` - Allows access to GET
    NodeBalancers on your Account.</li><li>`nodebalancers:read_write` - Allows
    access to all NodeBalancer endpoints.</li><li>`stackscripts:read_only` -
    Allows access to GET your StackScripts.</li><li>`stackscripts:read_write` -
    Allows access to all endpoints related to your
    StackScripts.</li><li>`volumes:read_only` - Allows access to GET your
    Volumes.</li><li>`volumes:read_write` - Allows access to all endpoints
    related to your Volumes.</li></ul><br />|


    # Requests


    Requests must be made over HTTPS to ensure transactions are encrypted. The

    following Request methods are supported:


    | METHOD | USAGE |

    |--------|-------|

    | GET    | Retrieves data about collections and individual resources. |

    | POST   | For collections, creates a new resource of that type. Also used
    to perform actions on action endpoints. |

    | PUT    | Updates an existing resource. |

    | DELETE | Deletes a resource. This is a destructive action. |



    # Responses


    Actions will return one following HTTP response status codes:


    | STATUS  | DESCRIPTION |

    |---------|-------------|

    | 200 OK  | The request was successful. |

    | 204 No Content | The server successfully fulfilled the request and there
    is no additional content to send. |

    | 400 Bad Request | You submitted an invalid request (missing parameters,
    etc.). |

    | 401 Unauthorized | You failed to authenticate for this resource. |

    | 403 Forbidden | You are authenticated, but don't have permission to do
    this. |

    | 404 Not Found | The resource you're requesting does not exist. |

    | 429 Too Many Requests | You've hit a rate limit. |

    | 500 Internal Server Error | Please [open a Support
    Ticket](/api/v4/support-tickets/#post). |


    # Errors


    Success is indicated via <a
    href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"
    target="_top">Standard HTTP status codes</a>.

    `2xx` codes indicate success, `4xx` codes indicate a request error, and

    `5xx` errors indicate a server error. A

    request error might be an invalid input, a required parameter being omitted,

    or a malformed request. A server error means something went wrong processing

    your request. If this occurs, please

    [open a Support Ticket](/api/v4/support-tickets/#post)

    and let us know. Though errors are logged and we work quickly to resolve
    issues,

    opening a ticket and providing us with reproducable steps and data is always
    helpful.


    The `errors` field is an array of the things that went wrong with your
    request.

    We will try to include as many of the problems in the response as possible,

    but it's conceivable that fixing these errors and resubmitting may result in

    new errors coming back once we are able to get further along in the process

    of handling your request.



    Within each error object, the `field` parameter will be included if the
    error

    pertains to a specific field in the JSON you've submitted. This will be

    omitted if there is no relevant field. The `reason` is a human-readable

    explanation of the error, and will always be included.


    # Pagination


    Resource lists are always paginated. The response will look similar to this:


    ```json

    {
        "data": [ ... ],
        "page": 1,
        "pages": 3,
        "results": 300
    }

    ```


    * Pages start at 1. You may retrieve a specific page of results by adding

    `?page=x` to your URL (for example, `?page=4`). If the value of `page`

    exceeds `2^64/page_size`, the last possible page will be returned.



    * Page sizes default to 100,

    and can be set to return between 25 and 100. Page size can be set using

    `?page_size=x`.


    # Filtering and Sorting


    Collections are searchable by fields they include, marked in the spec as

    `x-linode-filterable: true`. Filters are passed

    in the `X-Filter` header and are formatted as JSON objects. Here is a
    request

    call for Linode Types in our "standard" class:


    ```Shell

    curl "https://api.linode.com/v4/linode/types" \
      -H 'X-Filter: { \
        "class": "standard"
      }'
    ```


    The filter object's keys are the keys of the object you're filtering,

    and the values are accepted values. You can add multiple filters by

    including more than one key. For example, filtering for "standard" Linode

    Types that offer one vcpu:


    ```Shell
     curl "https://api.linode.com/v4/linode/types" \
      -H 'X-Filter: { \
        "class": "standard",
        "vcpus": 1
      }'
    ```


    In the above example, both filters are combined with an "and" operation.

    However, if you wanted either Types with one vcpu or Types in our "standard"

    class, you can add an operator:


    ```Shell

    curl "https://api.linode.com/v4/linode/types" \
      -H 'X-Filter: {
        "+or": [
          { "vcpus": 1 },
          { "class": "standard" }
        ]
      }'
    ```


    Each filter in the `+or` array is its own filter object, and all conditions

    in it are combined with an "and" operation as they were in the previous
    example.


    Other operators are also available. Operators are keys of a Filter JSON

    object. Their value must be of the appropriate type, and they are evaluated

    as described below:


    | OPERATOR | TYPE   | DESCRIPTION                       |

    |----------|--------|-----------------------------------|

    | +and     | array  | All conditions must be true.       |

    | +or      | array  | One condition must be true.        |

    | +gt      | number | Value must be greater than number. |

    | +gte     | number | Value must be greater than or equal to number. |

    | +lt      | number | Value must be less than number. |

    | +lte     | number | Value must be less than or equal to number. |

    | +contains | string | Given string must be in the value. |

    | +neq      | string | Does not equal the value.          |

    | +order_by | string | Attribute to order the results by - must be
    filterable. |

    | +order    | string | Either "asc" or "desc". Defaults to "asc". Requires
    `+order_by`. |


    For example, filtering for [Linode Types](/api/v4/linode-types)

    that offer memory equal to or higher than 61440:


    ```Shell

    curl "https://api.linode.com/v4/linode/types" \
      -H 'X-Filter: {
        "memory": {
          "+gte": 61440
        }
      }'
    ```


    You can combine and nest operators to construct arbitrarily-complex queries.

    For example, give me all [Linode Types](/api/v4/linode-types)

    which are either `standard` or `highmem` class, or

    have between 12 and 20 vcpus:


    ```Shell

    curl "https://api.linode.com/v4/linode/types" \
      -H 'X-Filter: {
        "+or": [
          {
            "+or": [
              {
                "class": "standard"
              },
              {
                "class": "highmem"
              }
            ]
          },
          {
            "+and": [
              {
                "vcpus": {
                  "+gte": 12
                }
              },
              {
                "vcpus": {
                  "+lte": 20
                }
              }
            ]
          }
        ]
      }'
    ```


    # CLI (Command Line Interface)


    The <a href="https://github.com/linode/linode-cli" target="_top">Linode
    CLI</a> allows you to easily

    work with the API using intuitive and simple syntax. It requires a

    [Personal Access Token](#section/Personal-Access-Token)

    for authentication, and gives you access to all of the features and
    functionality

    of the Linode API that are documented here with CLI examples.


    Endpoints that do not have CLI examples are currently unavailable through
    the CLI, but

    can be accessed via other methods such as Shell commands and other
    third-party applications.


    # APIv3


    View the [Linode APIv3 Documentation](https://linode.com/apiv3).



    Contact Support:
     Name: Linode
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
  - url: https://api.linode.com
components:
  securitySchemes:
    oauth2Auth:
      type: http
      scheme: oauth2
tags:
  - name: account
  - name: account > events
  - name: account > events > {event Id}
  - name: account > invoices
  - name: account > invoices > {invoice Id}
  - name: account > oauth-clients
  - name: account > oauth-clients > {client Id}
  - name: account > oauth-clients > {client Id} > thumbnail
  - name: account > payments
  - name: account > payments > paypal
  - name: account > settings
  - name: account > users
  - name: account > users > {username}
  - name: account > users > {username} > grants
  - name: domains
  - name: domains > {domain Id}
  - name: domains > {domain Id} > records
  - name: domains > {domain Id} > records > {record Id}
  - name: images
  - name: images > {image Id}
  - name: linode
  - name: linode > instances
  - name: linode > instances > {linode Id}
  - name: linode > instances > {linode Id} > backups
  - name: linode > instances > {linode Id} > backups > {backup Id}
  - name: linode > instances > {linode Id} > configs
  - name: linode > instances > {linode Id} > configs > {config Id}
  - name: linode > instances > {linode Id} > disks
  - name: linode > instances > {linode Id} > disks > {disk Id}
  - name: linode > instances > {linode Id} > ips
  - name: linode > instances > {linode Id} > ips > {address}
  - name: linode > instances > {linode Id} > stats
  - name: linode > kernels
  - name: linode > stackscripts
  - name: linode > stackscripts > {stackscript Id}
  - name: linode > types
  - name: longview
  - name: longview > clients
  - name: longview > clients > {client Id}
  - name: longview > subscriptions
  - name: managed
  - name: managed > contacts
  - name: managed > contacts > {contact Id}
  - name: managed > credentials
  - name: managed > credentials > {credential Id}
  - name: managed > issues
  - name: managed > linode-settings
  - name: managed > linode-settings > {linode Id}
  - name: managed > services
  - name: managed > services > {service Id}
  - name: networking
  - name: networking > ips
  - name: networking > ips > {address}
  - name: networking > ipv4
  - name: networking > ipv6
  - name: nodebalancers
  - name: nodebalancers > {node Balancer Id}
  - name: nodebalancers > {node Balancer Id} > configs
  - name: nodebalancers > {node Balancer Id} > configs > {config Id}
  - name: nodebalancers > {node Balancer Id} > configs > {config Id} > nodes
  - name: >-
      nodebalancers > {node Balancer Id} > configs > {config Id} > nodes > {node
      Id}
  - name: object-storage
  - name: object-storage > buckets
  - name: object-storage > buckets > {cluster Id}/{bucket}
  - name: object-storage > clusters
  - name: object-storage > keys
  - name: object-storage > keys > {key Id}
  - name: profile
  - name: profile > apps
  - name: profile > apps > {app Id}
  - name: profile > devices
  - name: profile > devices > {device Id}
  - name: profile > preferences
  - name: profile > sshkeys
  - name: profile > sshkeys > {ssh Key Id}
  - name: profile > tokens
  - name: profile > tokens > {token Id}
  - name: regions
  - name: support/tickets
  - name: support/tickets > {ticket Id}
  - name: support/tickets > {ticket Id} > replies
  - name: tags
  - name: tags > {label}
  - name: volumes
  - name: volumes > {volume Id}
paths:
  /account/events/{eventId}:
    get:
      tags:
        - account > events > {event Id}
      summary: View Event
      description: Returns a single Event object.
      security:
        - oauth2Auth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Event.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                action: ticket_create
                created: '1958-07-26T02:59:23.464Z'
                entity:
                  id: 11111
                  label: Problem booting my Linode
                  type: ticket
                  url: /v4/support/tickets/11111
                id: 123
                percent_complete: 14706154
                rate: esse minim dolore ut
                read: true
                secondary_entity:
                  id: linode/debian9
                  label: linode1234
                  type: linode
                  url: /v4/linode/instances/1234
                seen: true
                status: finished
                time_remaining: null
                username: exampleUser
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/events/{eventId}/read:
    post:
      tags:
        - account > events > {event Id}
      summary: Mark Event as Read
      description: Marks a single Event as read.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Event to designate as read.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/events/{eventId}/seen:
    post:
      tags:
        - account > events > {event Id}
      summary: Mark Event as Seen
      description: |
        Marks all Events up to and including this Event by ID as seen.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: eventId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Event to designate as seen.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/events:
    get:
      tags:
        - account > events
      summary: List Events
      description: >
        Returns a collection of Event objects representing actions taken on your
        Account. The Events returned depends on your grants.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - action: ticket_create
                    created: '1941-06-21T19:34:12.895Z'
                    entity:
                      id: 11111
                      label: Problem booting my Linode
                      type: ticket
                      url: /v4/support/tickets/11111
                    id: 123
                    percent_complete: -29247483
                    rate: 'elit ea '
                    read: true
                    secondary_entity:
                      id: linode/debian9
                      label: linode1234
                      type: linode
                      url: /v4/linode/instances/1234
                    seen: true
                    status: failed
                    time_remaining: null
                    username: exampleUser
                  - action: ticket_create
                    created: '1952-08-31T02:12:01.632Z'
                    entity:
                      id: 11111
                      label: Problem booting my Linode
                      type: ticket
                      url: /v4/support/tickets/11111
                    id: 123
                    percent_complete: -240511
                    rate: laborum ex ullamco quis
                    read: true
                    secondary_entity:
                      id: linode/debian9
                      label: linode1234
                      type: linode
                      url: /v4/linode/instances/1234
                    seen: true
                    status: notification
                    time_remaining: null
                    username: exampleUser
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/invoices/{invoiceId}:
    get:
      tags:
        - account > invoices > {invoice Id}
      summary: View Invoice
      description: Returns a single Invoice object.
      security:
        - oauth2Auth: []
      parameters:
        - name: invoiceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Invoice.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                date: '1941-04-19T12:47:16.027Z'
                id: 123
                label: Invoice
                subtotal: 120
                tax: 12
                total: 132
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/invoices/{invoiceId}/items:
    get:
      tags:
        - account > invoices > {invoice Id}
      summary: List Invoice Items
      description: Returns a paginated list of Invoice items.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: invoiceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Invoice.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - amount: 20
                    from: '1996-03-22T11:49:51.461Z'
                    label: Linode 123
                    quantity: 2
                    tax: 2
                    to: '2007-09-25T23:16:32.857Z'
                    total: 22
                    type: hourly
                    unitprice: 10
                  - amount: 20
                    from: '1956-12-18T15:43:51.371Z'
                    label: Linode 123
                    quantity: 2
                    tax: 2
                    to: '1985-05-09T22:34:34.542Z'
                    total: 22
                    type: misc
                    unitprice: 10
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/invoices:
    get:
      tags:
        - account > invoices
      summary: List Invoices
      description: |
        Returns a paginated list of Invoices against your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - date: '1998-02-28T20:47:35.828Z'
                    id: 123
                    label: Invoice
                    subtotal: 120
                    tax: 12
                    total: 132
                  - date: '1962-05-02T15:08:52.241Z'
                    id: 123
                    label: Invoice
                    subtotal: 120
                    tax: 12
                    total: 132
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/oauth-clients/{clientId}/thumbnail:
    get:
      tags:
        - account > oauth-clients > {client Id} > thumbnail
      summary: View OAuth Client Thumbnail
      description: >
        Returns the thumbnail for this OAuth Client.  This is a
        publicly-viewable endpoint, and can be accessed without authentication.
      parameters:
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The OAuth Client ID to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: image/png
          content:
            text/plain:
              schema:
                type: string
              example: tempor Lorem commodo proident
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - account > oauth-clients > {client Id} > thumbnail
      summary: Update OAuth Client Thumbnail
      description: >
        Upload a thumbnail for a client you own.  You must upload an image file
        that will be returned when the thumbnail is retrieved.  This image will
        be publicly-viewable.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"\"<binary>\""'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: image/png
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The OAuth Client ID to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/oauth-clients/{clientId}:
    delete:
      tags:
        - account > oauth-clients > {client Id}
      summary: Delete OAuth Client
      description: >
        Deletes an OAuth Client registered with Linode. The Client ID and Client
        secret will no longer be accepted by <a target="_top"
        href="https://login.linode.com">https://login.linode.com</a>, and all
        tokens issued to this client will be invalidated (meaning that if your
        application was using a token, it will no longer work).
      security:
        - oauth2Auth: []
      parameters:
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The OAuth Client ID to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - account > oauth-clients > {client Id}
      summary: View OAuth Client
      description: |
        Returns information about a single OAuth client.
      security:
        - oauth2Auth: []
      parameters:
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The OAuth Client ID to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 2737bf16b39ab5d7b4a1
                label: Test_Client_1
                public: false
                redirect_uri: https://example.org/oauth/callback
                secret: <REDACTED>
                status: active
                thumbnail_url: >-
                  https://api.linode.com/v4/account/clients/2737bf16b39ab5d7b4a1/thumbnail
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - account > oauth-clients > {client Id}
      summary: Update OAuth Client
      description: >
        Update information about an OAuth Client on your Account. This can be
        especially useful to update the `redirect_uri` of your client in the
        event that the callback url changed in your application.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"label\": \"<string>\",\n    \"redirect_uri\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The OAuth Client ID to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 2737bf16b39ab5d7b4a1
                label: Test_Client_1
                public: false
                redirect_uri: https://example.org/oauth/callback
                secret: <REDACTED>
                status: active
                thumbnail_url: >-
                  https://api.linode.com/v4/account/clients/2737bf16b39ab5d7b4a1/thumbnail
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/oauth-clients/{clientId}/reset-secret:
    post:
      tags:
        - account > oauth-clients > {client Id}
      summary: Reset OAuth Client Secret
      description: >
        Resets the OAuth Client secret for a client you own, and returns the
        OAuth Client with the plaintext secret. This secret is not supposed to
        be publicly known or disclosed anywhere. This can be used to generate a
        new secret in case the one you have has been leaked, or to get a new
        secret if you lost the original. The old secret is expired immediately,
        and logins to your client with the old secret will fail.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The OAuth Client ID to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 2737bf16b39ab5d7b4a1
                label: Test_Client_1
                public: false
                redirect_uri: https://example.org/oauth/callback
                secret: <REDACTED>
                status: active
                thumbnail_url: >-
                  https://api.linode.com/v4/account/clients/2737bf16b39ab5d7b4a1/thumbnail
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/oauth-clients:
    get:
      tags:
        - account > oauth-clients
      summary: List OAuth Clients
      description: >
        Returns a paginated list of OAuth Clients registered to your Account. 
        OAuth Clients allow users to log into applications you write or host
        using their Linode Account, and may allow them to grant some level of
        access to their Linodes or other entities to your application.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 2737bf16b39ab5d7b4a1
                    label: Test_Client_1
                    public: false
                    redirect_uri: https://example.org/oauth/callback
                    secret: <REDACTED>
                    status: active
                    thumbnail_url: >-
                      https://api.linode.com/v4/account/clients/2737bf16b39ab5d7b4a1/thumbnail
                  - id: 2737bf16b39ab5d7b4a1
                    label: Test_Client_1
                    public: false
                    redirect_uri: https://example.org/oauth/callback
                    secret: <REDACTED>
                    status: active
                    thumbnail_url: >-
                      https://api.linode.com/v4/account/clients/2737bf16b39ab5d7b4a1/thumbnail
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - account > oauth-clients
      summary: Create OAuth Client
      description: >
        Creates an OAuth Client, which can be used to allow users (using their
        Linode account) to log in to your own application, and optionally grant
        your application some amount of access to their Linodes or other
        entities.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"public\": \"<boolean>\",\n    \"id\": \"ea labore
                veniam\",\n    \"label\": \"culp\",\n    \"redirect_uri\": \"ad
                qu\",\n    \"secret\": \"laborum in do fugiat\",\n   
                \"status\": \"disabled\",\n    \"thumbnail_url\": \"ut
                sint\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 2737bf16b39ab5d7b4a1
                label: Test_Client_1
                public: false
                redirect_uri: https://example.org/oauth/callback
                secret: <REDACTED>
                status: active
                thumbnail_url: >-
                  https://api.linode.com/v4/account/clients/2737bf16b39ab5d7b4a1/thumbnail
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/payments/paypal:
    post:
      tags:
        - account > payments > paypal
      summary: Stage PayPal Payment
      description: >
        This begins the process of submitting a Payment via PayPal. After
        calling this endpoint, you must take the resulting `payment_id` along
        with the `payer_id` from your PayPal account and [POST
        /account/payments/paypal-execute](/api/v4/account-payments-paypal-execute/#post)
        to complete the Payment.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"cancel_url\": \"<string>\",\n    \"redirect_url\":
                \"<string>\",\n    \"usd\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                checkout_token: EC-1A2B3C4D5E6F7G8H9
                payment_id: PAY-1234567890ABCDEFGHIJKLMN
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/payments/paypal/execute:
    post:
      tags:
        - account > payments > paypal
      summary: Execute Staged/Approved PayPal Payment
      description: >
        Given a PaymentID and PayerID - as generated by PayPal during the
        transaction authorization process - this endpoint executes the Payment
        to capture the funds and credit your Linode Account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"payer_id\": \"<string>\",\n    \"payment_id\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/payments:
    get:
      tags:
        - account > payments
      summary: List Payments
      description: |
        Returns a paginated list of Payments made on this Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - date: '2020-02-22T16:36:09.961Z'
                    id: 123
                    usd: -87433751
                  - date: '1998-10-08T09:17:07.334Z'
                    id: 123
                    usd: -80519118
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - account > payments
      summary: Make Payment
      description: >
        Makes a Payment to your Account via credit card. This will charge your
        credit card the requested amount.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"usd\": \"<string>\",\n    \"cvv\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                date: '1973-02-10T20:30:18.125Z'
                id: 123
                usd: -42295595
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/payments/{paymentId}:
    get:
      tags:
        - account > payments
      summary: View Payment
      description: |
        Returns information about a specific Payment.
      security:
        - oauth2Auth: []
      parameters:
        - name: paymentId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Payment to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                date: '1973-02-10T20:30:18.125Z'
                id: 123
                usd: -42295595
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/settings:
    get:
      tags:
        - account > settings
      summary: View Account Settings
      description: >
        Returns information related to your Account settings: Managed service
        subscription, Longview subscription, and network helper.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                backups_enabled: true
                longview_subscription: longview-30
                managed: true
                network_helper: false
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - account > settings
      summary: Update Account Settings
      description: |
        Updates your Account settings.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"backups_enabled\": \"<boolean>\",\n   
                \"longview_subscription\": \"<string>\",\n   
                \"network_helper\": \"<boolean>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                backups_enabled: true
                longview_subscription: longview-30
                managed: true
                network_helper: false
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/settings/managed-enable:
    post:
      tags:
        - account > settings
      summary: Enable Linode Managed
      description: >
        Enables Linode Managed for the entire account and sends a welcome email
        to the account's associated email address. Linode Managed can monitor
        any service or software stack reachable over TCP or HTTP. See our
        [Linode Managed guide](https://linode.com/docs/platform/linode-managed/)
        to learn more.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/users/{username}/grants:
    get:
      tags:
        - account > users > {username} > grants
      summary: View User's grants
      description: >
        Returns the full grants structure for this User. This includes all
        entities on the Account alongside what level of access this User has to
        each of them. Individual users may view their own grants at the
        [/profile/grants](/api/v4/profile-grants) endpoint, but will not see
        entities that they have no access to.
      security:
        - oauth2Auth: []
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
          description: (Required) The username to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                domain:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                global:
                  account_access: read_only
                  add_domains: true
                  add_images: true
                  add_linodes: true
                  add_longview: true
                  add_nodebalancers: true
                  add_stackscripts: true
                  add_volumes: true
                  cancel_account: false
                  longview_subscription: true
                image:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                linode:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                longview:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                nodebalancer:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                stackscript:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                volume:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - account > users > {username} > grants
      summary: Update User's grants
      description: >
        Update the grants a User has. This can be used to give a User access to
        new entities or actions, or take access away.  You do not need to
        include the grant for every entity on the Account in this request; any
        that are not included will remain unchanged.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"domain\": [\n        {\n            \"id\":
                21268462,\n            \"label\": \"in magna pariatur
                ut\",\n            \"permissions\": \"read_only\"\n       
                },\n        {\n            \"id\": 8037638,\n           
                \"label\": \"magna eu in irure\",\n            \"permissions\":
                \"null\"\n        }\n    ],\n    \"global\": {\n       
                \"account_access\": \"<string>\",\n        \"add_domains\":
                \"<boolean>\",\n        \"add_images\": \"<boolean>\",\n       
                \"add_linodes\": \"<boolean>\",\n        \"add_longview\":
                \"<boolean>\",\n        \"add_nodebalancers\":
                \"<boolean>\",\n        \"add_stackscripts\":
                \"<boolean>\",\n        \"add_volumes\": \"<boolean>\",\n       
                \"cancel_account\": \"<boolean>\",\n       
                \"longview_subscription\": \"<boolean>\"\n    },\n    \"image\":
                [\n        {\n            \"id\": -18383072,\n           
                \"label\": \"tempor ut do\",\n            \"permissions\":
                \"null\"\n        },\n        {\n            \"id\":
                33709503,\n            \"label\": \"minim sint sit
                in\",\n            \"permissions\": \"read_only\"\n       
                }\n    ],\n    \"linode\": [\n        {\n            \"id\":
                -82178516,\n            \"label\": \"consectetur
                q\",\n            \"permissions\": \"read_only\"\n       
                },\n        {\n            \"id\": 32912547,\n           
                \"label\": \"culpa enim cupidatat officia\",\n           
                \"permissions\": \"read_write\"\n        }\n    ],\n   
                \"longview\": [\n        {\n            \"id\":
                4717156,\n            \"label\": \"cupidatat ipsum minim
                Duis\",\n            \"permissions\": \"read_write\"\n       
                },\n        {\n            \"id\": -20446328,\n           
                \"label\": \"voluptate\",\n            \"permissions\":
                \"read_only\"\n        }\n    ],\n    \"nodebalancer\":
                [\n        {\n            \"id\": -52196336,\n           
                \"label\": \"proident sed\",\n            \"permissions\":
                \"read_only\"\n        },\n        {\n            \"id\":
                775670,\n            \"label\": \"aute\",\n           
                \"permissions\": \"read_write\"\n        }\n    ],\n   
                \"stackscript\": [\n        {\n            \"id\":
                59635464,\n            \"label\": \"fugiat id\",\n           
                \"permissions\": \"read_write\"\n        },\n       
                {\n            \"id\": -53173919,\n            \"label\": \"in
                proident\",\n            \"permissions\":
                \"read_write\"\n        }\n    ],\n    \"volume\": [\n       
                {\n            \"id\": -17529579,\n            \"label\":
                \"eiusmod dolor laborum pariatur\",\n           
                \"permissions\": \"null\"\n        },\n        {\n           
                \"id\": 51609467,\n            \"label\": \"sit
                fugiat\",\n            \"permissions\": \"null\"\n        }\n   
                ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: username
          in: path
          schema:
            type: string
          required: true
          description: (Required) The username to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                domain:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                global:
                  account_access: read_only
                  add_domains: true
                  add_images: true
                  add_linodes: true
                  add_longview: true
                  add_nodebalancers: true
                  add_stackscripts: true
                  add_volumes: true
                  cancel_account: false
                  longview_subscription: true
                image:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                linode:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                longview:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                nodebalancer:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                stackscript:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                volume:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/users/{username}:
    delete:
      tags:
        - account > users > {username}
      summary: Delete User
      description: >
        Deletes a User. The deleted User will be immediately logged out and may
        no longer log in or perform any actions. All of the User's Grants will
        be removed.
      security:
        - oauth2Auth: []
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
          description: (Required) The username to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - account > users > {username}
      summary: View User
      description: |
        Returns information about a single User on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
          description: (Required) The username to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                email: example_user@linode.com
                restricted: true
                ssh_keys:
                  - home-pc
                  - laptop
                username: example_user
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - account > users > {username}
      summary: Update User
      description: >
        Update information about a User on your Account. This can be used to
        change the restricted status of a User. When making a User restricted,
        no grants will be configured by default and you must then set up grants
        in order for the User to access anything on the Account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"restricted\": \"<boolean>\",\n    \"ssh_keys\":
                [\n        \"<string>\",\n        \"<string>\"\n    ],\n   
                \"username\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: username
          in: path
          schema:
            type: string
          required: true
          description: (Required) The username to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                email: example_user@linode.com
                restricted: true
                ssh_keys:
                  - home-pc
                  - laptop
                username: example_user
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/users:
    get:
      tags:
        - account > users
      summary: List Users
      description: >
        Returns a paginated list of Users on your Account. Users may access all
        or part of your Account based on their restricted status and grants.  An
        unrestricted User may access everything on the account, whereas
        restricted User may only access entities or perform actions they've been
        given specific grants to.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - email: example_user@linode.com
                    restricted: true
                    ssh_keys:
                      - home-pc
                      - laptop
                    username: example_user
                  - email: example_user@linode.com
                    restricted: true
                    ssh_keys:
                      - home-pc
                      - laptop
                    username: example_user
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - account > users
      summary: Create User
      description: >
        Creates a User on your Account. Once created, the User will be able to
        log in and access portions of your Account. Access is determined by
        whether or not they are restricted, and what grants they have been
        given.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"username\": \"<string>\",\n    \"email\":
                \"<email>\",\n    \"restricted\": \"<boolean>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                email: example_user@linode.com
                restricted: true
                ssh_keys:
                  - home-pc
                  - laptop
                username: example_user
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account:
    get:
      tags:
        - account
      summary: View Account
      description: |
        Returns the contact and billing information related to your Account.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                active_promotions:
                  - credit_monthly_cap: '10.00'
                    credit_remaining: '50.00'
                    description: >-
                      Receive up to $10 off your services every month for 6
                      months! Unused credits will expire once this promotion
                      period ends.
                    expire_dt: '2018-01-31T23:59:59'
                    image_url: https://linode.com/10_a_month_promotion.svg
                    summary: $10 off your Linode a month!
                    this_month_credit_remaining: '10.00'
                  - credit_monthly_cap: '10.00'
                    credit_remaining: '50.00'
                    description: >-
                      Receive up to $10 off your services every month for 6
                      months! Unused credits will expire once this promotion
                      period ends.
                    expire_dt: '2018-01-31T23:59:59'
                    image_url: https://linode.com/10_a_month_promotion.svg
                    summary: $10 off your Linode a month!
                    this_month_credit_remaining: '10.00'
                active_since: '1965-04-14T12:38:47.523Z'
                address_1: 123 Main Street
                address_2: Suite A
                balance: 200
                balance_uninvoiced: 145
                capabilities:
                  - Ut proide
                  - sint aliquip proident Duis
                city: Philadelphia
                company: Linode LLC
                country: US
                credit_card:
                  expiry: 11/2022
                  last_four: anim deserunt aliquip tempor
                email: john.smith@linode.com
                first_name: John
                last_name: Smith
                phone: 215-555-1212
                state: Pennsylvania
                tax_id: ATU99999999
                zip: ad u
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - account
      summary: Update Account
      description: |
        Updates contact and billing information related to your Account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"active_promotions\": [\n        {\n           
                \"credit_monthly_cap\": \"<string>\",\n           
                \"credit_remaining\": \"<string>\",\n           
                \"description\": \"<string>\",\n            \"expire_dt\":
                \"<string>\",\n            \"image_url\":
                \"<string>\",\n            \"summary\":
                \"<string>\",\n            \"this_month_credit_remaining\":
                \"<string>\"\n        },\n        {\n           
                \"credit_monthly_cap\": \"<string>\",\n           
                \"credit_remaining\": \"<string>\",\n           
                \"description\": \"<string>\",\n            \"expire_dt\":
                \"<string>\",\n            \"image_url\":
                \"<string>\",\n            \"summary\":
                \"<string>\",\n            \"this_month_credit_remaining\":
                \"<string>\"\n        }\n    ],\n    \"address_1\":
                \"<string>\",\n    \"address_2\": \"<string>\",\n    \"city\":
                \"<string>\",\n    \"company\": \"<string>\",\n    \"country\":
                \"<string>\",\n    \"email\": \"<string>\",\n    \"first_name\":
                \"<string>\",\n    \"last_name\": \"<string>\",\n    \"phone\":
                \"<string>\",\n    \"state\": \"<string>\",\n    \"tax_id\":
                \"<string>\",\n    \"zip\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                active_promotions:
                  - credit_monthly_cap: '10.00'
                    credit_remaining: '50.00'
                    description: >-
                      Receive up to $10 off your services every month for 6
                      months! Unused credits will expire once this promotion
                      period ends.
                    expire_dt: '2018-01-31T23:59:59'
                    image_url: https://linode.com/10_a_month_promotion.svg
                    summary: $10 off your Linode a month!
                    this_month_credit_remaining: '10.00'
                  - credit_monthly_cap: '10.00'
                    credit_remaining: '50.00'
                    description: >-
                      Receive up to $10 off your services every month for 6
                      months! Unused credits will expire once this promotion
                      period ends.
                    expire_dt: '2018-01-31T23:59:59'
                    image_url: https://linode.com/10_a_month_promotion.svg
                    summary: $10 off your Linode a month!
                    this_month_credit_remaining: '10.00'
                active_since: '1996-03-28T19:30:55.592Z'
                address_1: 123 Main Street
                address_2: Suite A
                balance: 200
                balance_uninvoiced: 145
                capabilities:
                  - et adipisicing velit aute occaecat
                  - minim exercitation esse in
                city: Philadelphia
                company: Linode LLC
                country: US
                credit_card:
                  expiry: 11/2022
                  last_four: fugiat cupidatat
                email: john.smith@linode.com
                first_name: John
                last_name: Smith
                phone: 215-555-1212
                state: Pennsylvania
                tax_id: ATU99999999
                zip: <string>
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/cancel:
    post:
      tags:
        - account
      summary: Cancel Account
      description: >
        Cancels an active Linode account. This action will cause Linode to
        attempt to charge the credit card on file for the remaining balance. An
        error will occur if Linode fails to charge the credit card on file.
        Restricted users will not be able to cancel an account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"comments\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                survey_link: https://alinktothesurvey.com
        '409':
          description: Conflict
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - reason: >
                      We were unable to charge your credit card for services
                      rendered. We cannot cancel this account until the balance
                      has been paid.
                  - reason: >
                      We were unable to charge your credit card for services
                      rendered. We cannot cancel this account until the balance
                      has been paid.
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/credit-card:
    post:
      tags:
        - account
      summary: Add/Edit Credit Card
      description: >
        Adds/edit credit card information to your Account.

        Only one credit card can be associated with your Account, so using this
        endpoint will overwrite your currently active card information with the
        new credit card.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"card_number\": \"<PAN>\",\n    \"expiry_month\":
                \"<integer>\",\n    \"expiry_year\": \"<integer>\",\n   
                \"cvv\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/notifications:
    get:
      tags:
        - account
      summary: List Notifications
      description: >
        Returns a collection of Notification objects representing important,
        often time-sensitive items related to your Account.

        You cannot interact directly with Notifications, and a Notification will
        disappear when the circumstances causing it have been resolved. For
        example, if you have an important Ticket open, you must respond to the
        Ticket to dismiss the Notification.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - body: null
                    entity:
                      id: 3456
                      label: Linode not booting.
                      type: ticket
                      url: /support/tickets/3456
                    label: You have an important ticket open!
                    message: You have an important ticket open!
                    severity: major
                    type: ticket_important
                    until: '1951-10-05T11:48:12.924Z'
                    when: '2016-11-08T09:32:46.794Z'
                  - body: null
                    entity:
                      id: 3456
                      label: Linode not booting.
                      type: ticket
                      url: /support/tickets/3456
                    label: You have an important ticket open!
                    message: You have an important ticket open!
                    severity: major
                    type: ticket_important
                    until: '1963-01-06T23:29:27.801Z'
                    when: '1998-09-05T06:27:30.463Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /account/transfer:
    get:
      tags:
        - account
      summary: View Network Utilization
      description: >
        Returns a Transfer object showing your network utilization, in GB, for
        the current month.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                billable: 0
                quota: 9141
                used: 2
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /domains/{domainId}/records/{recordId}:
    delete:
      tags:
        - domains > {domain Id} > records > {record Id}
      summary: Delete Domain Record
      description: |
        Deletes a Record on this Domain.
      security:
        - oauth2Auth: []
      parameters:
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Domain whose Record you are accessing.
          example: <integer>
        - name: recordId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Record you are accessing.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - domains > {domain Id} > records > {record Id}
      summary: View Domain Record
      description: |
        View a single Record on this Domain.
      security:
        - oauth2Auth: []
      parameters:
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Domain whose Record you are accessing.
          example: <integer>
        - name: recordId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Record you are accessing.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 123456
                name: test
                port: 80
                priority: 50
                protocol: null
                service: null
                tag: null
                target: 12.34.56.78
                ttl_sec: 604800
                type: A
                weight: 50
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - domains > {domain Id} > records > {record Id}
      summary: Update Domain Record
      description: |
        Updates a single Record on this Domain.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"name\": \"<string>\",\n    \"port\":
                \"<integer>\",\n    \"priority\": \"<integer>\",\n   
                \"protocol\": \"<string>\",\n    \"service\": \"<string>\",\n   
                \"tag\": \"<string>\",\n    \"target\": \"<string>\",\n   
                \"ttl_sec\": \"<integer>\",\n    \"type\": \"<string>\",\n   
                \"weight\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Domain whose Record you are accessing.
          example: <integer>
        - name: recordId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Record you are accessing.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 123456
                name: test
                port: 80
                priority: 50
                protocol: null
                service: null
                tag: null
                target: 12.34.56.78
                ttl_sec: 604800
                type: A
                weight: 50
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /domains/{domainId}/records:
    get:
      tags:
        - domains > {domain Id} > records
      summary: List Domain Records
      description: |
        Returns a paginated list of Records configured on a Domain in Linode's
        DNS Manager.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Domain we are accessing Records for.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 123456
                    name: test
                    port: 80
                    priority: 50
                    protocol: null
                    service: null
                    tag: null
                    target: 12.34.56.78
                    ttl_sec: 604800
                    type: A
                    weight: 50
                  - id: 123456
                    name: test
                    port: 80
                    priority: 50
                    protocol: null
                    service: null
                    tag: null
                    target: 12.34.56.78
                    ttl_sec: 604800
                    type: A
                    weight: 50
                page: 1
                pages: 1
                results: 1
    post:
      tags:
        - domains > {domain Id} > records
      summary: Create Domain Record
      description: |
        Adds a new Domain Record to the zonefile this Domain represents.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"id\": 16877346,\n    \"name\": \"magn\",\n   
                \"port\": 58779435,\n    \"priority\": 175,\n    \"protocol\":
                \"sed cupid\",\n    \"service\": \"pariatur Lorem
                deserun\",\n    \"tag\": \"velit occaecat sint labore\",\n   
                \"target\": \"id magna\",\n    \"ttl_sec\": 62995902,\n   
                \"type\": \"CNAME\",\n    \"weight\": -53340834\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Domain we are accessing Records for.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 123456
                name: test
                port: 80
                priority: 50
                protocol: null
                service: null
                tag: null
                target: 12.34.56.78
                ttl_sec: 604800
                type: A
                weight: 50
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /domains/{domainId}:
    delete:
      tags:
        - domains > {domain Id}
      summary: Delete Domain
      description: >
        Deletes a Domain from Linode's DNS Manager. The Domain will be removed
        from Linode's nameservers shortly after this operation completes. This
        also deletes all associated Domain Records.
      security:
        - oauth2Auth: []
      parameters:
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Domain to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - domains > {domain Id}
      summary: View Domain
      description: >
        This is a single Domain that you have registered in Linode's DNS
        Manager. Linode is not a registrar, and in order for this Domain record
        to work you must own the domain and point your registrar at Linode's
        nameservers.
      security:
        - oauth2Auth: []
      parameters:
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Domain to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1234
                domain: example.org
                type: master
                axfr_ips:
                  - <string>
                  - <string>
                description: <string>
                expire_sec: 300
                group: <string>
                master_ips:
                  - <string>
                  - <string>
                refresh_sec: 300
                retry_sec: 300
                soa_email: admin@example.org
                status: active
                tags:
                  - example tag
                  - another example
                ttl_sec: 300
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - domains > {domain Id}
      summary: Update Domain
      description: |
        Update information about a Domain in Linode's DNS Manager.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"domain\": \"<string>\",\n    \"type\":
                \"<string>\",\n    \"axfr_ips\": [\n       
                \"<string>\",\n        \"<string>\"\n    ],\n   
                \"description\": \"<string>\",\n    \"expire_sec\":
                \"<integer>\",\n    \"group\": \"<string>\",\n   
                \"master_ips\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"refresh_sec\": \"<integer>\",\n   
                \"retry_sec\": \"<integer>\",\n    \"soa_email\":
                \"<email>\",\n    \"status\": \"<string>\",\n    \"tags\":
                [\n        \"<string>\",\n        \"<string>\"\n    ],\n   
                \"ttl_sec\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Domain to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1234
                domain: example.org
                type: master
                axfr_ips:
                  - <string>
                  - <string>
                description: <string>
                expire_sec: 300
                group: <string>
                master_ips:
                  - <string>
                  - <string>
                refresh_sec: 300
                retry_sec: 300
                soa_email: admin@example.org
                status: active
                tags:
                  - example tag
                  - another example
                ttl_sec: 300
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /domains/{domainId}/clone:
    post:
      tags:
        - domains > {domain Id}
      summary: Clone Domain
      description: >
        Clones a Domain and all associated DNS records from a Domain that is
        registered in Linode's DNS manager.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"domain\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: domainId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Domain to clone.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1234
                domain: example.org
                type: master
                axfr_ips:
                  - <string>
                  - <string>
                description: <string>
                expire_sec: 300
                group: <string>
                master_ips:
                  - <string>
                  - <string>
                refresh_sec: 300
                retry_sec: 300
                soa_email: admin@example.org
                status: active
                tags:
                  - example tag
                  - another example
                ttl_sec: 300
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /domains:
    get:
      tags:
        - domains
      summary: List Domains
      description: >
        This is a collection of Domains that you have registered in Linode's DNS
        Manager.  Linode is not a registrar, and in order for these to work you
        must own the domains and point your registrar at Linode's nameservers.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 1234
                    domain: example.org
                    type: master
                    description: in i
                    expire_sec: 300
                    group: aliq
                    refresh_sec: 300
                    retry_sec: 300
                    soa_email: admin@example.org
                    status: active
                    tags:
                      - example tag
                      - another example
                    ttl_sec: 300
                  - id: 1234
                    domain: example.org
                    type: master
                    description: et s
                    expire_sec: 300
                    group: ut p
                    refresh_sec: 300
                    retry_sec: 300
                    soa_email: admin@example.org
                    status: active
                    tags:
                      - example tag
                      - another example
                    ttl_sec: 300
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - domains
      summary: Create Domain
      description: >
        Adds a new Domain to Linode's DNS Manager. Linode is not a registrar,
        and you must own the domain before adding it here. Be sure to point your
        registrar to Linode's nameservers so that the records hosted here are
        used.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"domain\": \"<string>\",\n    \"type\":
                \"<string>\",\n    \"axfr_ips\": [\n       
                \"<string>\",\n        \"<string>\"\n    ],\n   
                \"description\": \"<string>\",\n    \"expire_sec\":
                \"<integer>\",\n    \"group\": \"<string>\",\n   
                \"master_ips\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"refresh_sec\": \"<integer>\",\n   
                \"retry_sec\": \"<integer>\",\n    \"soa_email\":
                \"<email>\",\n    \"status\": \"<string>\",\n    \"tags\":
                [\n        \"<string>\",\n        \"<string>\"\n    ],\n   
                \"ttl_sec\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1234
                domain: example.org
                type: master
                axfr_ips:
                  - <string>
                  - <string>
                description: <string>
                expire_sec: 300
                group: <string>
                master_ips:
                  - <string>
                  - <string>
                refresh_sec: 300
                retry_sec: 300
                soa_email: admin@example.org
                status: active
                tags:
                  - example tag
                  - another example
                ttl_sec: 300
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /domains/import:
    post:
      tags:
        - domains
      summary: Import Domain
      description: |
        Imports a domain zone from a remote nameserver.
        Your nameserver must allow zone transfers (AXFR) from the following IPs:
          - 96.126.114.97
          - 96.126.114.98
          - 2600:3c00::5e
          - 2600:3c00::5f
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"domain\": \"<string>\",\n    \"remote_nameserver\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1234
                domain: example.org
                type: master
                axfr_ips:
                  - <string>
                  - <string>
                description: <string>
                expire_sec: 300
                group: <string>
                master_ips:
                  - <string>
                  - <string>
                refresh_sec: 300
                retry_sec: 300
                soa_email: admin@example.org
                status: active
                tags:
                  - example tag
                  - another example
                ttl_sec: 300
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /images/{imageId}:
    delete:
      tags:
        - images > {image Id}
      summary: Delete Image
      description: |
        Deletes a private Image you have permission to `read_write`.


        **Deleting an Image is a destructive action and cannot be undone.**
      security:
        - oauth2Auth: []
      parameters:
        - name: imageId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Image to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - images > {image Id}
      summary: View Image
      description: |
        Get information about a single Image.
      parameters:
        - name: imageId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Image to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '2017-07-16T16:08:13.522Z'
                created_by: somename
                deprecated: false
                description: The detailed description of my Image.
                expiry: '1984-04-18T22:37:11.663Z'
                id: private/67848373
                is_public: false
                label: My gold-master image
                size: 2500
                type: manual
                vendor: null
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - images > {image Id}
      summary: Update Image
      description: |
        Updates a private Image that you have permission to `read_write`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"description\": \"<string>\",\n    \"label\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: imageId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Image to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '2017-07-16T16:08:13.522Z'
                created_by: somename
                deprecated: false
                description: The detailed description of my Image.
                expiry: '1984-04-18T22:37:11.663Z'
                id: private/67848373
                is_public: false
                label: My gold-master image
                size: 2500
                type: manual
                vendor: null
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /images:
    get:
      tags:
        - images
      summary: List Images
      description: >
        Returns a paginated list of Images.


        * Calling this endpoint without authentication returns all public
        Images.

        * Authentication is required to return a combined paginated list of all
        public and
          your private Images.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '1950-03-03T11:16:16.307Z'
                    created_by: linode
                    deprecated: false
                    description: pariatur veniam ad
                    expiry: '1980-08-25T19:09:04.882Z'
                    id: linode/ubuntu17.10
                    is_public: true
                    label: Ubuntu 17.10
                    size: 2500
                    type: manual
                    vendor: Ubuntu
                  - created: '1974-04-14T17:40:13.071Z'
                    created_by: linode
                    deprecated: false
                    description: in ex
                    expiry: '2016-02-13T08:35:26.491Z'
                    id: linode/ubuntu17.10
                    is_public: true
                    label: Ubuntu 17.10
                    size: 2500
                    type: manual
                    vendor: Ubuntu
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - images
      summary: Create Image
      description: >
        Creates a private gold-master Image from a Linode Disk. There is no
        additional charge to store Images for Linode users.

        Images are limited to three per Account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"description\": \"<string>\",\n    \"label\":
                \"<string>\",\n    \"disk_id\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '2017-07-16T16:08:13.522Z'
                created_by: somename
                deprecated: false
                description: The detailed description of my Image.
                expiry: '1984-04-18T22:37:11.663Z'
                id: private/67848373
                is_public: false
                label: My gold-master image
                size: 2500
                type: manual
                vendor: null
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/backups/{backupId}:
    get:
      tags:
        - linode > instances > {linode Id} > backups > {backup Id}
      summary: View Backup
      description: |
        Returns information about a Backup.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode the Backup belongs to.
          example: <integer>
        - name: backupId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Backup to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                configs:
                  - My Debian 9 Config
                  - My Debian 9 Config
                created: '1966-07-21T13:32:45.180Z'
                disks:
                  - filesystem: ext4
                    label: My Debian 9 Disk
                    size: 9001
                  - filesystem: ext4
                    label: My Debian 9 Disk
                    size: 9001
                finished: '2001-01-21T16:36:42.613Z'
                id: 123456
                label: Webserver-Backup-2018
                status: successful
                type: snapshot
                updated: '2018-12-01T15:59:21.068Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/backups/{backupId}/restore:
    post:
      tags:
        - linode > instances > {linode Id} > backups > {backup Id}
      summary: Restore Backup
      description: |
        Restores a Linode's Backup to the specified Linode.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"linode_id\": \"<integer>\",\n    \"overwrite\":
                \"<boolean>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode that the Backup belongs to.
          example: <integer>
        - name: backupId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Backup to restore.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/backups:
    get:
      tags:
        - linode > instances > {linode Id} > backups
      summary: List Backups
      description: |
        Returns information about this Linode's available backups.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode the backups belong to.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                automatic:
                  - configs:
                      - My Debian 9 Config
                      - My Debian 9 Config
                    created: '1990-11-11T23:10:34.886Z'
                    disks:
                      - filesystem: ext4
                        label: My Debian 9 Disk
                        size: 9001
                      - filesystem: ext4
                        label: My Debian 9 Disk
                        size: 9001
                    finished: '1962-11-13T11:51:56.083Z'
                    id: 123456
                    label: Webserver-Backup-2018
                    status: successful
                    type: snapshot
                    updated: '1964-10-16T06:19:06.144Z'
                  - configs:
                      - My Debian 9 Config
                      - My Debian 9 Config
                    created: '1963-03-13T22:24:21.773Z'
                    disks:
                      - filesystem: ext4
                        label: My Debian 9 Disk
                        size: 9001
                      - filesystem: ext4
                        label: My Debian 9 Disk
                        size: 9001
                    finished: '1947-02-23T02:46:06.254Z'
                    id: 123456
                    label: Webserver-Backup-2018
                    status: successful
                    type: snapshot
                    updated: '2001-03-20T02:29:19.035Z'
                snapshot:
                  current:
                    configs:
                      - My Debian 9 Config
                      - My Debian 9 Config
                    created: '2001-12-12T05:58:29.331Z'
                    disks:
                      - filesystem: ext4
                        label: My Debian 9 Disk
                        size: 9001
                      - filesystem: ext4
                        label: My Debian 9 Disk
                        size: 9001
                    finished: '1962-07-27T03:24:57.813Z'
                    id: 123456
                    label: Webserver-Backup-2018
                    status: successful
                    type: snapshot
                    updated: '2003-08-23T00:35:14.707Z'
                  in_progress:
                    configs:
                      - My Debian 9 Config
                      - My Debian 9 Config
                    created: '2006-12-29T00:18:24.065Z'
                    disks:
                      - filesystem: ext4
                        label: My Debian 9 Disk
                        size: 9001
                      - filesystem: ext4
                        label: My Debian 9 Disk
                        size: 9001
                    finished: '1965-04-04T16:38:32.065Z'
                    id: 123456
                    label: Webserver-Backup-2018
                    status: successful
                    type: snapshot
                    updated: '2012-05-31T19:16:32.583Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - linode > instances > {linode Id} > backups
      summary: Create Snapshot
      description: >
        Creates a snapshot Backup of a Linode.

        ** If you already have a snapshot of this Linode, this is a destructive
        action. The previous snapshot will be deleted.**
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode the backups belong to.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                configs:
                  - My Debian 9 Config
                  - My Debian 9 Config
                created: '1966-07-21T13:32:45.180Z'
                disks:
                  - filesystem: ext4
                    label: My Debian 9 Disk
                    size: 9001
                  - filesystem: ext4
                    label: My Debian 9 Disk
                    size: 9001
                finished: '2001-01-21T16:36:42.613Z'
                id: 123456
                label: Webserver-Backup-2018
                status: successful
                type: snapshot
                updated: '2018-12-01T15:59:21.068Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/backups/cancel:
    post:
      tags:
        - linode > instances > {linode Id} > backups
      summary: Cancel Backups
      description: >
        Cancels the Backup service on the given Linode. Deletes all of this
        Linode's existing backups forever.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode to cancel backup service for.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/backups/enable:
    post:
      tags:
        - linode > instances > {linode Id} > backups
      summary: Enable Backups
      description: |
        Enables backups for the specified Linode.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode to enable backup service for.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/configs/{configId}:
    delete:
      tags:
        - linode > instances > {linode Id} > configs > {config Id}
      summary: Delete Configuration Profile
      description: |
        Deletes the specified Configuration profile from the specified Linode.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The ID of the Linode whose Configuration profile to look
            up.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Configuration profile to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - linode > instances > {linode Id} > configs > {config Id}
      summary: View Configuration Profile
      description: |
        Returns information about a specific Configuration profile.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The ID of the Linode whose Configuration profile to look
            up.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Configuration profile to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                label: My Config
                devices:
                  sda:
                    disk_id: 124458
                    volume_id: -67791419
                  sdb:
                    disk_id: 124458
                    volume_id: -90880680
                  sdc:
                    disk_id: 124458
                    volume_id: -52585047
                  sdd:
                    disk_id: 124458
                    volume_id: 65474009
                  sde:
                    disk_id: 124458
                    volume_id: 82843786
                  sdf:
                    disk_id: 124458
                    volume_id: 97117674
                  sdg:
                    disk_id: 124458
                    volume_id: -83009136
                  sdh:
                    disk_id: 124458
                    volume_id: -24833237
                comments: This is my main Config
                helpers:
                  devtmpfs_automount: false
                  distro: true
                  modules_dep: true
                  network: true
                  updatedb_disabled: true
                id: 23456
                kernel: linode/latest-64bit
                memory_limit: 2048
                root_device: <string>
                run_level: default
                virt_mode: paravirt
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - linode > instances > {linode Id} > configs > {config Id}
      summary: Update Configuration Profile
      description: |
        Updates a Configuration profile.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"label\": \"<string>\",\n    \"devices\": {\n       
                \"sda\": {\n            \"disk_id\": -99724541,\n           
                \"volume_id\": 28109478\n        },\n        \"sdb\":
                {\n            \"disk_id\": -83132035,\n           
                \"volume_id\": -16947052\n        },\n        \"sdc\":
                {\n            \"disk_id\": 60741448,\n           
                \"volume_id\": -45703283\n        },\n        \"sdd\":
                {\n            \"disk_id\": 27928218,\n           
                \"volume_id\": -92322382\n        },\n        \"sde\":
                {\n            \"disk_id\": -11298301,\n           
                \"volume_id\": 74101253\n        },\n        \"sdf\":
                {\n            \"disk_id\": -75889825,\n           
                \"volume_id\": -65014404\n        },\n        \"sdg\":
                {\n            \"disk_id\": 31444158,\n           
                \"volume_id\": -35136263\n        },\n        \"sdh\":
                {\n            \"disk_id\": 45877587,\n           
                \"volume_id\": 45131715\n        }\n    },\n    \"comments\":
                \"<string>\",\n    \"helpers\": {\n       
                \"devtmpfs_automount\": \"<boolean>\",\n        \"distro\":
                \"<boolean>\",\n        \"modules_dep\": \"<boolean>\",\n       
                \"network\": \"<boolean>\",\n        \"updatedb_disabled\":
                \"<boolean>\"\n    },\n    \"id\": \"<integer>\",\n   
                \"kernel\": \"<string>\",\n    \"memory_limit\":
                \"<integer>\",\n    \"root_device\": \"<string>\",\n   
                \"run_level\": \"<string>\",\n    \"virt_mode\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: >-
            (Required) The ID of the Linode whose Configuration profile to look
            up.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Configuration profile to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                label: My Config
                devices:
                  sda:
                    disk_id: 124458
                    volume_id: 98639968
                  sdb:
                    disk_id: 124458
                    volume_id: -26385857
                  sdc:
                    disk_id: 124458
                    volume_id: -18287904
                  sdd:
                    disk_id: 124458
                    volume_id: 80083132
                  sde:
                    disk_id: 124458
                    volume_id: 64659583
                  sdf:
                    disk_id: 124458
                    volume_id: -99504770
                  sdg:
                    disk_id: 124458
                    volume_id: -8699851
                  sdh:
                    disk_id: 124458
                    volume_id: 12849414
                comments: This is my main Config
                helpers:
                  devtmpfs_automount: false
                  distro: true
                  modules_dep: true
                  network: true
                  updatedb_disabled: true
                id: 23456
                kernel: linode/latest-64bit
                memory_limit: 2048
                root_device: <string>
                run_level: default
                virt_mode: paravirt
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/configs:
    get:
      tags:
        - linode > instances > {linode Id} > configs
      summary: List Configuration Profiles
      description: |
        Lists Configuration profiles associated with a Linode.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up Configuration profiles for.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - label: My Config
                    devices:
                      sda:
                        disk_id: 124458
                        volume_id: 61726729
                      sdb:
                        disk_id: 124458
                        volume_id: -13166465
                      sdc:
                        disk_id: 124458
                        volume_id: 74829705
                      sdd:
                        disk_id: 124458
                        volume_id: 31188925
                      sde:
                        disk_id: 124458
                        volume_id: -27958245
                      sdf:
                        disk_id: 124458
                        volume_id: -94842798
                      sdg:
                        disk_id: 124458
                        volume_id: 53831422
                      sdh:
                        disk_id: 124458
                        volume_id: 43640863
                    comments: This is my main Config
                    helpers:
                      devtmpfs_automount: false
                      distro: true
                      modules_dep: true
                      network: true
                      updatedb_disabled: true
                    id: 23456
                    kernel: linode/latest-64bit
                    memory_limit: 2048
                    root_device: a-z, A-Z, 0-9, /, _, -
                    run_level: default
                    virt_mode: paravirt
                  - label: My Config
                    devices:
                      sda:
                        disk_id: 124458
                        volume_id: -84157650
                      sdb:
                        disk_id: 124458
                        volume_id: 66223408
                      sdc:
                        disk_id: 124458
                        volume_id: -71937069
                      sdd:
                        disk_id: 124458
                        volume_id: -24151732
                      sde:
                        disk_id: 124458
                        volume_id: -54833730
                      sdf:
                        disk_id: 124458
                        volume_id: 80985334
                      sdg:
                        disk_id: 124458
                        volume_id: 71606669
                      sdh:
                        disk_id: 124458
                        volume_id: 71980265
                    comments: This is my main Config
                    helpers:
                      devtmpfs_automount: false
                      distro: true
                      modules_dep: true
                      network: true
                      updatedb_disabled: true
                    id: 23456
                    kernel: linode/latest-64bit
                    memory_limit: 2048
                    root_device: a-z, A-Z, 0-9, /, _, -
                    run_level: default
                    virt_mode: paravirt
                page: 1
                pages: 1
                results: 1
    post:
      tags:
        - linode > instances > {linode Id} > configs
      summary: Create Configuration Profile
      description: |
        Adds a new Configuration profile to a Linode.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"label\": \"<string>\",\n    \"devices\": {\n       
                \"sda\": {\n            \"disk_id\": -95390876,\n           
                \"volume_id\": -78345265\n        },\n        \"sdb\":
                {\n            \"disk_id\": -72010308,\n           
                \"volume_id\": -32977950\n        },\n        \"sdc\":
                {\n            \"disk_id\": -80364253,\n           
                \"volume_id\": 36198505\n        },\n        \"sdd\":
                {\n            \"disk_id\": 40874581,\n           
                \"volume_id\": 35285997\n        },\n        \"sde\":
                {\n            \"disk_id\": 7791153,\n            \"volume_id\":
                26453482\n        },\n        \"sdf\": {\n           
                \"disk_id\": -96280303,\n            \"volume_id\":
                -41855395\n        },\n        \"sdg\": {\n           
                \"disk_id\": -13312140,\n            \"volume_id\":
                -98491013\n        },\n        \"sdh\": {\n           
                \"disk_id\": -83335628,\n            \"volume_id\":
                -19889570\n        }\n    },\n    \"comments\":
                \"<string>\",\n    \"helpers\": {\n       
                \"devtmpfs_automount\": \"<boolean>\",\n        \"distro\":
                \"<boolean>\",\n        \"modules_dep\": \"<boolean>\",\n       
                \"network\": \"<boolean>\",\n        \"updatedb_disabled\":
                \"<boolean>\"\n    },\n    \"kernel\": \"<string>\",\n   
                \"memory_limit\": \"<integer>\",\n    \"root_device\":
                \"<string>\",\n    \"run_level\": \"<string>\",\n   
                \"virt_mode\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up Configuration profiles for.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                label: My Config
                devices:
                  sda:
                    disk_id: 124458
                    volume_id: -67791419
                  sdb:
                    disk_id: 124458
                    volume_id: -90880680
                  sdc:
                    disk_id: 124458
                    volume_id: -52585047
                  sdd:
                    disk_id: 124458
                    volume_id: 65474009
                  sde:
                    disk_id: 124458
                    volume_id: 82843786
                  sdf:
                    disk_id: 124458
                    volume_id: 97117674
                  sdg:
                    disk_id: 124458
                    volume_id: -83009136
                  sdh:
                    disk_id: 124458
                    volume_id: -24833237
                comments: This is my main Config
                helpers:
                  devtmpfs_automount: false
                  distro: true
                  modules_dep: true
                  network: true
                  updatedb_disabled: true
                id: 23456
                kernel: linode/latest-64bit
                memory_limit: 2048
                root_device: <string>
                run_level: default
                virt_mode: paravirt
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/disks/{diskId}:
    delete:
      tags:
        - linode > instances > {linode Id} > disks > {disk Id}
      summary: Delete Disk
      description: |
        Deletes a Disk you have permission to `read_write`.

        **Deleting a Disk is a destructive action and cannot be undone.**
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
        - name: diskId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Disk to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - linode > instances > {linode Id} > disks > {disk Id}
      summary: View Disk
      description: |
        View Disk information for a Disk associated with this Linode.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
        - name: diskId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Disk to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1948-10-14T21:57:34.378Z'
                filesystem: ext4
                id: 25674
                label: Debian 9 Disk
                size: 48640
                status: ready
                updated: '1991-05-13T22:54:09.119Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - linode > instances > {linode Id} > disks > {disk Id}
      summary: Update Disk
      description: |
        Updates a Disk that you have permission to `read_write`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"filesystem\": \"<string>\",\n    \"label\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
        - name: diskId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Disk to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1982-03-28T09:44:56.645Z'
                filesystem: ext4
                id: 25674
                label: Debian 9 Disk
                size: 48640
                status: ready
                updated: '1975-07-10T06:21:37.429Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/disks/{diskId}/clone:
    post:
      tags:
        - linode > instances > {linode Id} > disks > {disk Id}
      summary: Clone Disk
      description: >
        Copies a disk, byte-for-byte, into a new Disk belonging to the same
        Linode. The Linode must have enough storage space available to accept a
        new Disk of the same size as this one or this operation will fail.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
        - name: diskId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Disk to clone.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1982-03-28T09:44:56.645Z'
                filesystem: ext4
                id: 25674
                label: Debian 9 Disk
                size: 48640
                status: ready
                updated: '1975-07-10T06:21:37.429Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/disks/{diskId}/password:
    post:
      tags:
        - linode > instances > {linode Id} > disks > {disk Id}
      summary: Reset Disk Root Password
      description: |
        Resets the password of a Disk you have permission to `read_write`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"password\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
        - name: diskId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Disk to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/disks/{diskId}/resize:
    post:
      tags:
        - linode > instances > {linode Id} > disks > {disk Id}
      summary: Resize Disk
      description: >
        Resizes a Disk you have permission to `read_write`.

        The Linode this Disk is attached to must be shut down for resizing to
        take effect.

        If you are resizing the Disk to a smaller size, it cannot be made
        smaller than what is required by the total size of the files current on
        the Disk. The Disk must not be in use. If the Disk is in use, the
        request will succeed but the resize will ultimately fail.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"size\": \"<integer>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
        - name: diskId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Disk to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/disks:
    get:
      tags:
        - linode > instances > {linode Id} > disks
      summary: List Disks
      description: |
        View Disk information for Disks associated with this Linode.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '2005-05-23T13:08:38.619Z'
                    filesystem: ext4
                    id: 25674
                    label: Debian 9 Disk
                    size: 48640
                    status: ready
                    updated: '1988-12-15T04:23:24.237Z'
                  - created: '2007-10-28T17:06:43.308Z'
                    filesystem: ext4
                    id: 25674
                    label: Debian 9 Disk
                    size: 48640
                    status: ready
                    updated: '2019-05-30T16:02:46.177Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - linode > instances > {linode Id} > disks
      summary: Create Disk
      description: >
        Adds a new Disk to a Linode. You can optionally create a Disk from an
        Image (see [/images](/api/v4/images) for a list of available public
        images, or use one of your own), and optionally provide a StackScript to
        deploy with this Disk.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"size\": \"<integer>\",\n    \"label\":
                \"<string>\",\n    \"authorized_keys\": [\n       
                \"<string>\",\n        \"<string>\"\n    ],\n   
                \"authorized_users\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"filesystem\": \"raw\",\n   
                \"image\": \"<string>\",\n    \"read_only\": \"<boolean>\",\n   
                \"root_pass\": \"<password>\",\n    \"stackscript_data\":
                \"<object>\",\n    \"stackscript_id\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1948-10-14T21:57:34.378Z'
                filesystem: ext4
                id: 25674
                label: Debian 9 Disk
                size: 48640
                status: ready
                updated: '1991-05-13T22:54:09.119Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/ips/{address}:
    delete:
      tags:
        - linode > instances > {linode Id} > ips > {address}
      summary: Delete IPv4 Address
      description: >
        Deletes a public IPv4 address associated with this Linode. This will
        fail if it is the Linode's last remaining public IPv4 address. Private
        IPv4 addresses cannot be removed via this endpoint.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode to look up.
          example: <integer>
        - name: address
          in: path
          schema:
            type: string
          required: true
          description: (Required) The IP address to look up.
          example: <ip>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - linode > instances > {linode Id} > ips > {address}
      summary: View IP Address
      description: >
        View information about the specified IP address associated with the
        specified Linode.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode to look up.
          example: <integer>
        - name: address
          in: path
          schema:
            type: string
          required: true
          description: (Required) The IP address to look up.
          example: <ip>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 97.107.143.141
                gateway: 97.107.143.1
                linode_id: 123
                prefix: 24
                public: true
                rdns: test.example.org
                region: us-east
                subnet_mask: 255.255.255.0
                type: ipv4
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - linode > instances > {linode Id} > ips > {address}
      summary: Update IP Address
      description: >
        Updates a particular IP Address associated with this Linode. Only allows
        setting/resetting reverse DNS.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"\"<object>\""'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode to look up.
          example: <integer>
        - name: address
          in: path
          schema:
            type: string
          required: true
          description: (Required) The IP address to look up.
          example: <ip>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 97.107.143.141
                gateway: 97.107.143.1
                linode_id: 123
                prefix: 24
                public: true
                rdns: test.example.org
                region: us-east
                subnet_mask: 255.255.255.0
                type: ipv4
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/ips:
    get:
      tags:
        - linode > instances > {linode Id} > ips
      summary: List Networking Information
      description: |
        Returns networking information for a single Linode.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                ipv4:
                  private:
                    - address: 192.168.133.234
                      gateway: do reprehenderit
                      linode_id: 123
                      prefix: 17
                      public: false
                      rdns: nisi non dolore labore
                      region: us-east
                      subnet_mask: 255.255.128.0
                      type: ipv4
                    - address: 192.168.133.234
                      gateway: laboris
                      linode_id: 123
                      prefix: 17
                      public: false
                      rdns: Excepteur veli
                      region: us-east
                      subnet_mask: 255.255.128.0
                      type: ipv4
                  public:
                    - address: 97.107.143.141
                      gateway: 97.107.143.1
                      linode_id: 123
                      prefix: 24
                      public: true
                      rdns: test.example.org
                      region: us-east
                      subnet_mask: 255.255.255.0
                      type: ipv4
                    - address: 97.107.143.141
                      gateway: 97.107.143.1
                      linode_id: 123
                      prefix: 24
                      public: true
                      rdns: test.example.org
                      region: us-east
                      subnet_mask: 255.255.255.0
                      type: ipv4
                  reserved:
                    - address: 97.107.143.141
                      gateway: 97.107.143.1
                      linode_id: 123
                      prefix: 24
                      public: true
                      rdns: test.example.org
                      region: us-east
                      subnet_mask: 255.255.255.0
                      type: ipv4
                    - address: 97.107.143.141
                      gateway: 97.107.143.1
                      linode_id: 123
                      prefix: 24
                      public: true
                      rdns: test.example.org
                      region: us-east
                      subnet_mask: 255.255.255.0
                      type: ipv4
                  shared:
                    - address: 97.107.143.141
                      gateway: 97.107.143.1
                      linode_id: 123
                      prefix: 24
                      public: true
                      rdns: test.example.org
                      region: us-east
                      subnet_mask: 255.255.255.0
                      type: ipv4
                    - address: 97.107.143.141
                      gateway: 97.107.143.1
                      linode_id: 123
                      prefix: 24
                      public: true
                      rdns: test.example.org
                      region: us-east
                      subnet_mask: 255.255.255.0
                      type: ipv4
                ipv6:
                  global:
                    prefix: 124
                    range: '2600:3c01::02:5000::'
                    region: us-east
                  link_local:
                    address: fe80::f03c:91ff:fe24:3a2f
                    gateway: fe80::1
                    linode_id: 123
                    prefix: 64
                    public: false
                    rdns: occaecat
                    region: us-east
                    subnet_mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                    type: ipv6
                  slaac:
                    address: 2600:3c03::f03c:91ff:fe24:3a2f
                    gateway: fe80::1
                    linode_id: 123
                    prefix: 64
                    public: true
                    rdns: aliquip amet commodo occaecat consectetur
                    region: us-east
                    subnet_mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                    type: ipv6
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - linode > instances > {linode Id} > ips
      summary: Allocate IPv4 Address
      description: >
        Allocates a public or private IPv4 address to a Linode. Public IP
        Addresses, after the one included with each Linode, incur an additional
        monthly charge. If you need an additional public IP Address you must
        request one - please [open a support
        ticket](/api/v4/support-tickets/#post). You may not add more than one
        private IPv4 address to a single Linode.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"type\": \"<string>\",\n    \"public\":
                \"<boolean>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 97.107.143.141
                gateway: 97.107.143.1
                linode_id: 123
                prefix: 24
                public: true
                rdns: test.example.org
                region: us-east
                subnet_mask: 255.255.255.0
                type: ipv4
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/stats:
    get:
      tags:
        - linode > instances > {linode Id} > stats
      summary: View Linode Statistics
      description: >
        Returns CPU, IO, IPv4, and IPv6 statistics for your Linode for the past
        24 hours.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cpu:
                  - - -74329145.64656423
                    - -7604439.257195756
                  - - 47742116.56289339
                    - 99280783.08204982
                io:
                  io:
                    - - -36022887.8265461
                      - 29451994.749490008
                    - - -85614855.85016637
                      - 82063792.07808414
                  swap:
                    - - 36520302.71728912
                      - -98972566.37819755
                    - - 68514556.68475151
                      - 5877374.980488926
                netv4:
                  in:
                    - - 4940039.4590117335
                      - 40593916.402789146
                    - - 20657355.84154913
                      - 91028553.8587344
                  out:
                    - - -87458863.07318403
                      - 16919179.836292654
                    - - -89077432.20431224
                      - 36561217.3961499
                  private_in:
                    - - 67522031.19173527
                      - 85127130.50151247
                    - - -15020613.641981527
                      - -10555045.305672899
                  private_out:
                    - - -81341075.74699487
                      - 82454723.55446056
                    - - 27945427.487469792
                      - 96413425.31231406
                netv6:
                  in:
                    - - -55379870.95327721
                      - -58031461.50047152
                    - - 23565199.019047126
                      - -22749066.695275515
                  out:
                    - - 60736601.99778339
                      - 3807542.7451248765
                    - - 70043013.24284875
                      - 9525955.540297076
                  private_in:
                    - - 54886622.73691952
                      - -57310642.05154044
                    - - 29465002.753343314
                      - -1821546.1866955012
                  private_out:
                    - - 12187232.605984464
                      - -16953509.22734496
                    - - -69084324.85295507
                      - 23748325.319529057
                title: linode.com - my-linode (linode123456) - day (5 min avg)
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/stats/{year}/{month}:
    get:
      tags:
        - linode > instances > {linode Id} > stats
      summary: View Statistics (year/month)
      description: >
        Returns statistics for a specific month. The year/month values must be
        either a date in the past, or the current month. If the current month,
        statistics will be retrieved for the past 30 days.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
        - name: year
          in: path
          schema:
            type: string
          required: true
          description: (Required) Numeric value representing the year to look up.
          example: <integer>
        - name: month
          in: path
          schema:
            type: string
          required: true
          description: (Required) Numeric value representing the month to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cpu:
                  - - -62170203.95763209
                    - 89046436.68355593
                  - - 19090690.9477389
                    - -50634272.25000004
                io:
                  io:
                    - - -26271233.714886665
                      - 2011195.4043636024
                    - - 53590621.10810223
                      - 9299866.943688512
                  swap:
                    - - 88453570.94855765
                      - 16717068.447226062
                    - - -15833196.676511914
                      - 57368873.01161224
                netv4:
                  in:
                    - - -57920732.25558512
                      - 58678792.17912838
                    - - 75421864.60816184
                      - 57918232.843773335
                  out:
                    - - -61973178.18845356
                      - -69495186.75998951
                    - - -47824690.14338804
                      - -19768163.628389418
                  private_in:
                    - - 25886113.34987721
                      - -89660442.33801855
                    - - 23282196.60863051
                      - -80264038.86050853
                  private_out:
                    - - 67362902.63272887
                      - -62752663.37272165
                    - - 53470153.75498742
                      - 71933575.89084357
                netv6:
                  in:
                    - - -6445508.592126489
                      - -77806374.38786848
                    - - 64655012.79477045
                      - 17267380.2716548
                  out:
                    - - -19856680.57107936
                      - 27224124.48545599
                    - - -47411129.63385126
                      - -97513357.63995117
                  private_in:
                    - - 67022847.648926616
                      - -39765327.4068789
                    - - 28554269.706572294
                      - 96976482.39474446
                  private_out:
                    - - 14185264.990486339
                      - 88554025.1433996
                    - - 98622761.863325
                      - -49798778.0258879
                title: linode.com - my-linode (linode123456) - day (5 min avg)
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}:
    delete:
      tags:
        - linode > instances > {linode Id}
      summary: Delete Linode
      description: |
        Deletes a Linode you have permission to `read_write`.

        **Deleting a Linode is a destructive action and cannot be undone.**

        Additionally, deleting a Linode:

          * Gives up any IP addresses the Linode was assigned.
          * Deletes all Disks, Backups, Configs, etc.
          * Stops billing for the Linode and its associated services. You will be billed for time used
            within the billing period the Linode was active.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - linode > instances > {linode Id}
      summary: View Linode
      description: Get a specific Linode by ID.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                group: Linode-Group
                label: kJ3o
                region: us-east
                type: g6-standard-2
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - linode > instances > {linode Id}
      summary: Update Linode
      description: >
        Updates a Linode that you have permission to `read_write`.


        **Important**: You must be an unrestricted User in order to add or
        modify tags on Linodes.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"group\": \"proident Ut Duis\",\n    \"label\":
                \"hAMs\",\n    \"region\": \"reprehenderit\",\n    \"type\":
                \"voluptate aute ut in\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                group: Linode-Group
                label: kJ3o
                region: us-east
                type: g6-standard-2
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/boot:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Boot Linode
      description: >
        Boots a Linode you have permission to modify. If no parameters are
        given, a Config profile

        will be chosen for this boot based on the following criteria:


        * If there is only one Config profile for this Linode, it will be used.

        * If there is more than one Config profile, the last booted config will
        be used.

        * If there is more than one Config profile and none were the last to be
        booted (because the
          Linode was never booted or the last booted config was deleted) an error will be returned.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"config_id\": \"<integer>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode to boot.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/clone:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Clone Linode
      description: >
        You can clone your Linode's existing Disks or Configuration profiles to

        another Linode on your Account. In order for this request to complete

        successfully, your User must have the `add_linodes` grant. Cloning to a

        new Linode will incur a charge on your Account.


        If cloning to an existing Linode, any actions currently running or

        queued must be completed first before you can clone to it.


        Up to five clone operations from any given source Linode can be run
        concurrently.

        If more concurrent clones are attempted, an HTTP 400 error will be

        returned by this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"backups_enabled\": \"<boolean>\",\n    \"configs\":
                [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n   
                \"disks\": [\n        \"<integer>\",\n        \"<integer>\"\n   
                ],\n    \"group\": \"<string>\",\n    \"label\":
                \"<string>\",\n    \"linode_id\": \"<integer>\",\n   
                \"region\": \"<string>\",\n    \"type\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to clone.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/migrate:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Initiate Pending Host Migration/DC Migration
      description: >
        Initiate a pending host migration that has been scheduled by Linode or
        initiate a cross data center (DC) migration.  A list of pending
        migrations, if any, can be accessed from [GET
        /account/notifications](/api/v4/account-notifications). When the
        migration begins, your Linode will be shutdown if not already off. If
        the migration initiated the shutdown, it will reboot the Linode when
        completed.


        To initiate a cross DC migration, you must pass a `region` parameter to
        the request body specifying the target data center region. You can view
        a list of all available regions and their feature capabilities from [GET
        /regions](/api/v4/regions). If your Linode has a DC migration already
        queued or you have initiated a previously scheduled migration, you will
        not be able to initiate a DC migration until it has completed.


        **Note:** Next Generation Network (NGN) data centers do not support IPv6
        `/116` pools or IP Failover. If you have these features enabled on your
        Linode and attempt to migrate to an NGN data center, the migration will
        not initiate. NGN data centers include Toronto and Mumbai.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"region\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to migrate.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/mutate:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Upgrade Linode
      description: >
        Linodes created with now-deprecated Types are entitled to a free upgrade
        to the next generation. A mutating Linode will be allocated any new
        resources the upgraded Type provides, and will be subsequently restarted
        if it was currently running.

        If any actions are currently running or queued, those actions must be
        completed first before you can initiate a mutate.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"allow_auto_disk_resize\": true\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to mutate.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/reboot:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Reboot Linode
      description: >
        Reboots a Linode you have permission to modify. If any actions are
        currently running or queued, those actions must be completed first
        before you can initiate a reboot.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"config_id\": \"<integer>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the linode to reboot.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/rebuild:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Rebuild Linode
      description: >
        Rebuilds a Linode you have the `read_write` permission to modify.

        A rebuild will first shut down the Linode, delete all disks and configs
        on the Linode, and then deploy a new `image` to the Linode with the
        given attributes. Additionally:

          * Requires an `image` be supplied.
          * Requires a `root_pass` be supplied to use for the root User's Account.
          * It is recommended to supply SSH keys for the root User using the
            `authorized_keys` field.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"authorized_keys\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"authorized_users\": [\n       
                \"<string>\",\n        \"<string>\"\n    ],\n    \"booted\":
                \"<boolean>\",\n    \"image\": \"<string>\",\n    \"root_pass\":
                \"<password>\",\n    \"stackscript_data\": \"<object>\",\n   
                \"stackscript_id\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to rebuild.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                group: Linode-Group
                label: kJ3o
                region: us-east
                type: g6-standard-2
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/rescue:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Boot Linode into Rescue Mode
      description: >
        Rescue Mode is a safe environment for performing many system recovery
        and disk management tasks. Rescue Mode is based on the Finnix recovery
        distribution, a self-contained and bootable Linux distribution. You can
        also use Rescue Mode for tasks other than disaster recovery, such as
        formatting disks to use different filesystems, copying data between
        disks, and downloading files from a disk via SSH and SFTP.

        * Note that "sdh" is reserved and unavailable during rescue.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"devices\": {\n        \"sda\": {\n           
                \"disk_id\": -32398488,\n            \"volume_id\":
                -6117522\n        },\n        \"sdb\": {\n           
                \"disk_id\": 75254399,\n            \"volume_id\":
                -56886890\n        },\n        \"sdc\": {\n           
                \"disk_id\": 64990562,\n            \"volume_id\":
                53892244\n        },\n        \"sdd\": {\n           
                \"disk_id\": 55977919,\n            \"volume_id\":
                64880735\n        },\n        \"sde\": {\n           
                \"disk_id\": 38411208,\n            \"volume_id\":
                -1703292\n        },\n        \"sdf\": {\n           
                \"disk_id\": 30269648,\n            \"volume_id\":
                -13506729\n        },\n        \"sdg\": {\n           
                \"disk_id\": -90297655,\n            \"volume_id\":
                50232203\n        }\n    }\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to rescue.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/resize:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Resize Linode
      description: >
        Resizes a Linode you have the `read_write` permission to a different
        Type. If any actions are currently running or queued, those actions must
        be completed first before you can initiate a resize. Additionally, the
        following criteria must be met in order to resize a Linode:

          * The Linode must not have a pending migration.
          * Your Account cannot have an outstanding balance.
          * The Linode must not have more disk allocation than the new Type allows.
            * In that situation, you must first delete or resize the disk to be smaller.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"type\": \"<string>\",\n    \"allow_auto_disk_resize\":
                true\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to resize.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/shutdown:
    post:
      tags:
        - linode > instances > {linode Id}
      summary: Shut Down Linode
      description: >
        Shuts down a Linode you have permission to modify. If any actions are
        currently running or queued, those actions must be completed first
        before you can initiate a shutdown.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to shutdown.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/transfer:
    get:
      tags:
        - linode > instances > {linode Id}
      summary: View Network Transfer
      description: >
        Returns a Linode's network transfer pool statistics for the current
        month.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                billable: 0
                quota: 2000
                used: 22956600198
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances/{linodeId}/volumes:
    get:
      tags:
        - linode > instances > {linode Id}
      summary: List Linode's Volumes
      description: |
        View Block Storage Volumes attached to this Linode.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Linode to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - label: my-volume
                    created: '1949-10-02T09:10:51.146Z'
                    filesystem_path: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
                    id: 12345
                    linode_id: 12346
                    region: us-east
                    size: 30
                    status: active
                    tags:
                      - example tag
                      - another example
                    updated: '1993-09-09T22:53:49.372Z'
                  - label: my-volume
                    created: '2006-03-04T20:31:08.817Z'
                    filesystem_path: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
                    id: 12345
                    linode_id: 12346
                    region: us-east
                    size: 30
                    status: active
                    tags:
                      - example tag
                      - another example
                    updated: '1994-09-21T18:17:25.398Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/instances:
    get:
      tags:
        - linode > instances
      summary: List Linodes
      description: |
        Returns a paginated list of Linodes you have permission to view.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - group: Linode-Group
                    label: c4FU
                    region: us-east
                    type: g6-standard-2
                  - group: Linode-Group
                    label: m0gn
                    region: us-east
                    type: g6-standard-2
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - linode > instances
      summary: Create Linode
      description: >
        Creates a Linode Instance on your Account. In order for this

        request to complete successfully, your User must have the `add_linodes`
        grant. Creating a

        new Linode will incur a charge on your Account.


        Linodes can be created using one of the available Types. See

        [GET /linode/types](/api/v4/linode-types) to get more

        information about each Type's specs and cost.


        Linodes can be created in any one of our available

        [Regions](/api/v4/regions) for a list

        of available Regions you can deploy your Linode in.


        Linodes can be created in a number of ways:


        * Using a Linode Linux Distribution image or an Image you created based
        on another Linode.
          * The Linode will be `running` after it completes `provisioning`.
          * A default config with two Disks, one being a 512 swap disk, is created.
            * `swap_size` can be used to customize the swap disk size.
          * Requires a `root_pass` be supplied to use for the root User's Account.
          * It is recommended to supply SSH keys for the root User using the `authorized_keys` field.
          * You may also supply a list of usernames via the `authorized_users` field.
            * These users must have an SSH Key associated with your Profile first. See [/profile/sshkeys](/api/v4/profile-sshkeys/#post) for more information.

        * Using a StackScript.
          * See [/linode/stackscripts](/api/v4/linode-stackscripts) for
            a list of available StackScripts.
          * The Linode will be `running` after it completes `provisioning`.
          * Requires a compatible Image to be supplied.
            * See [/linode/stackscript/{stackscriptId}](/api/v4/linode-stackscripts-stackscript-id) for compatible Images.
          * Requires a `root_pass` be supplied to use for the root User's Account.
          * It is recommended to supply SSH keys for the root User using the `authorized_keys` field.
          * You may also supply a list of usernames via the `authorized_users` field.
            * These users must have an SSH Key associated with your Profile first. See [/profile/sshkeys](/api/v4/profile-sshkeys/#post) for more information.

        * Using one of your other Linode's backups.
          * You must create a Linode large enough to accommodate the Backup's size.
          * The Disks and Config will match that of the Linode that was backed up.
          * The `root_pass` will match that of the Linode that was backed up.

        * Create an empty Linode.
          * The Linode will remain `offline` and must be manually started.
            * See [POST /linode/instances/{linodeId}/boot](/api/v4/linode-instances-linode-id-boot/#post).
          * Disks and Configs must be created manually.
          * This is only recommended for advanced use cases.


        **Important**: You must be an unrestricted User in order to add or
        modify

        tags on Linodes.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"type\": \"<string>\",\n    \"region\":
                \"<string>\",\n    \"authorized_keys\": [\n       
                \"<string>\",\n        \"<string>\"\n    ],\n   
                \"authorized_users\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"backup_id\": \"<integer>\",\n   
                \"backups_enabled\": \"<boolean>\",\n    \"booted\":
                \"<boolean>\",\n    \"group\": \"<string>\",\n    \"image\":
                \"<string>\",\n    \"label\": {},\n    \"private_ip\":
                \"<boolean>\",\n    \"root_pass\": \"<password>\",\n   
                \"stackscript_data\": \"<object>\",\n    \"stackscript_id\":
                \"<integer>\",\n    \"swap_size\": 512,\n    \"tags\":
                [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                group: Linode-Group
                label: kJ3o
                region: us-east
                type: g6-standard-2
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/kernels:
    get:
      tags:
        - linode > kernels
      summary: List Kernels
      description: |
        Lists available Kernels.
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - architecture: x86_64
                    id: linode/latest-64bit
                    kvm: true
                    label: Latest 64 bit (4.15.7-x86_64-linode102)
                    pvops: false
                    version: 4.15.7
                    xen: false
                  - architecture: x86_64
                    id: linode/latest-64bit
                    kvm: true
                    label: Latest 64 bit (4.15.7-x86_64-linode102)
                    pvops: false
                    version: 4.15.7
                    xen: false
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/kernels/{kernelId}:
    get:
      tags:
        - linode > kernels
      summary: View Kernel
      description: |
        Returns information about a single Kernel.
      parameters:
        - name: kernelId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Kernel to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                architecture: x86_64
                id: linode/latest-64bit
                kvm: true
                label: Latest 64 bit (4.15.7-x86_64-linode102)
                pvops: false
                version: 4.15.7
                xen: false
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/stackscripts/{stackscriptId}:
    delete:
      tags:
        - linode > stackscripts > {stackscript Id}
      summary: Delete StackScript
      description: >
        Deletes a private StackScript you have permission to `read_write`. You
        cannot delete a public StackScript.
      security:
        - oauth2Auth: []
      parameters:
        - name: stackscriptId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the StackScript to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - linode > stackscripts > {stackscript Id}
      summary: View StackScript
      description: >
        Returns all of the information about a specified StackScript, including
        the contents of the script.
      security:
        - oauth2Auth: []
      parameters:
        - name: stackscriptId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the StackScript to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1998-02-20T19:14:56.404Z'
                deployments_active: 1
                deployments_total: 12
                description: |
                  This StackScript installs and configures MySQL
                id: 10079
                images:
                  - linode/debian9
                  - linode/debian8
                is_public: true
                label: a-stackscript
                rev_note: Set up MySQL
                script: |
                  "#!/bin/bash"
                updated: '1973-10-18T22:13:19.473Z'
                user_defined_fields:
                  - description: >
                      The default value.  If not specified, this value will be
                      used.
                    readOnly: true
                    type: string
                  - description: >
                      The default value.  If not specified, this value will be
                      used.
                    readOnly: true
                    type: string
                user_gravatar_id: a445b305abda30ebc766bc7fda037c37
                username: myuser
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - linode > stackscripts > {stackscript Id}
      summary: Update StackScript
      description: |
        Updates a StackScript.

        **Once a StackScript is made public, it cannot be made private.**
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"description\": \"<string>\",\n    \"images\":
                [\n        \"<string>\",\n        \"<string>\"\n    ],\n   
                \"is_public\": \"<boolean>\",\n    \"label\": \"<string>\",\n   
                \"rev_note\": \"<string>\",\n    \"script\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: stackscriptId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the StackScript to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1979-01-18T18:05:35.378Z'
                deployments_active: 1
                deployments_total: 12
                description: |
                  This StackScript installs and configures MySQL
                id: 10079
                images:
                  - linode/debian9
                  - linode/debian8
                is_public: true
                label: a-stackscript
                rev_note: Set up MySQL
                script: |
                  "#!/bin/bash"
                updated: '1966-02-12T12:39:53.673Z'
                user_defined_fields:
                  - description: >
                      The default value.  If not specified, this value will be
                      used.
                    readOnly: true
                    type: string
                  - description: >
                      The default value.  If not specified, this value will be
                      used.
                    readOnly: true
                    type: string
                user_gravatar_id: a445b305abda30ebc766bc7fda037c37
                username: myuser
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/stackscripts:
    get:
      tags:
        - linode > stackscripts
      summary: List StackScripts
      description: >
        If the request is not authenticated, only public StackScripts are
        returned.


        For more information on StackScripts, please read our guide: <a
        target="_top"
        href="https://linode.com/docs/platform/stackscripts/">Automate
        Deployment with StackScripts</a>.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '2012-04-26T21:02:26.560Z'
                    deployments_active: 1
                    deployments_total: 12
                    description: |
                      This StackScript installs and configures MySQL
                    id: 10079
                    images:
                      - linode/debian9
                      - linode/debian8
                    is_public: true
                    label: a-stackscript
                    rev_note: Set up MySQL
                    script: |
                      "#!/bin/bash"
                    updated: '2015-03-20T15:38:32.446Z'
                    user_defined_fields:
                      - description: >
                          The default value.  If not specified, this value will
                          be used.
                        readOnly: true
                        type: string
                      - description: >
                          The default value.  If not specified, this value will
                          be used.
                        readOnly: true
                        type: string
                    user_gravatar_id: a445b305abda30ebc766bc7fda037c37
                    username: myuser
                  - created: '1983-10-03T09:23:49.998Z'
                    deployments_active: 1
                    deployments_total: 12
                    description: |
                      This StackScript installs and configures MySQL
                    id: 10079
                    images:
                      - linode/debian9
                      - linode/debian8
                    is_public: true
                    label: a-stackscript
                    rev_note: Set up MySQL
                    script: |
                      "#!/bin/bash"
                    updated: '2006-09-20T08:00:28.906Z'
                    user_defined_fields:
                      - description: >
                          The default value.  If not specified, this value will
                          be used.
                        readOnly: true
                        type: string
                      - description: >
                          The default value.  If not specified, this value will
                          be used.
                        readOnly: true
                        type: string
                    user_gravatar_id: a445b305abda30ebc766bc7fda037c37
                    username: myuser
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - linode > stackscripts
      summary: Create StackScript
      description: |
        Creates a StackScript in your Account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"created\": \"1977-08-20T14:21:53.956Z\",\n   
                \"deployments_active\": -52820413,\n    \"deployments_total\":
                -75879262,\n    \"description\": \"ipsum commodo esse
                incididu\",\n    \"id\": 51846012,\n    \"images\": [\n       
                \"fugiat cillum nulla in\",\n        \"in laborum nisi\"\n   
                ],\n    \"is_public\": false,\n    \"label\": \"volu\",\n   
                \"rev_note\": \"consequat sint incididunt\",\n    \"script\":
                \"occaecat Ut\",\n    \"updated\":
                \"2019-04-15T13:22:25.916Z\",\n    \"user_defined_fields\":
                [\n        {\n            \"description\": \"The default value. 
                If not specified, this value will be used.\\n\",\n           
                \"readOnly\": true,\n            \"type\": \"string\"\n       
                },\n        {\n            \"description\": \"The default
                value.  If not specified, this value will be
                used.\\n\",\n            \"readOnly\": true,\n           
                \"type\": \"string\"\n        }\n    ],\n   
                \"user_gravatar_id\": \"ut exercitation enim\",\n   
                \"username\": \"aliquip sed est\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1998-02-20T19:14:56.404Z'
                deployments_active: 1
                deployments_total: 12
                description: |
                  This StackScript installs and configures MySQL
                id: 10079
                images:
                  - linode/debian9
                  - linode/debian8
                is_public: true
                label: a-stackscript
                rev_note: Set up MySQL
                script: |
                  "#!/bin/bash"
                updated: '1973-10-18T22:13:19.473Z'
                user_defined_fields:
                  - description: >
                      The default value.  If not specified, this value will be
                      used.
                    readOnly: true
                    type: string
                  - description: >
                      The default value.  If not specified, this value will be
                      used.
                    readOnly: true
                    type: string
                user_gravatar_id: a445b305abda30ebc766bc7fda037c37
                username: myuser
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/types:
    get:
      tags:
        - linode > types
      summary: List Types
      description: >
        Returns collection of Linode Types, including pricing and specifications
        for each Type. These are used when
        [creating](/api/v4/linode-instances/#post) or
        [resizing](/api/v4/linode-instances-linode-id-resize/#post) Linodes.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - addons:
                      backups:
                        price:
                          hourly: 64147922
                          monthly: 5
                    class: standard
                    disk: 81920
                    gpus: 0
                    id: g6-standard-2
                    label: Linode 4GB
                    memory: 4096
                    network_out: 1000
                    price:
                      hourly: -73664730
                      monthly: 20
                    successor: null
                    transfer: 4000
                    vcpus: 2
                  - addons:
                      backups:
                        price:
                          hourly: -16934536
                          monthly: 5
                    class: standard
                    disk: 81920
                    gpus: 0
                    id: g6-standard-2
                    label: Linode 4GB
                    memory: 4096
                    network_out: 1000
                    price:
                      hourly: -68729029
                      monthly: 20
                    successor: null
                    transfer: 4000
                    vcpus: 2
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /linode/types/{typeId}:
    get:
      tags:
        - linode > types
      summary: View Type
      description: >
        Returns information about a specific Linode Type, including pricing and
        specifications. This is used when
        [creating](/api/v4/linode-instances/#post) or
        [resizing](/api/v4/linode-instances-linode-id-resize/#post) Linodes.
      parameters:
        - name: typeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Linode Type to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                addons:
                  backups:
                    price:
                      hourly: -27994295
                      monthly: 5
                class: standard
                disk: 81920
                gpus: 0
                id: g6-standard-2
                label: Linode 4GB
                memory: 4096
                network_out: 1000
                price:
                  hourly: -37083517
                  monthly: 20
                successor: null
                transfer: 4000
                vcpus: 2
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /longview/clients/{clientId}:
    delete:
      tags:
        - longview > clients > {client Id}
      summary: Delete Longview Client
      description: >
        Deletes a Longview Client from your Account.


        **All information stored for this client will be lost.**


        This _does not_ uninstall the Longview Client application for your
        Linode - you must do that manually.
      security:
        - oauth2Auth: []
      parameters:
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The Longview Client ID to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - longview > clients > {client Id}
      summary: View Longview Client
      description: |
        Returns a single Longview Client you can access.
      security:
        - oauth2Auth: []
      parameters:
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The Longview Client ID to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                api_key: BD1B4B54-D752-A76D-5A9BD8A17F39DB61
                apps:
                  apache: true
                  mysql: true
                  nginx: false
                created: '2018-01-01T00:01:01.000Z'
                id: 789
                install_code: BD1B5605-BF5E-D385-BA07AD518BE7F321
                label: client789
                updated: '2018-01-01T00:01:01.000Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - longview > clients > {client Id}
      summary: Update Longview Client
      description: >
        Updates a Longview Client.  This cannot update how it monitors your
        server; use the Longview Client application on your Linode for
        monitoring configuration.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: clientId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The Longview Client ID to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                api_key: BD1B4B54-D752-A76D-5A9BD8A17F39DB61
                apps:
                  apache: true
                  mysql: true
                  nginx: false
                created: '2018-01-01T00:01:01.000Z'
                id: 789
                install_code: BD1B5605-BF5E-D385-BA07AD518BE7F321
                label: client789
                updated: '2018-01-01T00:01:01.000Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /longview/clients:
    get:
      tags:
        - longview > clients
      summary: List Longview Clients
      description: >
        Returns a paginated list of Longview Clients you have access to.
        Longview Client is used to monitor stats on your Linode with the help of
        the Longview Client application.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - api_key: BD1B4B54-D752-A76D-5A9BD8A17F39DB61
                    apps:
                      apache: true
                      mysql: true
                      nginx: false
                    created: '2018-01-01T00:01:01.000Z'
                    id: 789
                    install_code: BD1B5605-BF5E-D385-BA07AD518BE7F321
                    label: client789
                    updated: '2018-01-01T00:01:01.000Z'
                  - api_key: BD1B4B54-D752-A76D-5A9BD8A17F39DB61
                    apps:
                      apache: true
                      mysql: true
                      nginx: false
                    created: '2018-01-01T00:01:01.000Z'
                    id: 789
                    install_code: BD1B5605-BF5E-D385-BA07AD518BE7F321
                    label: client789
                    updated: '2018-01-01T00:01:01.000Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - longview > clients
      summary: Create Longview Client
      description: >
        Creates a Longview Client.  This Client will not begin monitoring the
        status of your server until you configure the Longview Client
        application on your Linode using the returning `install_code` and
        `api_key`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                api_key: BD1B4B54-D752-A76D-5A9BD8A17F39DB61
                apps:
                  apache: true
                  mysql: true
                  nginx: false
                created: '2018-01-01T00:01:01.000Z'
                id: 789
                install_code: BD1B5605-BF5E-D385-BA07AD518BE7F321
                label: client789
                updated: '2018-01-01T00:01:01.000Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /longview/subscriptions:
    get:
      tags:
        - longview > subscriptions
      summary: List Longview Subscriptions
      description: >
        Returns a paginated list of available Longview Subscriptions. This is a
        public endpoint and requires no authentication.
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - clients_included: 10
                    id: longview-10
                    label: Longivew Pro 10 pack
                    price:
                      hourly: 0.06
                      monthly: 40
                  - clients_included: 10
                    id: longview-10
                    label: Longivew Pro 10 pack
                    price:
                      hourly: 0.06
                      monthly: 40
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /longview/subscriptions/{subscriptionId}:
    get:
      tags:
        - longview > subscriptions
      summary: View Longview Subscription
      description: >
        Returns a single LongviewSubscription object.  This is a public endpoint
        and requires no authentication.
      parameters:
        - name: subscriptionId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The Longview Subscription to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                clients_included: 10
                id: longview-10
                label: Longivew Pro 10 pack
                price:
                  hourly: 0.06
                  monthly: 40
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/contacts/{contactId}:
    delete:
      tags:
        - managed > contacts > {contact Id}
      summary: Delete Managed Contact
      description: |
        Deletes a Managed Contact.
      security:
        - oauth2Auth: []
      parameters:
        - name: contactId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the contact to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - managed > contacts > {contact Id}
      summary: View Managed Contact
      description: |
        Returns a single Managed Contact.
      security:
        - oauth2Auth: []
      parameters:
        - name: contactId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the contact to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                email: john.doe@example.org
                group: on-call
                id: 567
                name: John Doe
                phone:
                  primary: 123-456-7890
                  secondary: null
                updated: '1943-03-31T10:40:55.078Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - managed > contacts > {contact Id}
      summary: Update Managed Contact
      description: |
        Updates information about a Managed Contact.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"email\": \"<email>\",\n    \"group\":
                \"<string>\",\n    \"name\": \"<string>\",\n    \"phone\":
                {\n        \"primary\": \"<string>\",\n        \"secondary\":
                \"<string>\"\n    }\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: contactId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the contact to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                email: john.doe@example.org
                group: on-call
                id: 567
                name: John Doe
                phone:
                  primary: 123-456-7890
                  secondary: null
                updated: '1943-03-31T10:40:55.078Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/contacts:
    get:
      tags:
        - managed > contacts
      summary: List Managed Contacts
      description: |
        Returns a paginated list of Managed Contacts on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - email: john.doe@example.org
                    group: on-call
                    id: 567
                    name: John Doe
                    phone:
                      primary: 123-456-7890
                      secondary: null
                    updated: '1982-09-11T20:49:05.104Z'
                  - email: john.doe@example.org
                    group: on-call
                    id: 567
                    name: John Doe
                    phone:
                      primary: 123-456-7890
                      secondary: null
                    updated: '1969-05-10T22:30:37.636Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - managed > contacts
      summary: Create Managed Contact
      description: >
        Creates a Managed Contact.  A Managed Contact is someone Linode special
        forces can contact in the course of attempting to resolve an issue with
        a Managed Service.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"email\": \"<email>\",\n    \"group\":
                \"<string>\",\n    \"name\": \"<string>\",\n    \"phone\":
                {\n        \"primary\": \"<string>\",\n        \"secondary\":
                \"<string>\"\n    }\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                email: john.doe@example.org
                group: on-call
                id: 567
                name: John Doe
                phone:
                  primary: 123-456-7890
                  secondary: null
                updated: '1943-03-31T10:40:55.078Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/credentials/{credentialId}:
    get:
      tags:
        - managed > credentials > {credential Id}
      summary: View Managed Credential
      description: |
        Returns a single Managed Credential.
      security:
        - oauth2Auth: []
      parameters:
        - name: credentialId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Credential to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 9991
                label: prod-password-1
                last_decrypted: '1979-01-05T00:21:32.798Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - managed > credentials > {credential Id}
      summary: Update Managed Credential
      description: >
        Updates the label of a Managed Credential. This endpoint does not update
        the username and password for a Managed Credential. To do this, use the
        Update Managed Credential Username and Password ([POST
        /managed/credentials/{credentialId}/update](https://developers.linode.com/api/docs/v4#operation/updateManagedCredentialUsernamePassword))
        endpoint instead.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: credentialId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Credential to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 9991
                label: prod-password-1
                last_decrypted: '1948-07-09T09:45:00.824Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/credentials/{credentialId}/revoke:
    post:
      tags:
        - managed > credentials > {credential Id}
      summary: Delete Managed Credential
      description: >
        Deletes a Managed Credential.  Linode special forces will no longer have
        access to this Credential when attempting to resolve issues.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: credentialId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Credential to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/credentials/{credentialId}/update:
    post:
      tags:
        - managed > credentials > {credential Id}
      summary: Update Managed Credential Username and Password
      description: |
        Updates the username and password for a Managed Credential.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"password\": \"<string>\",\n    \"username\":
                \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: credentialId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Credential to update.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/credentials:
    get:
      tags:
        - managed > credentials
      summary: List Managed Credentials
      description: |
        Returns a paginated list of Managed Credentials on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 9991
                    label: prod-password-1
                    last_decrypted: '1964-01-20T04:38:32.090Z'
                  - id: 9991
                    label: prod-password-1
                    last_decrypted: '1956-03-28T01:42:38.338Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - managed > credentials
      summary: Create Managed Credential
      description: >
        Creates a Managed Credential. A Managed Credential is stored securely to
        allow Linode special forces to access your Managed Services and resolve
        issues.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"id\": -62926378,\n    \"label\": \"VKNA\",\n   
                \"last_decrypted\": \"2003-09-18T18:35:46.773Z\",\n   
                \"password\": \"<string>\",\n    \"username\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: 9991
                label: prod-password-1
                last_decrypted: '1979-01-05T00:21:32.798Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/credentials/sshkey:
    get:
      tags:
        - managed > credentials
      summary: View Managed SSH Key
      description: >
        Returns the unique SSH public key assigned to your Linode account's
        Managed service. If you [add this public
        key](https://linode.com/docs/platform/linode-managed/#adding-the-public-key)
        to a Linode on your account, Linode special forces will be able to log
        in to the Linode with this key when attempting to resolve issues.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                ssh_key: ssh-rsa AAAAB...oD2ZQ== managedservices@linode
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/issues:
    get:
      tags:
        - managed > issues
      summary: List Managed Issues
      description: >
        Returns a paginated list of recent and ongoing issues detected on your
        Managed Services.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '1955-11-30T10:03:32.208Z'
                    entity:
                      id: 98765
                      label: Managed Issue opened!
                      type: ticket
                      url: /support/tickets/98765
                    id: 823
                    services:
                      - 654
                      - 654
                  - created: '1956-01-08T04:14:53.963Z'
                    entity:
                      id: 98765
                      label: Managed Issue opened!
                      type: ticket
                      url: /support/tickets/98765
                    id: 823
                    services:
                      - 654
                      - 654
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/issues/{issueId}:
    get:
      tags:
        - managed > issues
      summary: View Managed Issue
      description: >
        Returns a single Issue that is impacting or did impact one of your
        Managed Services.
      security:
        - oauth2Auth: []
      parameters:
        - name: issueId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The Issue to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1963-03-26T20:21:47.422Z'
                entity:
                  id: 98765
                  label: Managed Issue opened!
                  type: ticket
                  url: /support/tickets/98765
                id: 823
                services:
                  - 654
                  - 654
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/linode-settings/{linodeId}:
    get:
      tags:
        - managed > linode-settings > {linode Id}
      summary: View Linode's Managed Settings
      description: |
        Returns a single Linode's Managed settings.
      security:
        - oauth2Auth: []
      parameters:
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The Linode ID whose settings we are accessing.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                group: linodes
                id: 123
                label: linode123
                ssh:
                  access: true
                  ip: 12.34.56.78
                  port: 22
                  user: linode
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - managed > linode-settings > {linode Id}
      summary: Update Linode's Managed Settings
      description: |
        Updates a single Linode's Managed settings.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"ssh\": {\n        \"access\": \"<boolean>\",\n       
                \"ip\": \"<string>\",\n        \"port\": \"<integer>\",\n       
                \"user\": \"<string>\"\n    }\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: linodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The Linode ID whose settings we are accessing.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                group: linodes
                id: 123
                label: linode123
                ssh:
                  access: true
                  ip: 12.34.56.78
                  port: 22
                  user: linode
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/linode-settings:
    get:
      tags:
        - managed > linode-settings
      summary: List Managed Linode Settings
      description: >
        Returns a paginated list of Managed Settings for your Linodes. There
        will be one entry per Linode on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - group: linodes
                    id: 123
                    label: linode123
                    ssh:
                      access: true
                      ip: 12.34.56.78
                      port: 22
                      user: linode
                  - group: linodes
                    id: 123
                    label: linode123
                    ssh:
                      access: true
                      ip: 12.34.56.78
                      port: 22
                      user: linode
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/services/{serviceId}:
    delete:
      tags:
        - managed > services > {service Id}
      summary: Delete Managed Service
      description: >
        Deletes a Managed Service.  This service will no longer be monitored by
        Linode Managed.
      security:
        - oauth2Auth: []
      parameters:
        - name: serviceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Managed Service to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - managed > services > {service Id}
      summary: View Managed Service
      description: |
        Returns information about a single Managed Service on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: serviceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Managed Service to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: https://example.org
                body: it worked
                consultation_group: on-call
                created: '1986-04-28T18:17:24.379Z'
                credentials:
                  - 9991
                  - 9991
                id: 9944
                label: prod-1
                notes: The service name is my-cool-application
                region: ipsum enim irure
                service_type: url
                status: ok
                timeout: 30
                updated: '1966-06-06T09:35:24.085Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - managed > services > {service Id}
      summary: Update Managed Service
      description: |
        Updates information about a Managed Service.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"address\": \"<string>\",\n    \"body\":
                \"<string>\",\n    \"consultation_group\": \"<string>\",\n   
                \"credentials\": [\n        \"<integer>\",\n       
                \"<integer>\"\n    ],\n    \"label\": \"<string>\",\n   
                \"notes\": \"<string>\",\n    \"region\": \"<string>\",\n   
                \"service_type\": \"<string>\",\n    \"timeout\":
                \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: serviceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Managed Service to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: https://example.org
                body: it worked
                consultation_group: on-call
                created: '1960-09-18T23:37:37.529Z'
                credentials:
                  - 9991
                  - 9991
                id: 9944
                label: prod-1
                notes: The service name is my-cool-application
                region: <string>
                service_type: url
                status: ok
                timeout: 30
                updated: '1988-01-28T03:18:39.472Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/services/{serviceId}/disable:
    post:
      tags:
        - managed > services > {service Id}
      summary: Disable Managed Service
      description: |
        Temporarily disables monitoring of a Managed Service.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: serviceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Managed Service to disable.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: https://example.org
                body: it worked
                consultation_group: on-call
                created: '1960-09-18T23:37:37.529Z'
                credentials:
                  - 9991
                  - 9991
                id: 9944
                label: prod-1
                notes: The service name is my-cool-application
                region: <string>
                service_type: url
                status: ok
                timeout: 30
                updated: '1988-01-28T03:18:39.472Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/services/{serviceId}/enable:
    post:
      tags:
        - managed > services > {service Id}
      summary: Enable Managed Service
      description: |
        Enables monitoring of a Managed Service.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: serviceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Managed Service to enable.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: https://example.org
                body: it worked
                consultation_group: on-call
                created: '1960-09-18T23:37:37.529Z'
                credentials:
                  - 9991
                  - 9991
                id: 9944
                label: prod-1
                notes: The service name is my-cool-application
                region: <string>
                service_type: url
                status: ok
                timeout: 30
                updated: '1988-01-28T03:18:39.472Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /managed/services:
    get:
      tags:
        - managed > services
      summary: List Managed Services
      description: >
        Returns a paginated list of Managed Services on your Account. These are
        the services Linode Managed is monitoring and will report and attempt to
        resolve issues with.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - address: https://example.org
                    body: it worked
                    consultation_group: on-call
                    created: '1960-12-11T23:00:53.462Z'
                    credentials:
                      - 9991
                      - 9991
                    id: 9944
                    label: prod-1
                    notes: The service name is my-cool-application
                    region: esse enim in
                    service_type: url
                    status: ok
                    timeout: 30
                    updated: '1969-04-11T12:04:13.377Z'
                  - address: https://example.org
                    body: it worked
                    consultation_group: on-call
                    created: '1982-06-08T21:27:28.989Z'
                    credentials:
                      - 9991
                      - 9991
                    id: 9944
                    label: prod-1
                    notes: The service name is my-cool-application
                    region: proident
                    service_type: url
                    status: ok
                    timeout: 30
                    updated: '1951-05-27T10:06:30.400Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - managed > services
      summary: Create Managed Service
      description: >
        Creates a Managed Service. Linode Managed will begin monitoring this
        service and reporting and attempting to resolve any Issues.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"address\": \"qui ut do\",\n    \"body\":
                \"Duis\",\n    \"consultation_group\": \"anim\",\n   
                \"created\": \"1965-10-16T12:00:16.657Z\",\n    \"credentials\":
                [\n        -76136080,\n        -12814182\n    ],\n    \"id\":
                -12084326,\n    \"label\": \"lqlu\",\n    \"notes\": \"Lorem
                tempor deserunt elit\",\n    \"region\": \"ipsum magna\",\n   
                \"service_type\": \"tcp\",\n    \"status\": \"disabled\",\n   
                \"timeout\": 80,\n    \"updated\":
                \"1967-09-09T02:02:45.824Z\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: https://example.org
                body: it worked
                consultation_group: on-call
                created: '1986-04-28T18:17:24.379Z'
                credentials:
                  - 9991
                  - 9991
                id: 9944
                label: prod-1
                notes: The service name is my-cool-application
                region: ipsum enim irure
                service_type: url
                status: ok
                timeout: 30
                updated: '1966-06-06T09:35:24.085Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /networking/ips/{address}:
    get:
      tags:
        - networking > ips > {address}
      summary: View IP Address
      description: |
        Returns information about a single IP Address on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: address
          in: path
          schema:
            type: string
          required: true
          description: (Required) The address to operate on.
          example: <ip>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 97.107.143.141
                gateway: 97.107.143.1
                linode_id: 123
                prefix: 24
                public: true
                rdns: test.example.org
                region: us-east
                subnet_mask: 255.255.255.0
                type: ipv4
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - networking > ips > {address}
      summary: Update IP Address RDNS
      description: >
        Sets RDNS on an IP Address. Forward DNS must already be set up for
        reverse DNS to be applied. If you set the RDNS to `null` for public IPv4
        addresses, it will be reset to the default _members.linode.com_ RDNS
        value.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"rdns\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: address
          in: path
          schema:
            type: string
          required: true
          description: (Required) The address to operate on.
          example: <ip>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 97.107.143.141
                gateway: 97.107.143.1
                linode_id: 123
                prefix: 24
                public: true
                rdns: test.example.org
                region: us-east
                subnet_mask: 255.255.255.0
                type: ipv4
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /networking/ips:
    get:
      tags:
        - networking > ips
      summary: List IP Addresses
      description: >
        Returns a paginated list of IP Addresses on your Account, excluding
        private addresses.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - address: 97.107.143.141
                    gateway: 97.107.143.1
                    linode_id: 123
                    prefix: 24
                    public: true
                    rdns: test.example.org
                    region: us-east
                    subnet_mask: 255.255.255.0
                    type: ipv4
                  - address: 97.107.143.141
                    gateway: 97.107.143.1
                    linode_id: 123
                    prefix: 24
                    public: true
                    rdns: test.example.org
                    region: us-east
                    subnet_mask: 255.255.255.0
                    type: ipv4
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - networking > ips
      summary: Allocate IP Address
      description: >
        Allocates a new IPv4 Address on your Account. The Linode must be
        configured to support additional addresses - please [open a support
        ticket](/api/v4/support-tickets/#post) requesting additional addresses
        before attempting allocation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"type\": \"<string>\",\n    \"public\":
                \"<boolean>\",\n    \"linode_id\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 97.107.143.141
                gateway: 97.107.143.1
                linode_id: 123
                prefix: 24
                public: true
                rdns: test.example.org
                region: us-east
                subnet_mask: 255.255.255.0
                type: ipv4
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /networking/ipv4/assign:
    post:
      tags:
        - networking > ipv4
      summary: Assign IPs to Linodes
      description: >
        Assign multiple IPs to multiple Linodes in one Region. This allows
        swapping, shuffling, or otherwise reorganizing IPv4 Addresses to your
        Linodes.  When the assignment is finished, all Linodes must end up with
        at least one public IPv4 and no more than one private IPv4.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"region\": \"<string>\",\n    \"assignments\":
                [\n        {\n            \"address\": \"<ip>\",\n           
                \"linode_id\": \"<integer>\"\n        },\n        {\n           
                \"address\": \"<ip>\",\n            \"linode_id\":
                \"<integer>\"\n        }\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /networking/ipv4/share:
    post:
      tags:
        - networking > ipv4
      summary: Configure IP Sharing
      description: >
        Configure shared IPs.  A shared IP may be brought up on a Linode other
        than the one it lists in its response.  This can be used to allow one
        Linode to begin serving requests should another become unresponsive.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"linode_id\": \"<integer>\",\n    \"ips\": [\n       
                \"<ip>\",\n        \"<ip>\"\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /networking/ipv6/pools:
    get:
      tags:
        - networking > ipv6
      summary: List IPv6 Pools
      description: |
        Displays the IPv6 pools on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - prefix: 124
                    range: '2600:3c01::02:5000::'
                    region: us-east
                  - prefix: 124
                    range: '2600:3c01::02:5000::'
                    region: us-east
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /networking/ipv6/ranges:
    get:
      tags:
        - networking > ipv6
      summary: List IPv6 Ranges
      description: |
        Displays the IPv6 ranges on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - range: '2600:3c01::02:5000::'
                    region: us-east
                  - range: '2600:3c01::02:5000::'
                    region: us-east
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}:
    delete:
      tags:
        - >-
          nodebalancers > {node Balancer Id} > configs > {config Id} > nodes >
          {node Id}
      summary: Delete Node
      description: >
        Deletes a Node from this Config. This backend will no longer receive
        traffic for the configured port of this NodeBalancer.


        This does not change or remove the Linode whose address was used in the
        creation of this Node.
      security:
        - oauth2Auth: []
      parameters:
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Config to access
          example: <integer>
        - name: nodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Node to access
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - >-
          nodebalancers > {node Balancer Id} > configs > {config Id} > nodes >
          {node Id}
      summary: View Node
      description: >
        Returns information about a single Node, a backend for this
        NodeBalancer's configured port.
      security:
        - oauth2Auth: []
      parameters:
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Config to access
          example: <integer>
        - name: nodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Node to access
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 192.168.210.120:80
                config_id: 4567
                id: 54321
                label: node54321
                mode: accept
                nodebalancer_id: 12345
                status: UP
                weight: 50
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - >-
          nodebalancers > {node Balancer Id} > configs > {config Id} > nodes >
          {node Id}
      summary: Update Node
      description: >
        Updates information about a Node, a backend for this NodeBalancer's
        configured port.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"address\": \"<ip>\",\n    \"label\":
                \"<string>\",\n    \"mode\": \"<string>\",\n    \"weight\":
                \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Config to access
          example: <integer>
        - name: nodeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Node to access
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 192.168.210.120:80
                config_id: 4567
                id: 54321
                label: node54321
                mode: accept
                nodebalancer_id: 12345
                status: UP
                weight: 50
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /nodebalancers/{nodeBalancerId}/configs/{configId}/nodes:
    get:
      tags:
        - nodebalancers > {node Balancer Id} > configs > {config Id} > nodes
      summary: List Nodes
      description: >
        Returns a paginated list of NodeBalancer nodes associated with this
        Config. These are the backends that will be sent traffic for this port.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer config to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - address: 192.168.210.120:80
                    label: node54321
                    mode: accept
                    weight: 50
                  - address: 192.168.210.120:80
                    label: node54321
                    mode: accept
                    weight: 50
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - nodebalancers > {node Balancer Id} > configs > {config Id} > nodes
      summary: Create Node
      description: >
        Creates a NodeBalancer Node, a backend that can accept traffic for this
        NodeBalancer Config. Nodes are routed requests on the configured port
        based on their status.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"address\": \"<ip>\",\n    \"label\":
                \"<string>\",\n    \"mode\": \"<string>\",\n    \"weight\":
                \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer config to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                address: 192.168.210.120:80
                config_id: 4567
                id: 54321
                label: node54321
                mode: accept
                nodebalancer_id: 12345
                status: UP
                weight: 50
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /nodebalancers/{nodeBalancerId}/configs/{configId}:
    delete:
      tags:
        - nodebalancers > {node Balancer Id} > configs > {config Id}
      summary: Delete Config
      description: >
        Deletes the Config for a port of this NodeBalancer.


        **This cannot be undone.**


        Once completed, this NodeBalancer will no longer respond to requests on
        the given port. This also deletes all associated NodeBalancerNodes, but
        the Linodes they were routing traffic to will be unchanged and will not
        be removed.
      security:
        - oauth2Auth: []
      parameters:
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the config to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - nodebalancers > {node Balancer Id} > configs > {config Id}
      summary: View Config
      description: >
        Returns configuration information for a single port of this
        NodeBalancer.
      security:
        - oauth2Auth: []
      parameters:
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the config to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                algorithm: roundrobin
                check: http_body
                check_attempts: 3
                check_body: it works
                check_interval: 90
                check_passive: true
                check_path: /test
                check_timeout: 10
                cipher_suite: recommended
                id: 4567
                nodebalancer_id: 12345
                nodes_status:
                  down: 0
                  up: 4
                port: 80
                protocol: http
                ssl_cert: null
                ssl_commonname: ut laboris ci
                ssl_fingerprint: qui nisi aliquip amet
                ssl_key: null
                stickiness: http_cookie
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - nodebalancers > {node Balancer Id} > configs > {config Id}
      summary: Update Config
      description: |
        Updates the configuration for a single port on a NodeBalancer.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"algorithm\": \"<string>\",\n    \"check\":
                \"<string>\",\n    \"check_attempts\": \"<integer>\",\n   
                \"check_body\": \"<string>\",\n    \"check_interval\":
                \"<integer>\",\n    \"check_passive\": \"<boolean>\",\n   
                \"check_path\": \"<string>\",\n    \"check_timeout\":
                \"<integer>\",\n    \"cipher_suite\": \"<string>\",\n   
                \"port\": \"<integer>\",\n    \"protocol\": \"<string>\",\n   
                \"ssl_cert\": \"<ssl-cert>\",\n    \"ssl_key\":
                \"<ssl-key>\",\n    \"stickiness\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the config to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                algorithm: roundrobin
                check: http_body
                check_attempts: 3
                check_body: it works
                check_interval: 90
                check_passive: true
                check_path: /test
                check_timeout: 10
                cipher_suite: recommended
                id: 4567
                nodebalancer_id: 12345
                nodes_status:
                  down: 0
                  up: 4
                port: 80
                protocol: http
                ssl_cert: null
                ssl_commonname: ut laboris ci
                ssl_fingerprint: qui nisi aliquip amet
                ssl_key: null
                stickiness: http_cookie
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild:
    post:
      tags:
        - nodebalancers > {node Balancer Id} > configs > {config Id}
      summary: Rebuild Config
      description: >
        Rebuilds a NodeBalancer Config and its Nodes that you have permission to
        modify.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"configs\": [\n        {\n            \"algorithm\":
                \"<string>\",\n            \"check\": \"<string>\",\n           
                \"check_attempts\": \"<integer>\",\n            \"check_body\":
                \"<string>\",\n            \"check_interval\":
                \"<integer>\",\n            \"check_passive\":
                \"<boolean>\",\n            \"check_path\":
                \"<string>\",\n            \"check_timeout\":
                \"<integer>\",\n            \"cipher_suite\":
                \"<string>\",\n            \"port\": \"<integer>\",\n           
                \"protocol\": \"<string>\",\n            \"ssl_cert\":
                \"<ssl-cert>\",\n            \"ssl_key\":
                \"<ssl-key>\",\n            \"stickiness\":
                \"<string>\",\n            \"nodes\": [\n               
                {\n                    \"address\":
                \"<ip>\",\n                    \"label\":
                \"<string>\",\n                    \"mode\":
                \"<string>\",\n                    \"weight\":
                \"<integer>\"\n                },\n               
                {\n                    \"address\":
                \"<ip>\",\n                    \"label\":
                \"<string>\",\n                    \"mode\":
                \"<string>\",\n                    \"weight\":
                \"<integer>\"\n                }\n            ]\n       
                },\n        {\n            \"algorithm\":
                \"<string>\",\n            \"check\": \"<string>\",\n           
                \"check_attempts\": \"<integer>\",\n            \"check_body\":
                \"<string>\",\n            \"check_interval\":
                \"<integer>\",\n            \"check_passive\":
                \"<boolean>\",\n            \"check_path\":
                \"<string>\",\n            \"check_timeout\":
                \"<integer>\",\n            \"cipher_suite\":
                \"<string>\",\n            \"port\": \"<integer>\",\n           
                \"protocol\": \"<string>\",\n            \"ssl_cert\":
                \"<ssl-cert>\",\n            \"ssl_key\":
                \"<ssl-key>\",\n            \"stickiness\":
                \"<string>\",\n            \"nodes\": [\n               
                {\n                    \"address\":
                \"<ip>\",\n                    \"label\":
                \"<string>\",\n                    \"mode\":
                \"<string>\",\n                    \"weight\":
                \"<integer>\"\n                },\n               
                {\n                    \"address\":
                \"<ip>\",\n                    \"label\":
                \"<string>\",\n                    \"mode\":
                \"<string>\",\n                    \"weight\":
                \"<integer>\"\n                }\n            ]\n        }\n   
                ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
        - name: configId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Config to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                client_conn_throttle: 0
                created: '2018-01-01T00:01:01.000Z'
                hostname: nb-207-192-68-16.newark.nodebalancer.linode.com
                id: 12345
                ipv4: 12.34.56.78
                ipv6: null
                label: balancer12345
                region: us-east
                tags:
                  - example tag
                  - another example
                transfer:
                  in: 28.91200828552246
                  out: 3.5487728118896484
                  total: 32.46078109741211
                updated: '2018-03-01T00:01:01.000Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /nodebalancers/{nodeBalancerId}/configs:
    get:
      tags:
        - nodebalancers > {node Balancer Id} > configs
      summary: List Configs
      description: >
        Returns a paginated list of NodeBalancer Configs associated with this
        NodeBalancer. NodeBalancer Configs represent individual ports that this
        NodeBalancer will accept traffic on, one Config per port.


        For example, if you wanted to accept standard HTTP traffic, you would
        need a Config listening on port 80.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - algorithm: roundrobin
                    check: http_body
                    check_attempts: 3
                    check_body: it works
                    check_interval: 90
                    check_passive: true
                    check_path: /test
                    check_timeout: 10
                    cipher_suite: recommended
                    port: 80
                    protocol: http
                    ssl_cert: null
                    ssl_key: null
                    stickiness: http_cookie
                  - algorithm: roundrobin
                    check: http_body
                    check_attempts: 3
                    check_body: it works
                    check_interval: 90
                    check_passive: true
                    check_path: /test
                    check_timeout: 10
                    cipher_suite: recommended
                    port: 80
                    protocol: http
                    ssl_cert: null
                    ssl_key: null
                    stickiness: http_cookie
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - nodebalancers > {node Balancer Id} > configs
      summary: Create Config
      description: >
        Creates a NodeBalancer Config, which allows the NodeBalancer to accept
        traffic on a new port. You will need to add NodeBalancer Nodes to the
        new Config before it can actually serve requests.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"algorithm\": \"<string>\",\n    \"check\":
                \"<string>\",\n    \"check_attempts\": \"<integer>\",\n   
                \"check_body\": \"<string>\",\n    \"check_interval\":
                \"<integer>\",\n    \"check_passive\": \"<boolean>\",\n   
                \"check_path\": \"<string>\",\n    \"check_timeout\":
                \"<integer>\",\n    \"cipher_suite\": \"<string>\",\n   
                \"port\": \"<integer>\",\n    \"protocol\": \"<string>\",\n   
                \"ssl_cert\": \"<ssl-cert>\",\n    \"ssl_key\":
                \"<ssl-key>\",\n    \"stickiness\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                algorithm: roundrobin
                check: http_body
                check_attempts: 3
                check_body: it works
                check_interval: 90
                check_passive: true
                check_path: /test
                check_timeout: 10
                cipher_suite: recommended
                id: 4567
                nodebalancer_id: 12345
                nodes_status:
                  down: 0
                  up: 4
                port: 80
                protocol: http
                ssl_cert: null
                ssl_commonname: ut laboris ci
                ssl_fingerprint: qui nisi aliquip amet
                ssl_key: null
                stickiness: http_cookie
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /nodebalancers/{nodeBalancerId}:
    delete:
      tags:
        - nodebalancers > {node Balancer Id}
      summary: Delete NodeBalancer
      description: >
        Deletes a NodeBalancer.


        **This is a destructive action and cannot be undone.**


        Deleting a NodeBalancer will also delete all associated Configs and
        Nodes, although the backend servers represented by the Nodes will not be
        changed or removed. Deleting a NodeBalancer will cause you to lose
        access to the IP Addresses assigned to this NodeBalancer.
      security:
        - oauth2Auth: []
      parameters:
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - nodebalancers > {node Balancer Id}
      summary: View NodeBalancer
      description: |
        Returns a single NodeBalancer you can access.
      security:
        - oauth2Auth: []
      parameters:
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                client_conn_throttle: 0
                created: '2018-01-01T00:01:01.000Z'
                hostname: nb-207-192-68-16.newark.nodebalancer.linode.com
                id: 12345
                ipv4: 12.34.56.78
                ipv6: null
                label: balancer12345
                region: us-east
                tags:
                  - example tag
                  - another example
                transfer:
                  in: 28.91200828552246
                  out: 3.5487728118896484
                  total: 32.46078109741211
                updated: '2018-03-01T00:01:01.000Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - nodebalancers > {node Balancer Id}
      summary: Update NodeBalancer
      description: |
        Updates information about a NodeBalancer you can access.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"client_conn_throttle\": \"<integer>\",\n    \"label\":
                \"<string>\",\n    \"tags\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"transfer\": {}\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                client_conn_throttle: 0
                created: '2018-01-01T00:01:01.000Z'
                hostname: nb-207-192-68-16.newark.nodebalancer.linode.com
                id: 12345
                ipv4: 12.34.56.78
                ipv6: null
                label: balancer12345
                region: us-east
                tags:
                  - example tag
                  - another example
                transfer:
                  in: 28.91200828552246
                  out: 3.5487728118896484
                  total: 32.46078109741211
                updated: '2018-03-01T00:01:01.000Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /nodebalancers/{nodeBalancerId}/stats:
    get:
      tags:
        - nodebalancers > {node Balancer Id}
      summary: View NodeBalancer Statistics
      description: |
        Returns detailed statistics about the requested NodeBalancer.
      security:
        - oauth2Auth: []
      parameters:
        - name: nodeBalancerId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the NodeBalancer to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  connections:
                    - 63757104.15319231
                    - -70468204.18124224
                  traffic:
                    in:
                      - -2885081.349632174
                      - 6428089.232939675
                    out:
                      - 25159520.445086867
                      - -92239152.20032573
                title: linode.com - balancer12345 (12345) - day (5 min avg)
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /nodebalancers:
    get:
      tags:
        - nodebalancers
      summary: List NodeBalancers
      description: |
        Returns a paginated list of NodeBalancers you have access to.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - client_conn_throttle: 0
                    created: '2018-01-01T00:01:01.000Z'
                    hostname: nb-207-192-68-16.newark.nodebalancer.linode.com
                    id: 12345
                    ipv4: 12.34.56.78
                    ipv6: null
                    label: balancer12345
                    region: us-east
                    tags:
                      - example tag
                      - another example
                    transfer:
                      in: 28.91200828552246
                      out: 3.5487728118896484
                      total: 32.46078109741211
                    updated: '2018-03-01T00:01:01.000Z'
                  - client_conn_throttle: 0
                    created: '2018-01-01T00:01:01.000Z'
                    hostname: nb-207-192-68-16.newark.nodebalancer.linode.com
                    id: 12345
                    ipv4: 12.34.56.78
                    ipv6: null
                    label: balancer12345
                    region: us-east
                    tags:
                      - example tag
                      - another example
                    transfer:
                      in: 28.91200828552246
                      out: 3.5487728118896484
                      total: 32.46078109741211
                    updated: '2018-03-01T00:01:01.000Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - nodebalancers
      summary: Create NodeBalancer
      description: >
        Creates a NodeBalancer in the requested Region. This NodeBalancer will
        not start serving requests until it is configured.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"region\": \"<string>\",\n    \"client_conn_throttle\":
                \"<integer>\",\n    \"configs\": [\n        {\n           
                \"algorithm\": \"<string>\",\n            \"check\":
                \"<string>\",\n            \"check_attempts\":
                \"<integer>\",\n            \"check_body\":
                \"<string>\",\n            \"check_interval\":
                \"<integer>\",\n            \"check_passive\":
                \"<boolean>\",\n            \"check_path\":
                \"<string>\",\n            \"check_timeout\":
                \"<integer>\",\n            \"cipher_suite\":
                \"<string>\",\n            \"port\": \"<integer>\",\n           
                \"protocol\": \"<string>\",\n            \"ssl_cert\":
                \"<ssl-cert>\",\n            \"ssl_key\":
                \"<ssl-key>\",\n            \"stickiness\":
                \"<string>\",\n            \"nodes\": [\n               
                {\n                    \"address\":
                \"<ip>\",\n                    \"label\":
                \"<string>\",\n                    \"mode\":
                \"<string>\",\n                    \"weight\":
                \"<integer>\"\n                },\n               
                {\n                    \"address\":
                \"<ip>\",\n                    \"label\":
                \"<string>\",\n                    \"mode\":
                \"<string>\",\n                    \"weight\":
                \"<integer>\"\n                }\n            ]\n       
                },\n        {\n            \"algorithm\":
                \"<string>\",\n            \"check\": \"<string>\",\n           
                \"check_attempts\": \"<integer>\",\n            \"check_body\":
                \"<string>\",\n            \"check_interval\":
                \"<integer>\",\n            \"check_passive\":
                \"<boolean>\",\n            \"check_path\":
                \"<string>\",\n            \"check_timeout\":
                \"<integer>\",\n            \"cipher_suite\":
                \"<string>\",\n            \"port\": \"<integer>\",\n           
                \"protocol\": \"<string>\",\n            \"ssl_cert\":
                \"<ssl-cert>\",\n            \"ssl_key\":
                \"<ssl-key>\",\n            \"stickiness\":
                \"<string>\",\n            \"nodes\": [\n               
                {\n                    \"address\":
                \"<ip>\",\n                    \"label\":
                \"<string>\",\n                    \"mode\":
                \"<string>\",\n                    \"weight\":
                \"<integer>\"\n                },\n               
                {\n                    \"address\":
                \"<ip>\",\n                    \"label\":
                \"<string>\",\n                    \"mode\":
                \"<string>\",\n                    \"weight\":
                \"<integer>\"\n                }\n            ]\n        }\n   
                ],\n    \"label\": \"<string>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                client_conn_throttle: 0
                created: '2018-01-01T00:01:01.000Z'
                hostname: nb-207-192-68-16.newark.nodebalancer.linode.com
                id: 12345
                ipv4: 12.34.56.78
                ipv6: null
                label: balancer12345
                region: us-east
                tags:
                  - example tag
                  - another example
                transfer:
                  in: 28.91200828552246
                  out: 3.5487728118896484
                  total: 32.46078109741211
                updated: '2018-03-01T00:01:01.000Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/buckets/{clusterId}/{bucket}:
    delete:
      tags:
        - object-storage > buckets > {cluster Id}/{bucket}
      summary: Remove Object Storage Bucket
      description: >
        Removes a single bucket. While buckets containing objects _may_ be
        deleted by including the `force` option in the request, such operations
        will fail if the bucket contains too many objects. The recommended way
        to empty large buckets is to use the [S3 API to configure lifecycle
        policies](https://docs.ceph.com/docs/master/radosgw/bucketpolicy/#) that
        remove all objects, then delete the bucket.


        This endpoint is available for convenience. It is recommended that
        instead you use the more [fully- featured S3
        API](https://docs.ceph.com/docs/mimic/radosgw/s3/bucketops/#delete-bucket)
        directly.


        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with `/v4beta` instead of `/v4`, and be aware that this
        endpoint may receive breaking updates in the future. This notice will be
        removed when this endpoint is out of beta.
      security:
        - oauth2Auth: []
      parameters:
        - name: force
          in: query
          schema:
            type: boolean
          description: >
            If false, this operation will fail if the bucket is not empty. If
            true, this operation will attempt to remove the bucket and its
            contents; very large buckets may still return an error and require
            object deletion manually or through object lifecycle management. See
            [the S3 API
            docs](https://docs.ceph.com/docs/mimic/radosgw/s3/bucketops/#delete-bucket)
            for details.
          example: 'false'
        - name: clusterId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the cluster this bucket exists in.
          example: <string>
        - name: bucket
          in: path
          schema:
            type: string
          required: true
          description: (Required) The bucket name.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - object-storage > buckets > {cluster Id}/{bucket}
      summary: View Object Storage Bucket
      description: >
        Returns a single Object Storage Bucket.



        This endpoint is available for convenience. It is recommended that
        instead you

        use the more [fully-featured S3
        API](https://docs.ceph.com/docs/mimic/radosgw/s3/bucketops/#get-bucket)
        directly.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may receive
        breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      security:
        - oauth2Auth: []
      parameters:
        - name: clusterId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the cluster this bucket exists in.
          example: <string>
        - name: bucket
          in: path
          schema:
            type: string
          required: true
          description: (Required) The bucket name.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cluster: us-east-1
                created: '2019-01-01T01:23:45.000Z'
                hostname: example-bucket.us-east-1.linodeobjects.com
                label: example-bucket
                objects: 4
                region: us-east
                size: 123
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/buckets/{clusterId}/{bucket}/access:
    post:
      tags:
        - object-storage > buckets > {cluster Id}/{bucket}
      summary: Modify Object Storage Bucket Access
      description: >
        Allows changing basic Cross-origin Resource Sharing (CORS) and Access
        Control Level (ACL) settings.

        Only allows enabling/disabling CORS for all origins, and/or setting
        canned ACLs.

        For more fine-grained control of both systems, please use the S3 API
        directly.



        This endpoint is available for convenience. It is recommended that
        instead you

        use the more more [fully-featured S3
        API](https://docs.ceph.com/docs/mimic/radosgw/s3/bucketops/#put-bucket-acl)
        directly.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may receive
        breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"acl\": \"<string>\",\n    \"cors_enabled\":
                \"<boolean>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: clusterId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the cluster this bucket exists in.
          example: <string>
        - name: bucket
          in: path
          schema:
            type: string
          required: true
          description: (Required) The bucket name.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/buckets/{clusterId}/{bucket}/object-list:
    get:
      tags:
        - object-storage > buckets > {cluster Id}/{bucket}
      summary: List Object Storage Bucket Contents
      description: >
        Returns the contents of a bucket. The contents are paginated using a
        `marker`,

        which is the name of the last object on the previous page.  Objects may

        be filtered by `prefix` and `delimiter` as well; see Query Parameters
        for more

        information.



        This endpoint is available for convenience. It is recommended that
        instead you

        use the more [fully-featured S3
        API](https://docs.ceph.com/docs/luminous/radosgw/s3/bucketops/#get-bucket)
        directly.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may receive
        breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      security:
        - oauth2Auth: []
      parameters:
        - name: marker
          in: query
          schema:
            type: string
          description: >
            The "marker" for this request, which can be used to paginate through
            large buckets. Its value should be the value of the `next_marker`
            property returned with the last page. Listing bucket contents *does
            not* support arbitrary page access. See the `next_marker` property
            in the responses section for more details.
          example: <string>
        - name: delimiter
          in: query
          schema:
            type: string
          description: >
            The delimiter for object names; if given, object names will be
            returned up to the first occurrence of this character. This is most
            commonly used with the `/` character to allow bucket transversal in
            a manner similar to a filesystem, however any delimiter may be used.
            Use in conjunction with `prefix` to see object names past the first
            occurrence of the delimiter.
          example: <string>
        - name: prefix
          in: query
          schema:
            type: string
          description: >
            Filters objects returned to only those whose name start with the
            given prefix. Commonly used in conjunction with `delimiter` to allow
            transversal of bucket contents in a manner similar to a filesystem.
          example: <string>
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: clusterId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the cluster this bucket exists in.
          example: <string>
        - name: bucket
          in: path
          schema:
            type: string
          required: true
          description: (Required) The bucket name.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - etag: 9f254c71e28e033bf9e0e5262e3e72ab
                    is_truncated: true
                    last_modified: '2019-01-01T01:23:45.000Z'
                    name: example
                    next_marker: bd021c21-e734-4823-97a4-58b41c2cd4c8.892602.184
                    owner: bfc70ab2-e3d4-42a4-ad55-83921822270c
                    size: 123
                  - etag: 9f254c71e28e033bf9e0e5262e3e72ab
                    is_truncated: true
                    last_modified: '2019-01-01T01:23:45.000Z'
                    name: example
                    next_marker: bd021c21-e734-4823-97a4-58b41c2cd4c8.892602.184
                    owner: bfc70ab2-e3d4-42a4-ad55-83921822270c
                    size: 123
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/buckets/{clusterId}/{bucket}/object-url:
    post:
      tags:
        - object-storage > buckets > {cluster Id}/{bucket}
      summary: Create Object Storage Object URL
      description: >
        Creates a pre-signed URL to access a single Object in a bucket. This

        can be used to share objects, and also to create/delete objects by using

        the appropriate HTTP method in your request body's `method` parameter.



        This endpoint is available for convenience. It is recommended that
        instead you

        use the more [fully-featured S3
        API](https://docs.ceph.com/docs/mimic/radosgw/s3/)

        directly.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may receive
        breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"name\": \"<string>\",\n    \"method\": \"GET\",\n   
                \"content_type\": \"<string>\",\n    \"expires_in\": 3600\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: clusterId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the cluster this bucket exists in.
          example: <string>
        - name: bucket
          in: path
          schema:
            type: string
          required: true
          description: (Required) The bucket name.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                url: >-
                  https://us-east-1.linodeobjects.com/example-bucket/example?Signature=qr98TEucCntPgEG%2BsZQGDsJg93c%3D&Expires=1567609905&AWSAccessKeyId=G4YAF81XWY61DQM94SE0
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/buckets:
    get:
      tags:
        - object-storage > buckets
      summary: List Object Storage Buckets
      description: >
        Returns a paginated list of all Object Storage Buckets that you own.



        This endpoint is available for convenience. It is recommended that
        instead you

        use the more [fully-featured S3
        API](https://docs.ceph.com/docs/mimic/radosgw/s3/serviceops/) directly.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may receive
        breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - cluster: us-east-1
                    created: '2019-01-01T01:23:45.000Z'
                    hostname: example-bucket.us-east-1.linodeobjects.com
                    label: example-bucket
                    objects: 4
                    region: us-east
                    size: 123
                  - cluster: us-east-1
                    created: '2019-01-01T01:23:45.000Z'
                    hostname: example-bucket.us-east-1.linodeobjects.com
                    label: example-bucket
                    objects: 4
                    region: us-east
                    size: 123
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - object-storage > buckets
      summary: Create Object Storage Bucket
      description: >
        Creates an Object Storage Bucket in the cluster specified. If the

        bucket already exists and is owned by you, this endpoint will return a

        `200` response with that bucket as if it had just been created.



        This endpoint is available for convenience. It is recommended that
        instead you

        use the more [fully-featured S3
        API](https://docs.ceph.com/docs/mimic/radosgw/s3/bucketops/#put-bucket)
        directly.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may receive
        breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"label\": \"<string>\",\n    \"cluster\":
                \"<string>\",\n    \"acl\": \"private\",\n    \"cors_enabled\":
                false\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                cluster: us-east-1
                created: '2019-01-01T01:23:45.000Z'
                hostname: example-bucket.us-east-1.linodeobjects.com
                label: example-bucket
                objects: 4
                region: us-east
                size: 123
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/clusters:
    get:
      tags:
        - object-storage > clusters
      summary: List Clusters
      description: >
        Returns a paginated list of Object Storage Clusters that are available
        for

        use.  Users can connect to the clusters with third party clients to
        create buckets

        and upload objects.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may
        receiving breaking

        updates in the future.  This notice will be removed when this endpoint
        is out of

        beta.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - domain: us-east-1.linodeobjects.com
                    id: us-east-1
                    region: us-east
                    static_site_domain: website-us-east-1.linodeobjects.com
                    status: available
                  - domain: us-east-1.linodeobjects.com
                    id: us-east-1
                    region: us-east
                    static_site_domain: website-us-east-1.linodeobjects.com
                    status: available
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/clusters/{clusterId}:
    get:
      tags:
        - object-storage > clusters
      summary: View Cluster
      description: >
        Returns a single Object Storage Cluster.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may
        receiving breaking

        updates in the future.  This notice will be removed when this endpoint
        is out of

        beta.
      parameters:
        - name: clusterId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Cluster.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                domain: us-east-1.linodeobjects.com
                id: us-east-1
                region: us-east
                static_site_domain: website-us-east-1.linodeobjects.com
                status: available
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/keys/{keyId}:
    delete:
      tags:
        - object-storage > keys > {key Id}
      summary: Revoke Object Storage Key
      description: >
        Revokes an Object Storage Key.  This keypair will no longer be usable by
        third-party clients.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may
        receiving breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      security:
        - oauth2Auth: []
      parameters:
        - name: keyId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The key to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - object-storage > keys > {key Id}
      summary: View Object Storage Key
      description: >
        Returns a single Object Storage Key provisioned for your account.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may
        receiving breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      security:
        - oauth2Auth: []
      parameters:
        - name: keyId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The key to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                access_key: KVAKUTGBA4WTR2NSJQ81
                id: 123
                label: my-key
                secret_key: '[REDACTED]'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - object-storage > keys > {key Id}
      summary: Update an Object Storage Key
      description: >
        Updates an Object Storage Key on your account.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may
        receiving breaking

        updates in the future. This notice will be removed when this endpoint is
        out of

        beta.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: keyId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The key to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                access_key: KVAKUTGBA4WTR2NSJQ81
                id: 123
                label: my-key
                secret_key: '[REDACTED]'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /v4beta/object-storage/keys:
    get:
      tags:
        - object-storage > keys
      summary: List Object Storage Keys
      description: >
        Returns a paginated list of Object Storage Keys for authenticating to

        the Object Storage S3 API.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may
        receiving breaking

        updates in the future.  This notice will be removed when this endpoint
        is out of

        beta.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - access_key: KVAKUTGBA4WTR2NSJQ81
                    id: 123
                    label: my-key
                    secret_key: '[REDACTED]'
                  - access_key: KVAKUTGBA4WTR2NSJQ81
                    id: 123
                    label: my-key
                    secret_key: '[REDACTED]'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - object-storage > keys
      summary: Create an Object Storage Key
      description: >
        Provisions a new Object Storage Key on your account.



        **Beta**: This endpoint is in beta. Please make sure to prepend all
        requests with

        `/v4beta` instead of `/v4`, and be aware that this endpoint may
        receiving breaking

        updates in the future.  This notice will be removed when this endpoint
        is out of

        beta.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                value: '<Error: Could not resolve allOf schema'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/apps/{appId}:
    delete:
      tags:
        - profile > apps > {app Id}
      summary: Revoke App Access
      description: >
        Expires this app token. This token may no longer be used to access your
        Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: appId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The authorized app ID to manage.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - profile > apps > {app Id}
      summary: View Authorized App
      description: >
        Returns information about a single app you've authorized to access your
        Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: appId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The authorized app ID to manage.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1968-10-26T19:11:29.657Z'
                expiry: '1978-01-30T10:40:49.235Z'
                id: 123
                label: example-app
                scopes: linodes:read_only
                thumbnail_url: ex sed cupidatat ea
                website: example.org
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/apps:
    get:
      tags:
        - profile > apps
      summary: List Authorized Apps
      description: >
        This is a collection of OAuth apps that you've given access to your
        Account, and includes the level of access granted.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '1973-08-09T05:58:44.710Z'
                    expiry: '1961-09-09T19:38:00.214Z'
                    id: 123
                    label: example-app
                    scopes: linodes:read_only
                    thumbnail_url: esse cillum sunt deserunt
                    website: example.org
                  - created: '2005-09-02T05:01:06.198Z'
                    expiry: '1982-05-03T19:42:36.273Z'
                    id: 123
                    label: example-app
                    scopes: linodes:read_only
                    thumbnail_url: sint
                    website: example.org
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/devices/{deviceId}:
    delete:
      tags:
        - profile > devices > {device Id}
      summary: Revoke Trusted Device
      description: >
        Revoke an active TrustedDevice for your User.  Once a TrustedDevice is
        revoked, this device will have to log in again before accessing your
        Linode account.
      security:
        - oauth2Auth: []
      parameters:
        - name: deviceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the TrustedDevice
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - profile > devices > {device Id}
      summary: View Trusted Device
      description: |
        Returns a single active TrustedDevice for your User.
      security:
        - oauth2Auth: []
      parameters:
        - name: deviceId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the TrustedDevice
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1956-08-27T23:42:54.628Z'
                expiry: '2009-06-26T10:26:50.188Z'
                id: 123
                last_authenticated: '1953-08-08T16:57:12.014Z'
                last_remote_addr: 12.34.56.78
                user_agent: >
                  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3)
                  AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77
                  Safari/537.36 Vivaldi/2.1.1337.36
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/devices:
    get:
      tags:
        - profile > devices
      summary: List Trusted Devices
      description: >
        Returns a paginated list of active TrustedDevices for your User.
        Browsers with an active Remember Me Session are logged into your account
        until the session expires or is revoked.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '1994-11-28T11:45:37.557Z'
                    expiry: '2005-12-07T13:31:32.450Z'
                    id: 123
                    last_authenticated: '1972-08-23T22:24:35.504Z'
                    last_remote_addr: 12.34.56.78
                    user_agent: >
                      Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3)
                      AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77
                      Safari/537.36 Vivaldi/2.1.1337.36
                  - created: '2003-09-04T02:19:06.105Z'
                    expiry: '2003-01-31T03:27:03.523Z'
                    id: 123
                    last_authenticated: '2012-10-27T14:16:11.809Z'
                    last_remote_addr: 12.34.56.78
                    user_agent: >
                      Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3)
                      AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77
                      Safari/537.36 Vivaldi/2.1.1337.36
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/preferences:
    get:
      tags:
        - profile > preferences
      summary: View User Preferences
      description: >
        View a list of user preferences tied to the OAuth client that generated

        the token making the request. The user preferences endpoints allow

        consumers of the API to store arbitrary JSON data, such as a user's font

        size preference or preferred display name. User preferences are
        available

        for each OAuth client registered to your account, and as such an account
        can

        have multiple user preferences.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                key1: value1
                key2: value2
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - profile > preferences
      summary: Update User Preferences
      description: >
        Updates a user's preferences. These preferences are tied to the OAuth
        client that generated the token making the request. The user preferences
        endpoints allow consumers of the API to store arbitrary JSON data, such
        as a user's font size preference or preferred display name. An account
        may have multiple preferences. Preferences, and the pertaining request
        body, may contain any arbitrary JSON data that the user would like to
        store.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"\"<object>\""'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                key1: value1
                key2: value2
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/sshkeys/{sshKeyId}:
    delete:
      tags:
        - profile > sshkeys > {ssh Key Id}
      summary: Delete SSH Key
      description: >
        Deletes an SSH Key you have access to.


        **Note:** deleting an SSH Key will *not* remove it from any Linode or
        Disk that was deployed with `authorized_keys`. In those cases, the keys
        must be manually deleted on the Linode or Disk. This endpoint will only
        delete the key's association from your Profile.
      security:
        - oauth2Auth: []
      parameters:
        - name: sshKeyId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the SSHKey
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - profile > sshkeys > {ssh Key Id}
      summary: View SSH Key
      description: >
        Returns a single SSH Key object identified by `id` that you have access
        to view.
      security:
        - oauth2Auth: []
      parameters:
        - name: sshKeyId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the SSHKey
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1964-02-24T07:11:14.025Z'
                id: 42
                label: My SSH Key
                ssh_key: ullamco aute sunt proident
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - profile > sshkeys > {ssh Key Id}
      summary: Update SSH Key
      description: |
        Updates an SSH Key that you have permission to `read_write`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: sshKeyId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the SSHKey
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '2015-04-03T14:23:42.678Z'
                id: 42
                label: My SSH Key
                ssh_key: laborum sit consequat incididunt id
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/sshkeys:
    get:
      tags:
        - profile > sshkeys
      summary: List SSH Keys
      description: |
        Returns a collection of SSH Keys you've added to your Profile.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '1944-05-28T10:29:07.833Z'
                    id: 42
                    label: My SSH Key
                    ssh_key: enim tempor aliqua cupidatat ipsum
                  - created: '2012-07-06T14:17:51.681Z'
                    id: 42
                    label: My SSH Key
                    ssh_key: deserunt minim labore adipisicing
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - profile > sshkeys
      summary: Add SSH Key
      description: |
        Adds an SSH Key to your Account profile.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"label\": \"<string>\",\n    \"ssh_key\":
                \"<ssh-key>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1964-02-24T07:11:14.025Z'
                id: 42
                label: My SSH Key
                ssh_key: ullamco aute sunt proident
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/tokens/{tokenId}:
    delete:
      tags:
        - profile > tokens > {token Id}
      summary: Revoke Personal Access Token
      description: >
        Revokes a Personal Access Token. The token will be invalidated
        immediately, and requests using that token will fail with a 401. It is
        possible to revoke access to the token making the request to revoke a
        token, but keep in mind that doing so could lose you access to the api
        and require you to create a new token through some other means.
      security:
        - oauth2Auth: []
      parameters:
        - name: tokenId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the token to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - profile > tokens > {token Id}
      summary: View Personal Access Token
      description: |
        Returns a single Personal Access Token.
      security:
        - oauth2Auth: []
      parameters:
        - name: tokenId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the token to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '2018-01-01T00:01:01.000Z'
                expiry: '1998-09-20T16:26:09.148Z'
                id: 123
                label: linode-cli
                scopes: '*'
                token: abcdefghijklmnop
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - profile > tokens > {token Id}
      summary: Update Personal Access Token
      description: |
        Updates a Personal Access Token.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: tokenId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the token to access.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '2018-01-01T00:01:01.000Z'
                expiry: '1998-09-20T16:26:09.148Z'
                id: 123
                label: linode-cli
                scopes: '*'
                token: abcdefghijklmnop
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/tokens:
    get:
      tags:
        - profile > tokens
      summary: List Personal Access Tokens
      description: >
        Returns a paginated list of Personal Access Tokens currently active for
        your User.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '2018-01-01T00:01:01.000Z'
                    expiry: '2000-06-08T02:01:08.392Z'
                    id: 123
                    label: linode-cli
                    scopes: '*'
                    token: abcdefghijklmnop
                  - created: '2018-01-01T00:01:01.000Z'
                    expiry: '1958-08-20T16:29:15.897Z'
                    id: 123
                    label: linode-cli
                    scopes: '*'
                    token: abcdefghijklmnop
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - profile > tokens
      summary: Create Personal Access Token
      description: >
        Creates a Personal Access Token for your User. The raw token will be
        returned in the response, but will never be returned again afterward so
        be sure to take note of it. You may create a token with _at most_ the
        scopes of your current token. The created token will be able to access
        your Account until the given expiry, or until it is revoked.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"expiry\": \"<dateTime>\",\n    \"label\":
                \"<string>\",\n    \"scopes\": \"<oauth-scope>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '2018-01-01T00:01:01.000Z'
                expiry: '1998-09-20T16:26:09.148Z'
                id: 123
                label: linode-cli
                scopes: '*'
                token: abcdefghijklmnop
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile:
    get:
      tags:
        - profile
      summary: View Profile
      description: >
        Returns information about the current User. This can be used to see who
        is acting in applications where more than one token is managed. For
        example, in third-party OAuth applications.


        This endpoint is always accessible, no matter what OAuth scopes the
        acting token has.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                authorized_keys: null
                email: example-user@gmail.com
                email_notifications: true
                ip_whitelist_enabled: false
                lish_auth_method: keys_only
                referrals:
                  code: 871be32f49c1411b14f29f618aaf0c14637fb8d3
                  completed: 0
                  credit: 0
                  pending: 0
                  total: 0
                  url: >-
                    https://www.linode.com/?r=871be32f49c1411b14f29f618aaf0c14637fb8d3
                restricted: false
                timezone: US/Eastern
                two_factor_auth: true
                uid: 1234
                username: exampleUser
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - profile
      summary: Update Profile
      description: >
        Update information in your Profile.  This endpoint requires the
        "account:read_write" OAuth Scope.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"authorized_keys\": [\n        \"<string>\",\n       
                \"<string>\"\n    ],\n    \"email\": \"<email>\",\n   
                \"email_notifications\": \"<boolean>\",\n   
                \"ip_whitelist_enabled\": \"<boolean>\",\n   
                \"lish_auth_method\": \"<string>\",\n    \"restricted\":
                \"<boolean>\",\n    \"timezone\": \"<string>\",\n   
                \"two_factor_auth\": \"<boolean>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                authorized_keys: null
                email: example-user@gmail.com
                email_notifications: true
                ip_whitelist_enabled: false
                lish_auth_method: keys_only
                referrals:
                  code: 871be32f49c1411b14f29f618aaf0c14637fb8d3
                  completed: 0
                  credit: 0
                  pending: 0
                  total: 0
                  url: >-
                    https://www.linode.com/?r=871be32f49c1411b14f29f618aaf0c14637fb8d3
                restricted: false
                timezone: US/Eastern
                two_factor_auth: true
                uid: 1234
                username: exampleUser
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/grants:
    get:
      tags:
        - profile
      summary: List Grants
      description: >
        This returns a GrantsResponse describing what the acting User has been
        granted access to.  For unrestricted users, this will return a  204 and
        no body because unrestricted users have access to everything without
        grants.  This will not return information about entities you do not have
        access to.  This endpoint is useful when writing third-party OAuth
        applications to see what options you should present to the acting User.


        For example, if they do not have `global.add_linodes`, you might not
        display a button to deploy a new Linode.


        Any client may access this endpoint; no OAuth scopes are required.
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                domain:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                global:
                  account_access: read_only
                  add_domains: true
                  add_images: true
                  add_linodes: true
                  add_longview: true
                  add_nodebalancers: true
                  add_stackscripts: true
                  add_volumes: true
                  cancel_account: false
                  longview_subscription: true
                image:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                linode:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                longview:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                nodebalancer:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                stackscript:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
                volume:
                  - id: 123
                    label: example-entity
                    permissions: read_only
                  - id: 123
                    label: example-entity
                    permissions: read_only
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain
          content:
            text/plain:
              schema:
                type: string
              example: ''
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/tfa-disable:
    post:
      tags:
        - profile
      summary: Disable Two Factor Authentication
      description: >
        Disables Two Factor Authentication for your User. Once successful, login
        attempts from untrusted computers will only require a password before
        being successful. This is less secure, and is discouraged.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/tfa-enable:
    post:
      tags:
        - profile
      summary: Create Two Factor Secret
      description: >
        Generates a Two Factor secret for your User. TFA will not be enabled
        until you have successfully confirmed the code you were given with
        [tfa-enable-confirm](/api/v4/profile-tfa-enable-confirm/#post) (see
        below). Once enabled, logins from untrusted computers will be required
        to provide a TFA code before they are successful.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                expiry: '2018-03-01T00:01:01.000Z'
                secret: 5FXX6KLACOC33GTC
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /profile/tfa-enable-confirm:
    post:
      tags:
        - profile
      summary: Confirm/Enable Two Factor Authentication
      description: >
        Confirms that you can successfully generate Two Factor codes and enables
        TFA on your Account. Once this is complete, login attempts from
        untrusted computers will be required to provide a Two Factor code before
        they are successful.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"tfa_code\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                scratch: sample two factor scratch
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /regions:
    get:
      tags:
        - regions
      summary: List Regions
      description: >
        Lists the Regions available for Linode services. Not all services are
        guaranteed to be

        available in all Regions.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - capabilities:
                      - aute eu labore
                      - aliquip minim laboris
                    country: us
                    id: us-east
                  - capabilities:
                      - exercitation nisi
                      - minim voluptate
                    country: us
                    id: us-east
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /regions/{regionId}:
    get:
      tags:
        - regions
      summary: View Region
      description: |
        Returns a single Region.
      parameters:
        - name: regionId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Region to look up.
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                capabilities:
                  - Ut
                  - sunt minim in consectetur
                country: us
                id: us-east
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /support/tickets/{ticketId}/replies:
    get:
      tags:
        - support/tickets > {ticket Id} > replies
      summary: List Replies
      description: |
        Returns a collection of replies to a Support Ticket on your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: ticketId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Support Ticket.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created: '1979-09-29T06:30:39.503Z'
                    created_by: John Q. Linode
                    description: >
                      Hello,\nI'm sorry to hear that you are having trouble
                      resetting the root password of your Linode. Just to be
                      sure, have you tried to follow the instructions in our
                      online documentation? The link is here:\n
                      \nhttps://linode.com/docs/quick-answers/linode-platform/reset-the-root-password-on-your-linode/
                      \n\nIf you have, please reply with any additional steps
                      you have also taken.\n\nRegards, Linode Support Team
                    from_linode: true
                    gravatar_id: 474a1b7373ae0be4132649e69c36ce30
                    id: 11223345
                  - created: '2012-02-07T21:01:37.779Z'
                    created_by: John Q. Linode
                    description: >
                      Hello,\nI'm sorry to hear that you are having trouble
                      resetting the root password of your Linode. Just to be
                      sure, have you tried to follow the instructions in our
                      online documentation? The link is here:\n
                      \nhttps://linode.com/docs/quick-answers/linode-platform/reset-the-root-password-on-your-linode/
                      \n\nIf you have, please reply with any additional steps
                      you have also taken.\n\nRegards, Linode Support Team
                    from_linode: true
                    gravatar_id: 474a1b7373ae0be4132649e69c36ce30
                    id: 11223345
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - support/tickets > {ticket Id} > replies
      summary: Create Reply
      description: |
        Adds a reply to an existing Support Ticket.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"description\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: ticketId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Support Ticket.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                created: '1962-03-03T13:38:55.019Z'
                created_by: John Q. Linode
                description: >
                  Hello,\nI'm sorry to hear that you are having trouble
                  resetting the root password of your Linode. Just to be sure,
                  have you tried to follow the instructions in our online
                  documentation? The link is here:\n
                  \nhttps://linode.com/docs/quick-answers/linode-platform/reset-the-root-password-on-your-linode/
                  \n\nIf you have, please reply with any additional steps you
                  have also taken.\n\nRegards, Linode Support Team
                from_linode: true
                gravatar_id: 474a1b7373ae0be4132649e69c36ce30
                id: 11223345
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /support/tickets/{ticketId}:
    get:
      tags:
        - support/tickets > {ticket Id}
      summary: View Support Ticket
      description: |
        Returns a Support Ticket under your Account.
      security:
        - oauth2Auth: []
      parameters:
        - name: ticketId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Support Ticket.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                attachments:
                  - nostrud
                  - nulla sed
                closable: false
                closed: '1964-03-11T22:34:08.097Z'
                description: >
                  I'm having trouble setting the root password on my Linode. I
                  tried following the instructions but something is not working
                  and I'm not sure what I'm doing wrong. Can you please help me
                  figure out how I can reset it?
                entity:
                  id: 10400
                  label: linode123456
                  type: linode
                  url: /v4/linode/instances/123456
                gravatar_id: 474a1b7373ae0be4132649e69c36ce30
                id: 11223344
                opened: '1960-10-29T18:54:28.868Z'
                opened_by: some_user
                status: open
                summary: |
                  Having trouble resetting root password on my Linode
                updated: '1968-09-15T19:28:19.060Z'
                updated_by: some_other_user
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /support/tickets/{ticketId}/attachments:
    post:
      tags:
        - support/tickets > {ticket Id}
      summary: Create Ticket Attachment
      description: >
        Adds a file attachment to an existing Support Ticket on your Account.
        File attachments are used to assist our Support team in resolving your
        Ticket. Examples of attachments are screen shots and text files that
        provide additional information.

        Note: Accepted file extensions include: .gif, .jpg, .jpeg, .pjpg,
        .pjpeg, .tif, .tiff, .png, .pdf, or .txt.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: >
                    The local, absolute path to the file you want to attach to
                    your Support Ticket.
                  example: <string>
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data
        - name: ticketId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Support Ticket.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /support/tickets/{ticketId}/close:
    post:
      tags:
        - support/tickets > {ticket Id}
      summary: Close Support Ticket
      description: |
        Closes a Support Ticket you have access to modify.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: ticketId
          in: path
          schema:
            type: string
          required: true
          description: (Required) The ID of the Support Ticket.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /support/tickets:
    get:
      tags:
        - support/tickets
      summary: List Support Tickets
      description: >
        Returns a collection of Support Tickets on your Account. Support Tickets
        can be both tickets you open with Linode for support, as well as tickets
        generated by Linode regarding your Account.

        This collection includes all Support Tickets generated on your Account,
        with open tickets returned first.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - attachments:
                      - dolore eiusmod amet adipisicing
                      - elit en
                    closable: false
                    closed: '1994-05-22T07:23:39.434Z'
                    description: >
                      I'm having trouble setting the root password on my Linode.
                      I tried following the instructions but something is not
                      working and I'm not sure what I'm doing wrong. Can you
                      please help me figure out how I can reset it?
                    entity:
                      id: 10400
                      label: linode123456
                      type: linode
                      url: /v4/linode/instances/123456
                    gravatar_id: 474a1b7373ae0be4132649e69c36ce30
                    id: 11223344
                    opened: '1966-05-13T12:30:11.642Z'
                    opened_by: some_user
                    status: open
                    summary: |
                      Having trouble resetting root password on my Linode
                    updated: '1998-09-04T08:00:55.816Z'
                    updated_by: some_other_user
                  - attachments:
                      - commodo nulla
                      - elit
                    closable: false
                    closed: '2002-12-21T18:20:41.370Z'
                    description: >
                      I'm having trouble setting the root password on my Linode.
                      I tried following the instructions but something is not
                      working and I'm not sure what I'm doing wrong. Can you
                      please help me figure out how I can reset it?
                    entity:
                      id: 10400
                      label: linode123456
                      type: linode
                      url: /v4/linode/instances/123456
                    gravatar_id: 474a1b7373ae0be4132649e69c36ce30
                    id: 11223344
                    opened: '1958-03-30T01:17:53.411Z'
                    opened_by: some_user
                    status: open
                    summary: |
                      Having trouble resetting root password on my Linode
                    updated: '1996-05-24T05:02:19.027Z'
                    updated_by: some_other_user
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - support/tickets
      summary: Open Support Ticket
      description: >
        Open a Support Ticket.

        Only one of the ID attributes (`linode_id`, `domain_id`, etc.) can be
        set on a single Support Ticket.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"summary\": \"<string>\",\n    \"description\":
                \"<string>\",\n    \"domain_id\": \"<integer>\",\n   
                \"linode_id\": \"<integer>\",\n    \"longviewclient_id\":
                \"<integer>\",\n    \"nodebalancer_id\": \"<integer>\",\n   
                \"volume_id\": \"<integer>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                attachments:
                  - nostrud
                  - nulla sed
                closable: false
                closed: '1964-03-11T22:34:08.097Z'
                description: >
                  I'm having trouble setting the root password on my Linode. I
                  tried following the instructions but something is not working
                  and I'm not sure what I'm doing wrong. Can you please help me
                  figure out how I can reset it?
                entity:
                  id: 10400
                  label: linode123456
                  type: linode
                  url: /v4/linode/instances/123456
                gravatar_id: 474a1b7373ae0be4132649e69c36ce30
                id: 11223344
                opened: '1960-10-29T18:54:28.868Z'
                opened_by: some_user
                status: open
                summary: |
                  Having trouble resetting root password on my Linode
                updated: '1968-09-15T19:28:19.060Z'
                updated_by: some_other_user
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /tags/{label}:
    delete:
      tags:
        - tags > {label}
      summary: Delete a Tag
      description: >
        Remove a Tag from all objects and delete it.


        **Important**: You must be an unrestricted User in order to add or
        modify Tags.
      security:
        - oauth2Auth: []
      parameters:
        - name: label
          in: path
          schema:
            type: string
          required: true
          description: '(Required) '
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - tags > {label}
      summary: List Tagged Objects
      description: >
        Returns a paginated list of all objects you've tagged with the requested
        Tag. This is a mixed collection of all object types.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: label
          in: path
          schema:
            type: string
          required: true
          description: '(Required) '
          example: <string>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - data:
                      group: Linode-Group
                      label: M09s
                      region: us-east
                      type: g6-standard-2
                    type: linode
                  - data:
                      group: Linode-Group
                      label: E_uu
                      region: us-east
                      type: g6-standard-2
                    type: linode
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /tags:
    get:
      tags:
        - tags
      summary: List Tags
      description: >
        Tags are User-defined labels attached to objects in your Account, such
        as Linodes. They are used for specifying and grouping attributes of
        objects that are relevant to the User.


        This endpoint returns a paginated list of Tags on your account.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - label: example tag
                  - label: example tag
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - tags
      summary: Create New Tag
      description: >
        Creates a new Tag and optionally tags requested objects with it
        immediately.


        **Important**: You must be an unrestricted User in order to add or
        modify Tags.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"label\": \"<string>\",\n    \"domains\": [\n       
                \"<integer>\",\n        \"<integer>\"\n    ],\n    \"linodes\":
                [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n   
                \"nodebalancers\": [\n        \"<integer>\",\n       
                \"<integer>\"\n    ],\n    \"volumes\": [\n       
                \"<integer>\",\n        \"<integer>\"\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                label: example tag
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /volumes/{volumeId}:
    delete:
      tags:
        - volumes > {volume Id}
      summary: Delete Volume
      description: >
        Deletes a Volume you have permission to `read_write`.


        **Deleting a Volume is a destructive action and cannot be undone.**


        Deleting stops billing for the Volume. You will be billed for time used
        within

        the billing period the Volume was active.
      security:
        - oauth2Auth: []
      parameters:
        - name: volumeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Volume to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    get:
      tags:
        - volumes > {volume Id}
      summary: View Volume
      description: |
        Get information about a single Volume.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
        - name: volumeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Volume to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                label: my-volume
                created: '2013-03-28T14:54:47.221Z'
                filesystem_path: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
                id: 12345
                linode_id: 12346
                region: us-east
                size: 30
                status: active
                tags:
                  - example tag
                  - another example
                updated: '2016-04-30T11:03:45.232Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    put:
      tags:
        - volumes > {volume Id}
      summary: Update Volume
      description: |
        Updates a Volume that you have permission to `read_write`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"label\": \"Fc F\",\n    \"created\":
                \"1966-05-29T02:36:54.207Z\",\n    \"filesystem_path\": \"dolor
                in esse\",\n    \"id\": 20321038,\n    \"linode_id\":
                -42308003,\n    \"region\": \"cillum amet eiusmod in\",\n   
                \"size\": -1360020,\n    \"status\": \"resizing\",\n   
                \"tags\": [\n        \"exercitation nulla ea commodo
                nisi\",\n        \"esse Lorem\"\n    ],\n    \"updated\":
                \"1992-01-16T00:41:33.320Z\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: volumeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Volume to look up.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                label: my-volume
                created: '2013-03-28T14:54:47.221Z'
                filesystem_path: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
                id: 12345
                linode_id: 12346
                region: us-east
                size: 30
                status: active
                tags:
                  - example tag
                  - another example
                updated: '2016-04-30T11:03:45.232Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /volumes/{volumeId}/attach:
    post:
      tags:
        - volumes > {volume Id}
      summary: Attach Volume
      description: >
        Attaches a Volume on your Account to an existing Linode on your Account.
        In order for this request to complete successfully, your User must have
        `read_only` or `read_write` permission to the Volume and `read_write`
        permission to the Linode. Additionally, the Volume and Linode must be
        located in the same Region.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config_id\": \"<integer>\",\n    \"linode_id\":
                \"<integer>\",\n    \"persist_across_boots\": \"<boolean>\"\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: volumeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Volume to attach.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                label: my-volume
                created: '1953-12-08T13:14:41.885Z'
                filesystem_path: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
                id: 12345
                linode_id: 12346
                region: us-east
                size: 30
                status: active
                tags:
                  - example tag
                  - another example
                updated: '2003-12-15T20:01:24.270Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /volumes/{volumeId}/clone:
    post:
      tags:
        - volumes > {volume Id}
      summary: Clone Volume
      description: >
        Creates a Volume on your Account. In order for this request to complete
        successfully, your User must have the `add_volumes` grant. The new
        Volume will have the same size and data as the source Volume. Creating a
        new Volume will incur a charge on your Account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"label\": \"<string>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: volumeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Volume to clone.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /volumes/{volumeId}/detach:
    post:
      tags:
        - volumes > {volume Id}
      summary: Detach Volume
      description: >
        Detaches a Volume on your Account from a Linode on your Account. In
        order for this request to complete successfully, your User must have
        `read_write` access to the Volume and `read_write` access to the Linode.
      requestBody:
        content: {}
      security:
        - oauth2Auth: []
      parameters:
        - name: volumeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Volume to detach.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /volumes/{volumeId}/resize:
    post:
      tags:
        - volumes > {volume Id}
      summary: Resize Volume
      description: >
        Resize an existing Volume on your Account. In order for this request to
        complete successfully, your User must have the `read_write` permissions
        to the Volume.

        * Volumes can only be resized up.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"size\": \"<integer>\"\n}"'
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: volumeId
          in: path
          schema:
            type: string
          required: true
          description: (Required) ID of the Volume to resize.
          example: <integer>
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
  /volumes:
    get:
      tags:
        - volumes
      summary: List Volumes
      description: |
        Returns a paginated list of Volumes you have permission to view.
      security:
        - oauth2Auth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: The page of a collection to return.
          example: '1'
        - name: page_size
          in: query
          schema:
            type: integer
          description: The number of items to return per page.
          example: '100'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - label: my-volume
                    created: '1949-10-02T09:10:51.146Z'
                    filesystem_path: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
                    id: 12345
                    linode_id: 12346
                    region: us-east
                    size: 30
                    status: active
                    tags:
                      - example tag
                      - another example
                    updated: '1993-09-09T22:53:49.372Z'
                  - label: my-volume
                    created: '2006-03-04T20:31:08.817Z'
                    filesystem_path: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
                    id: 12345
                    linode_id: 12346
                    region: us-east
                    size: 30
                    status: active
                    tags:
                      - example tag
                      - another example
                    updated: '1994-09-21T18:17:25.398Z'
                page: 1
                pages: 1
                results: 1
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
    post:
      tags:
        - volumes
      summary: Create Volume
      description: >
        Creates a Volume on your Account. In order for this to complete
        successfully, your User must have the `add_volumes` grant. Creating a
        new Volume will start accruing additional charges on your account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"config_id\": \"<integer>\",\n    \"label\":
                \"<string>\",\n    \"linode_id\": \"<integer>\",\n   
                \"region\": \"<string>\",\n    \"size\": 20,\n    \"tags\":
                [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
      security:
        - oauth2Auth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                label: my-volume
                created: '2013-03-28T14:54:47.221Z'
                filesystem_path: /dev/disk/by-id/scsi-0Linode_Volume_my-volume
                id: 12345
                linode_id: 12346
                region: us-east
                size: 30
                status: active
                tags:
                  - example tag
                  - another example
                updated: '2016-04-30T11:03:45.232Z'
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                errors:
                  - field: fieldname
                    reason: fieldname must be a valid value
                  - field: fieldname
                    reason: fieldname must be a valid value
