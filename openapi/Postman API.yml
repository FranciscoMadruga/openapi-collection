openapi: 3.0.0
info:
  title: Postman API
  description: >-
    The Postman API enables you to programmatically access data stored in your
    Postman account.


    ## Getting started


    You can get started with the Postman API by [forking the Postman API
    collection](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork)
    to your workspace. You can then use Postman to send requests.


    ## Overview


    1. You must use a valid API Key to send requests to the API endpoints. You
    can get your API key from Postman's [integrations
    dashboard](https://go.postman.co/settings/me/api-keys).

    2. The API has [rate and usage limits](#rate-and-usage-limits).

    3. The API only responds to HTTPS-secured communications. Any requests sent
    via HTTP return an HTTP `301` redirect to the corresponding HTTPS resources.

    4. The API returns requests responses in [JSON
    format](https://en.wikipedia.org/wiki/JSON). When an API request returns an
    error, it is sent in the JSON response as an error key.

    5. The request method (verb) determines the nature of action you intend to
    perform. A request made using the `GET` method implies that you want to
    fetch something from Postman. The `POST` method implies you want to save
    something new to Postman.

    6. For all requests, API calls respond with their corresponding [HTTP status
    codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). In the
    Postman client, the status code also provides help text that details the
    possible meaning of the response code.

    7. You can access individual resources in your Postman with its unique ID
    (`uid`) value. The `uid` is a simple concatenation of the resource owner's
    user ID and the resource's ID. For example, a collection's `uid` is the
    `{{owner_id}}-{{collection_id}}` value.
        

    ## ID and UID


    All items in Postman, such as collections, workspaces, and APIs, have ID and
    UIDs:


    - An ID is the unique ID assigned to a Postman item. For example,
    `ec29121c-5203-409f-9e84-e83ffc10f226`.

    - The UID is the **full** ID of a Postman item. This value is the user ID
    concatenated with the item's unique ID. For example, in the
    `12345678-ec29121c-5203-409f-9e84-e83ffc10f226` UID:
        - `12345678` is the user's ID.
        - `ec29121c-5203-409f-9e84-e83ffc10f226` is the item's ID.

    ## Authentication


    Postman uses API keys for authentication. The API key tells the API server
    that the request came from you. Everything that you have access to in
    Postman is accessible with your API key. You can generate a Postman API key
    in the [**API keys**](https://postman.postman.co/settings/me/api-keys)
    section of your Postman account settings.


    You must include an API key in each request to the Postman API with the
    `X-Api-Key` request header. In Postman, you can store your API key as an
    [environment variable](https://www.getpostman.com/docs/environments). The
    Postman API [collection](https://www.getpostman.com/docs/collections) will
    use it to make API calls.


    ### Authentication error response


    If an API key is missing, malformed, or invalid, you will receive an HTTP
    `401 Unauthorized` response code.


    ### Using the API key as a query parameter


    Requests that accept the `X-Api-Key` request header also accept the API key
    when you send it as the `apikey` query parameter. An API key sent as part of
    the header has a higher priority when you send the key as both a request
    header and a query parameter.


    ## Rate and usage limits


    API access rate limits apply at a per-API key basis in unit time. The limit
    is **300 requests per minute**. Also, depending on your
    [plan](https://www.postman.com/pricing/), you may have usage limits. If you
    exceed either limit, your request will return an HTTP `429 Too Many
    Requests` status code.


    Each API response returns the following set of headers to help you identify
    your use status:


    | Header | Description |

    | --- | --- |

    | `X-RateLimit-Limit` | The maximum number of requests that the consumer is
    permitted to make per minute. |

    | `X-RateLimit-Remaining` | The number of requests remaining in the current
    rate limit window. |

    | `X-RateLimit-Reset` | The time at which the current rate limit window
    resets in UTC epoch seconds. |


    ## 503 response


    An HTTP `503` response from our servers indicates there is an unexpected
    spike in API access traffic. The server is usually operational within the
    next five minutes. If the outage persists or you receive any other form of
    an HTTP `5XX` error, [contact
    support](https://support.postman.com/hc/en-us/requests/new/).


    ## Support


    For help regarding accessing the Postman API, you can:


    - Visit [Postman Support](https://support.postman.com/hc/en-us) or our
    [Community and Support](https://www.postman.com/community/) sites.

    - Reach out to the [Postman community](https://community.postman.com/).

    - Submit a help request to [Postman
    support](https://support.postman.com/hc/en-us/requests/new/).
        

    ## Policies


    - [Postman Terms of Service](http://www.postman.com/legal/terms/)

    - [Postman Privacy Policy](https://www.postman.com/legal/privacy-policy/)
  version: 1.0.0
servers:
  - url: https://api.getpostman.com
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
    apikeyAuth:
      type: http
      scheme: apikey
security:
  - apikeyAuth: []
tags:
  - name: Collections
    description: >-
      The `/collections` endpoints let you manage your
      [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/).
  - name: Environments
    description: >-
      The `/environments` endpoints let you manage your
      [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
  - name: Mocks
    description: >-
      The `/mocks` endpoints lets you manage your [mock
      servers](https://learning.postman.com/docs/designing-and-developing-your-api/mocking-data/setting-up-mock/).


      ### Important


      **In Postman v10 and higher you cannot create mock servers for collections
      added to an API definition.** You can still create mock servers for
      collections that are not part of an API definition.
  - name: Monitors
    description: >-
      The `/monitors` endpoints let you manage your
      [monitors](https://learning.postman.com/docs/monitoring-your-api/intro-monitors/).


      ### Important


      **In Postman v10 and higher you cannot create monitors for collections
      added to an API definition.** You can still create monitors for
      collections that are not part of an API definition.
  - name: Workspaces
    description: >-
      The `/workspaces` endpoints let you manage your
      [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
  - name: User
    description: >-
      The `/me` endpoints let you manage information about the authenticated
      user.
  - name: Import
    description: >-
      The `/import` endpoints let you manage [importing and
      exporting](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/)
      Postman data.
  - name: Webhooks
    description: >-
      The `/webhooks` endpoints let you manage [custom
      webhooks](https://learning.postman.com/docs/running-collections/collection-webhooks/).
  - name: SCIM 2.0 - Identity
    description: >-
      Postman supports
      [SCIM](https://en.wikipedia.org/wiki/System_for_Cross-domain_Identity_Management)
      (System for Cross-domain Identity Management), which allows you to
      automate the provisioning of your team. You can deploy Postman at scale
      across your organization and control access to it with your identity
      provider.


      **Note:**


      - You **must** be a [Postman Team
      admin](http://learning.getpostman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles)
      to enable SCIM.

      - SCIM provisioning is only available with a Postman **Enterprise**
      [pricing plan](https://www.postman.com/pricing).
          

      ### Enabling SCIM provisioning in Postman


      You must [configure
      SSO](https://learning.postman.com/docs/administration/sso/admin-sso/) and
      [enable
      SCIM](http://learning.getpostman.com/docs/administration/managing-your-team/configuring-scim/#enabling-scim-provisioning)
      for your Postman team to use these endpoints.


      **Important:**


      To use SCIM, you must have only **one** SSO method configured. If you have
      more than one SSO method enabled, you **cannot** generate an SCIM API key.


      ### SCIM provisioning limitations


      You can only deactivate users with the SCIM API. You **cannot**
      permanently delete users with the API.


      ### Rate limits


      For your organization's team, Postman applies per-minute rate limits
      across all SCIM API endpoints. This helps ensure that you have the best
      experience using Postman's SCIM API. The rate limits apply as follows:


      - **Write (POST, PUT, PATCH)** — 180 requests per minute.

      - **Read (GET)** — 300 requests per minute.
          

      If your requests are limited, the API will return an HTTP `429 Too Many
      Requests` response status code.
  - name: SCIM 2.0 - Identity > User Provisioning
    description: >-
      The `/scim/v2/Users` endpoint lets you provision and manage your Postman
      users.


      **Note:**


      You can only deactivate users with the SCIM API. You **cannot**
      permanently delete users with the API.


      ### Provisioning users with the SCIM API


      - You can only deactivate users with the SCIM API. You **cannot**
      permanently delete users with the API.

      - Users created with the SCIM API are automatically created in Postman.
          - If the account's email ID does not exist, the user is also added to their organization's Postman team.
          - If the account's email ID already exists, the system sends the user an email invite to join the Postman team. After they accept the invite, the are added to the team.
      - By default, new users are given the developer role in Postman. Postman
      user roles cannot be updated via the SCIM API. You must manage user and
      group roles in Postman.
  - name: SCIM 2.0 - Identity > Group Provisioning
    description: >-
      The `/scim/v2/Groups` endpoint lets you provision and manage your Postman
      groups.
  - name: API Security
    description: >-
      The API Security endpoints let you manage the [security of your
      API](https://learning.postman.com/docs/api-governance/api-definition/api-definition-warnings/).
      API security includes ensuring you follow security and format warnings and
      schema validation.
  - name: API
    description: >-
      The API endpoints let you manage your APIs.


      ### **Important:**


      The endpoints in this folder are separated by Postman version:


      - **v10** — For APIs created or migrated in Postman v10 and higher only.
      When using these endpoints, you must pass an `Accept` header with the
      `application/vnd.api.v10+json` value.

      - **v9** — For APIs created in Postman v9 and earlier only.
  - name: API > v10
    description: >-
      The `/apis` endpoints let you manage your APIs.


      ### Important:


      - These endpoints are only available in Postman v10 and higher.

      - When using these endpoints, you must pass an `Accept` header with the
      `application/vnd.api.v10+json` value.
  - name: API > v10 > Schema
    description: >-
      The Schema endpoints let you manage your API schema. These endpoints also
      support multi-file schema.
  - name: API > v10 > Version
    description: >-
      The Version endpoints let you manage your [API's
      versions](https://learning.postman.com/docs/designing-and-developing-your-api/versioning-an-api/versioning-an-api-overview/#publishing-an-api-version).
  - name: API > v10 > Collections
    description: >-
      The Collections endpoints let you manage your collections linked to an
      API.
  - name: API > v9
    description: The `/apis` endpoints let you manage your APIs.
  - name: API > v9 > API Version
    description: >-
      The API version endpoints let you manage your [API's
      versions](https://learning.postman.com/docs/designing-and-developing-your-api/versioning-an-api/versioning-an-api-overview/).


      ### Important


      **API versions are deprecated as of Postman v10 and higher.**


      In v9 and earlier, when you create an API, the system creates a single,
      default API version. You can use this version’s ID with any endpoints that
      require an API version ID.


      In Postman v10, published versions are static representations of your API
      that consumers can reference (like releases in Postman v9). If you need to
      work on more than one major iteration of your API in Postman v10, create
      separate APIs.
  - name: API > v9 > Relations
    description: >-
      The Relations endpoints let you manage your API's relations. Relations are
      an API's connections to items such as documentation, tests, and API
      definitions.


      ### Important


      In Postman v10 and higher, we **only** support the following relation
      types:


      - `unclassified` — The relation for documentation and testing.

      - `apiDefinition` — The relation for API definitions.
  - name: API > v9 > Schema
    description: >-
      The Schema endpoints let you manage your API's definitions.


      ### Important


      **The schemas concept is deprecated as of Postman v10 and higher.**


      In Postman v10 and higher, “schemas” are now known as “API definitions”.
      You may see that API responses may return both the `schemas` and
      `apiDefinition` properties. Use the `apiDefinition` property.
  - name: API > v9 > Release
    description: >-
      The API release endpoints let you manage your API's releases.


      ### Important


      **API releases are deprecated as of Postman v10 and higher.**


      You can no longer create releases for collections in Postman v10, but API
      producers can [publish versions of an
      API](https://learning.postman.com/docs/designing-and-developing-your-api/versioning-an-api/api-versions/).
  - name: Audit Logs
    description: "The\_[Audit Logs](https://learning.postman.com/docs/administration/audit-logs/)\_endpoints let you monitor and analyze your Professional or Enterprise Postman teams.\n\n**Note:**\n\nThese endpoints are\_**only**\_available to Postman\_**Professional**\_and\_**Enterprise**\_[pricing plans](https://www.postman.com/pricing)."
  - name: Private API Network
    description: >-
      The `/private` endpoint lets you manage and work with your team's [Private
      API
      Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
paths:
  /collections:
    post:
      tags:
        - Collections
      summary: Create a collection
      description: >-
        Creates a collection using the [Postman Collection v2 schema
        format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html).
        Include a `collection` object in the request body that contains the
        following required properties:


        *   `info` — An **object** that contains the following properties:
            *   `name` — A **string** value that contains the collection's name.
            *   `schema` — A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.
        *   `item` — An **object** that contains the HTTP request and response
        information.
            *   `request` — An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.

        **Note:**


        *   For a complete list of available property values for this endpoint,
        use the following references available in the [collection.json schema
        file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
            *   `info` object — Use the `definitions.info` entry.
            *   `item` object — Use the `definitions.items` entry.
        *   For all other possible values, refer to the [collection.json schema
        file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"collection\": {\n        \"info\": {\n           
                \"name\": \"{{collectionName}}\",\n            \"schema\":
                \"{{collectionSchemaUrl}}\"\n        },\n        \"item\":
                [\n            {\n                \"request\": {}\n           
                }\n        ]\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                collection:
                  id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                  name: Test Collection
                  uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Bad Request
                  value:
                    error:
                      name: instanceFoundError
                      message: The specified item already exists.
                      details:
                        item: collection
                        id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                example-1:
                  summary: Malformed Request
                  value:
                    error:
                      name: malformedRequestError
                      message: Found 1 errors with the supplied collection.
                      details:
                        - ': must have required property ''info'''
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - Collections
      summary: Get all collections
      description: >-
        Gets all of your
        [collections](https://www.getpostman.com/docs/collections). The response
        includes all of your subscribed collections.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    collections:
                      - id: dac5eac9-148d-a32e-b76b-3edee9da28f7
                        name: Cloud API
                        owner: '12345678'
                        createdAt: '2022-04-12T10:29:46.000Z'
                        updatedAt: '2022-04-12T10:29:56.000Z'
                        uid: 12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7
                        isPublic: true
                      - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        name: Test Collection
                        owner: '12345678'
                        createdAt: '2022-01-13T10:21:46.000Z'
                        updatedAt: '2022-02-12T11:29:56.000Z'
                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                        isPublic: false
                        fork:
                          label: Test Fork
                          createdAt: '2022-06-16T19:51:44.069Z'
                          from: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                      - id: f695cab7-6878-eb55-7943-ad88e1ccfd65
                        name: Postman Echo
                        owner: '12345678'
                        createdAt: '2021-04-11T09:18:26.000Z'
                        updatedAt: '2022-05-01T15:29:32.000Z'
                        uid: 12345678-f695cab7-6878-eb55-7943-ad88e1ccfd65
                        isPublic: true
                example-1:
                  summary: Filter by Workspace
                  value:
                    collections:
                      - id: dac5eac9-148d-a32e-b76b-3edee9da28f7
                        name: Cloud API
                        owner: '12345678'
                        createdAt: '2022-04-12T10:29:46.000Z'
                        updatedAt: '2022-04-12T10:29:56.000Z'
                        uid: 12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7
                        isPublic: true
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /collections/{collectionId}:
    get:
      tags:
        - Collections
      summary: Get a collection
      description: >-
        Gets information about a collection. For a complete list of this
        endpoint's possible values, use the [collection.json schema
        file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
      parameters:
        - name: collectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    collection:
                      info:
                        name: Test Collection
                        description: >-
                          This is a test collection that makes a tiny request to
                          Postman Echo service to get the list of request
                          headers sent by a HTTP client.
                        _postman_id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        schema: >-
                          https://schema.getpostman.com/json/collection/v2.0.0/collection.json
                        updatedAt: '2022-06-16T20:21:13.000Z'
                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                      item:
                        - name: Test GET Response
                          id: 82ee981b-e19f-962a-401e-ea34ebfb4848
                          event:
                            - listen: test
                              script:
                                id: 7d2334fc-a84a-4c3d-b26c-7529afa4c0ae
                                exec:
                                  - pm.test("Status code is 200", function () {
                                  - '    pm.response.to.have.status(200);'
                                  - '});'
                                type: text/javascript
                          request:
                            url: https://echo.getpostman.com/headers
                            method: GET
                            header:
                              - key: Content-Type
                                value: application/json
                          response: []
                example-1:
                  summary: Get Collection with Access Token
                  value:
                    collection:
                      info:
                        name: Test Collection
                        description: >-
                          This is a test collection that makes a tiny request to
                          Postman Echo service to get the list of request
                          headers sent by a HTTP client.
                        _postman_id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        schema: >-
                          https://schema.getpostman.com/json/collection/v2.0.0/collection.json
                        updatedAt: '2022-06-16T20:21:13.000Z'
                        fork:
                          label: Test Fork
                          createdAt: '2022-06-16T19:51:44.069Z'
                          from: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                      item:
                        - name: Test GET Response
                          id: 82ee981b-e19f-962a-401e-ea34ebfb4848
                          event:
                            - listen: test
                              script:
                                id: 7d2334fc-a84a-4c3d-b26c-7529afa4c0ae
                                exec:
                                  - pm.test("Status code is 200", function () {
                                  - '    pm.response.to.have.status(200);'
                                  - '});'
                                type: text/javascript
                          request:
                            url: https://echo.getpostman.com/headers
                            method: GET
                            header:
                              - key: Content-Type
                                value: application/json
                          response: []
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the collection you are looking for
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    delete:
      tags:
        - Collections
      summary: Delete a collection
      description: Deletes a collection.
      parameters:
        - name: collectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                collection:
                  id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                  uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified item does not exist.
                  details:
                    item: collection
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    put:
      tags:
        - Collections
      summary: Update a collection
      description: >-
        Updates a collection using the [Postman Collection v2 schema
        format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html).
        Include a `collection` object in the request body that contains the
        following required properties:


        - `info` — An **object** that contains the following properties:
            - `name` — A **string** value that contains the collection's name.
            - `schema` — A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.
        - `item` — An **object** that contains the HTTP request and response
        information.
            - `request` — An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.

        **Note:**


        - For a complete list of available property values for this endpoint,
        use the following references available in the [collection.json schema
        file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
            - `info` object — Use the `definitions.info` entry.
            - `item` object — Use the `definitions.items` entry.
        - For all other possible values, refer to the [collection.json schema
        file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
            

        ### Important


        Use caution when using this endpoint. The system will replace the
        existing collection with the values passed in the request body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"collection\": {\n        \"info\": {\n           
                \"name\": \"{{collectionName}}\",\n            \"schema\":
                \"{{collectionSchemaUrl}}\"\n        },\n        \"item\":
                [\n            {\n                \"request\": {}\n           
                }\n        ]\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: collectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                collection:
                  id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                  name: Test Collection
                  uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Malformed Request
                  value:
                    error:
                      name: malformedRequestError
                      message: Found 2 errors with the supplied collection.
                      details:
                        - ': must have required property ''item'''
                        - 'info: must have required property ''schema'''
                example-1:
                  summary: Collection ID Mismatch
                  value:
                    error:
                      name: collectionMismatchError
                      message: >-
                        The collection ID in the path does not match the
                        collection ID in the request body.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: forbiddenError
                  message: You do not have enough permissions to perform this action.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified item does not exist.
                  details:
                    item: collection
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    patch:
      tags:
        - Collections
      summary: Update a collection name or description
      description: Updates the name or description of a collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                collection:
                  info:
                    name: '{{collectionName}}'
                    description: '{{collectionDescription}}'
      parameters:
        - name: collectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                collection:
                  id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                  name: Test Collection v2
                  description: >-
                    This is a sample collection that makes a request to the
                    Postman Echo service. It returns a list of request headers
                    sent by an HTTP client.
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: badRequest
                  message: >-
                    You can only update the name and description of a
                    collection's "info" object.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: forbiddenError
                  message: You do not have enough permissions to perform this action.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified item does not exist.
                  details:
                    item: collection
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /collections/fork/{collectionId}:
    post:
      tags:
        - Collections
      summary: Create a fork
      description: >-
        Creates a
        [fork](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork)
        from an existing collection into a workspace. Include the following
        required request body properties:


        *   `label` — The fork's label.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n\t\"label\": \"{{collectionForkName}}\"\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: workspace
          in: query
          schema:
            type: string
          description: Required. The workspace ID in which to fork the collection.
          example: '{{workspaceId}}'
        - name: collectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                collection:
                  id: 09547fef-a9a5-4e00-998b-aa563e8db69a
                  name: Test Collection
                  fork:
                    label: Test Fork
                    createdAt: '2022-06-16T19:51:44.069Z'
                    from: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                  uid: 12345678-09547fef-a9a5-4e00-998b-aa563e8db69a
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified item does not exist.
                  details:
                    item: collection
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /collections/merge:
    post:
      tags:
        - Collections
      summary: Merge a fork
      description: >-
        Merges a forked collection back into its destination collection. Include
        the following required properties in the request body:


        *   `source` — The forked collection's ID.

        *   `destination` — The destination collection's ID.
            

        You can also include the following optional properties in the request
        body:


        *   `strategy` — The fork's merge strategy. One of:
            *   `deleteSource` — The system **deletes** the forked collection after a successful merge into the destination collection.
            *   `updateSourceWithDestination` — **Default.** The system only merges the forked collection into the destination collection.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"strategy\": \"{{mergeStrategy}}\",\n    \"source\":
                \"{{forkCollectionId}}\",\n    \"destination\":
                \"{{destinationCollectionId}}\"\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                collection:
                  id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                  uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified item does not exist.
                  details:
                    item: collection
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /environments/{environmentId}:
    get:
      tags:
        - Environments
      summary: Get an environment
      description: Gets information about an environment.
      parameters:
        - name: environmentId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                environment:
                  id: 5daabc50-8451-43f6-922d-96b403b4f28e
                  name: Test Environment
                  owner: '12345678'
                  createdAt: '2020-11-05T13:59:22.000Z'
                  updatedAt: '2020-11-05T13:59:23.000Z'
                  values:
                    - key: apiKey
                      value: PMAK-1234-5678-0987-6543
                      enabled: true
                      type: secret
                  isPublic: false
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the environment you are looking for
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    delete:
      tags:
        - Environments
      summary: Delete an environment
      description: Deletes an environment.
      parameters:
        - name: environmentId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                environment:
                  id: 5daabc50-8451-43f6-922d-96b403b4f28e
                  uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified environment does not exist.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    put:
      tags:
        - Environments
      summary: Update an environment
      description: >-
        Updates an environment. Include the following properties in the request
        body:


        * `name` — A **string** that contains the environment's name.


        You can also include the following optional properties:


        * `values` — An array of objects that contains the following:
            * `key` — The variable's name.
            * `value` — The variable's value.
            * `enabled` — If true, enable the variable.
            * `type` — The variable's type. One of: `secret`, `default`, or `any`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"environment\": {\n        \"name\":
                \"{{environmentName}}\",\n        \"values\": [\n           
                {\n                \"key\":
                \"{{environmentVariableName}}\",\n                \"value\":
                \"{{environmentVariableValue}}\",\n                \"enabled\":
                \"{{boolean}}\",\n                \"type\":
                \"{{environmentType}}\"\n            }\n        ]\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                environment:
                  id: 5daabc50-8451-43f6-922d-96b403b4f28e
                  name: Test A Environment
                  uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: malformedRequestError
                  message: 'Invalid type: null (expected object) at environment.values.0'
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /environments:
    post:
      tags:
        - Environments
      summary: Create an environment
      description: >-
        Creates an environment. Include the following properties in the request
        body:


        * `name` — A **string** that contains the environment's name.


        You can also include the following properties:


        * `values` — An array of objects that contains the following:
            * `key` — The variable's name.
            * `value` — The variable's value.
            * `enabled` — If true, enable the variable.
            * `type` — The variable's type. One of: `secret`, `default`, or `any`.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"environment\": {\n        \"name\":
                \"{{environmentName}}\",\n        \"values\": [\n           
                {\n                \"key\":
                \"{{environmentVariableName}}\",\n                \"value\":
                \"{{environmentVariableValue}}\",\n                \"enabled\":
                \"{{boolean}}\",\n                \"type\":
                \"{{environmentType}}\"\n            }\n        ]\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    environment:
                      id: 5daabc50-8451-43f6-922d-96b403b4f28e
                      name: Test Environment
                      uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                example-1:
                  summary: Create Environment in a Workspace
                  value:
                    environment:
                      id: 5daabc50-8451-43f6-922d-96b403b4f28e
                      name: Test Environment
                      uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: malformedRequestError
                  message: Found 1 errors with the supplied environment.
                  details:
                    - 'environment: must have required property ''name'''
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: forbiddenError
                  message: You are not permitted to perform the action.
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - Environments
      summary: Get all environments
      description: "Gets information about all of your\_[environments](https://learning.postman.com/docs/sending-requests/managing-environments/)."
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    environments:
                      - id: 5daabc50-8451-43f6-922d-96b403b4f28e
                        name: Test Environment
                        createdAt: '2020-09-23T14:31:18.000Z'
                        updatedAt: '2020-12-04T14:13:40.000Z'
                        owner: '12345678'
                        uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                        isPublic: false
                      - id: 7d786cc8-142b-4d62-b5a5-872afc37ad16
                        name: Environment Scanner
                        createdAt: '2020-02-04T19:34:23.000Z'
                        updatedAt: '2020-08-12T13:34:06.000Z'
                        owner: '12345678'
                        uid: 12345678-7d786cc8-142b-4d62-b5a5-872afc37ad16
                        isPublic: false
                example-1:
                  summary: Filter by Workspace
                  value:
                    environments:
                      - id: 5daabc50-8451-43f6-922d-96b403b4f28e
                        name: Test Environment
                        createdAt: '2020-09-23T14:31:18.000Z'
                        updatedAt: '2020-12-04T14:13:40.000Z'
                        owner: '12345678'
                        uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                        isPublic: false
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /mocks/{mockId}/server-responses/{serverResponseId}:
    put:
      tags:
        - Mocks
      summary: Update a server response
      description: >-
        Updates a mock server's server stub. Include at least one of the
        following properties in the request body:


        *   `name` — A **string** that contains the server response's name.

        *   `statusCode` — A **string** that contains the server stub's response
        code. This property only accepts [5xx
        values](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).

        *   `headers` — An **array of objects** that contains the server stub's
        headers:
            *   `key` — A **string** that contains the header's key.
            *   `value` — A **string** that contains the header key's value. This value defines the corresponding value for the header key.
        *   `body` — A **string** that contains a response body that returns
        when you call the mock server.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                serverResponse:
                  name: '{{serverStubName}}'
                  statusCode: '{{statusCode}}'
                  headers:
                    - key: '{{headerKey}}'
                      value: '{{headerValue}}'
                  body: '{{serverStubBody}}'
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
        - name: serverResponseId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                createdAt: '2022-08-02T15:08:03.000Z'
                updatedAt: '2022-08-02T15:58:12.000Z'
                id: 965cdd16-fe22-4d96-a161-3d05490ac421
                name: Service Unavailable
                statusCode: 503
                headers:
                  - key: Content-type
                    value: application/json
                language: json
                body: |-
                  {
                      "message": "Service is temporarily unavailable due to maintenance. Please reach out to support if the problem persists."
                  }
                createdBy: '12345678'
                updatedBy: '12345678'
                mock: e3d951bf-873f-49ac-a658-b2dcb91d3289
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: paramMissingError
                  message: Parameter is missing in the request.
                  details:
                    param: serverResponse
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - Mocks
      summary: Get a server response
      description: Gets information about a mock server's server stub.
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
        - name: serverResponseId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                createdAt: '2022-08-02T15:08:03.000Z'
                updatedAt: '2022-08-02T15:08:03.000Z'
                id: 965cdd16-fe22-4d96-a161-3d05490ac421
                name: Internal Server Error
                statusCode: 500
                headers: []
                language: null
                body: |-
                  {
                      "message": "Something went wrong; try again later."
                  }
                createdBy: '20891195'
                updatedBy: '20891195'
                mock: 32cd624d-9986-4f20-9048-89252f722269
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: serverResponseNotFoundError
                  message: >-
                    We could not find the mock server response you are looking
                    for.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    delete:
      tags:
        - Mocks
      summary: Delete a server response
      description: Deletes a mock server's server response.
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
        - name: serverResponseId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                id: bf6bbf95-bebb-44ba-8edb-1f096f905774
                name: Service Unavailable
                statusCode: 503
                headers:
                  - key: Content-Type
                    value: application/json
                language: json
                body: |-
                  {
                      "message": "Service is temporarily unavailable due to maintenance. If the problem persists, reach out to support."
                  }
                createdBy: '1'
                updatedBy: '1'
                createdAt: '2022-05-02T09:38:04.000Z'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: serverResponseNotFoundError
                  message: >-
                    We could not find the mock server response you are looking
                    for.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /mocks/{mockId}:
    get:
      tags:
        - Mocks
      summary: Get a mock server
      description: Gets information about a mock server.
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                mock:
                  id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                  owner: '12345678'
                  uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                  collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                  mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                  name: Test Mock
                  config:
                    headers: []
                    matchBody: false
                    matchQueryParams: true
                    matchWildcards: true
                    delay:
                      type: fixed
                      duration: 140000
                    serverResponseId: null
                  createdAt: '2022-07-25T20:54:30.000Z'
                  updatedAt: '2022-07-25T20:54:30.000Z'
                  isPublic: false
                  environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified mock does not exist.
                  details: {}
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    delete:
      tags:
        - Mocks
      summary: Delete a mock server
      description: Deletes a mock server.
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                mock:
                  id: 0fca2246-c108-41f5-8454-cc032def329f
                  uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified mock does not exist.
                  details: {}
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    put:
      tags:
        - Mocks
      summary: Update a mock server
      description: >-
        Updates a mock server. Include the `mock` object in the request body
        with one or more of the following properties:


        *   `name` — A **string** that contains the mock server's name.

        *   `environment` — A **string** that contains the environment UID.

        *   `private` — A **boolean** value that, if true, sets the mock server
        as private.

        *   `versionTag` — A **string** that contains the API's version tag ID.

        *   `config` — An **object** that contains the following properties:
            *   `serverResponseId` — A **string** that contains the server response ID. This sets the given server response as the default response for each request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                mock:
                  name: '{{mockName}}'
                  environment: '{{environmentUid}}'
                  private: <boolean>
                  versionTag: '{{apiVersionTagId}}'
                  config:
                    serverResponseId: '{{serverResponseId}}'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: mockId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    mock:
                      id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                      owner: '12345678'
                      uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                      collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                      mockUrl: >-
                        https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                      name: Test Mock
                      config:
                        headers: []
                        matchBody: false
                        matchQueryParams: true
                        matchWildcards: true
                      createdAt: '2022-06-09T19:38:06.000Z'
                      updatedAt: '2022-06-13T18:55:25.000Z'
                      environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                example-1:
                  summary: Activate a Server Response
                  value:
                    mock:
                      id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                      owner: '12345678'
                      uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                      collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                      mockUrl: >-
                        https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                      name: Test Mock
                      config:
                        headers: []
                        matchBody: false
                        matchQueryParams: true
                        matchWildcards: true
                        delay: null
                        serverResponseId: 9a291bbe-dc0a-44ba-a3c8-6dbd06a61460
                      createdAt: '2022-06-09T19:38:06.000Z'
                      updatedAt: '2022-06-13T18:55:25.000Z'
                      environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                example-2:
                  summary: Deactivate a Server Response
                  value:
                    mock:
                      id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                      owner: '12345678'
                      uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                      collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                      mockUrl: >-
                        https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                      name: Test Mock
                      config:
                        headers: []
                        matchBody: false
                        matchQueryParams: true
                        matchWildcards: true
                        delay: null
                        serverResponseId: null
                      createdAt: '2022-06-09T19:38:06.000Z'
                      updatedAt: '2022-06-13T18:55:25.000Z'
                      environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /mocks:
    post:
      tags:
        - Mocks
      summary: Create a mock server
      description: >-
        **In Postman v10 and higher you cannot create mocks for collections
        added to an API definition.**


        Creates a mock server in a collection. Include a `mock` object in the
        request body that contains following properties:


        - `collection` — A **string** that contains the collection ID.
            

        You can include the following optional properties in the request body:


        - `environment` — A **string** that contains the environment ID to
        associate with the mock server.

        - `name` — A **string** that contains the the mock server's name.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"mock\": {\n\t\t\"collection\":
                \"{{collectionId}}\",\n\t\t\"environment\":
                \"{{environmentId}}\",\n        \"name\":
                \"{{mockName}}\"\n\t}\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                mock:
                  id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                  owner: '12345678'
                  uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                  collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                  mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                  name: Test Mock
                  config:
                    headers: []
                    matchBody: false
                    matchQueryParams: true
                    matchWildcards: true
                    delay: null
                    serverResponseId: null
                  createdAt: '2022-06-09T19:00:39.000Z'
                  updatedAt: '2022-06-09T19:00:39.000Z'
                  environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: paramMissingError
                  message: Parameter is missing in the request.
                  details:
                    param:
                      - collection
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - Mocks
      summary: Get all mock servers
      description: Gets all mock servers.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                mocks:
                  - id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                    owner: '12345678'
                    uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                    collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                    name: Test Mock
                    config:
                      headers: []
                      matchBody: false
                      matchQueryParams: true
                      matchWildcards: true
                      delay:
                        type: fixed
                        duration: 140000
                      serverResponseId: null
                    createdAt: '2022-07-25T20:54:30.000Z'
                    updatedAt: '2022-07-25T20:54:30.000Z'
                    isPublic: false
                    environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /mocks/{mockId}/unpublish:
    delete:
      tags:
        - Mocks
      summary: Unpublish a mock server
      description: >-
        Unpublishes a mock server. Unpublishing a mock server sets its **Access
        Control** configuration setting to private.
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                mock:
                  id: e3d951bf-873f-49ac-a658-b2dcb91d3289
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: mockAlreadyUnpublishedError
                  message: This mock has already been deleted.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /mocks/{mockId}/server-responses:
    get:
      tags:
        - Mocks
      summary: Get all server responses
      description: Gets all of a mock server's server responses.
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 965cdd16-fe22-4d96-a161-3d05490ac421
                  name: Internal Server Error
                  statusCode: 500
                  createdAt: '2022-08-02T14:57:44.000Z'
                  updatedAt: '2022-08-02T14:57:44.000Z'
                  createdBy: '12345678'
                  updatedBy: '12345678'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified mock does not exist.
                  details: {}
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    post:
      tags:
        - Mocks
      summary: Create a server response
      description: >-
        Creates a server response. Server responses let you simulate 5xx
        server-level responses, such as 500 or 503.


        Server-level responses are agnostic to application-level logic. Server
        responses let you simulate this behavior on a mock server. You do not
        need to define each error for all exposed paths on the mock server.


        If you set a server response as active, then all the calls to the mock
        server return with that active server response.


        **Note:**


        You can create multiple server responses for a mock server, but only one
        mock server can be set as active.


        You must include the following properties in the request body:


        \*   `name` — A **string** that contains the server response's name.

        \*   `statusCode` — An **integer** that contains the server stub's 5xx
        response code. This property **only** accepts [5xx
        values](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).
            

        You can also include the following optional properties:


        \*   `headers` — An **array of objects** that contains the server stub's
        headers:
            \*   `key` — A **string** that contains the header's key.
            \*   `value` — A **string** that contains the header key's value. This value defines the corresponding value for the header key.
        \*   `body` — A **string** that contains a response body that returns
        when you call the mock server.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                serverResponse:
                  name: '{{serverStubName}}'
                  statusCode: '{{statusCode}}'
                  headers:
                    - key: '{{headerKey}}'
                      value: '{{headerValue}}'
                  body: '{{serverStubBody}}'
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                createdAt: '2022-08-02T15:08:03.000Z'
                updatedAt: '2022-08-02T15:08:03.000Z'
                id: 965cdd16-fe22-4d96-a161-3d05490ac421
                name: Internal Server Error
                statusCode: 500
                headers: []
                language: null
                body: |-
                  {
                      "message": "Something went wrong; try again later."
                  }
                createdBy: '20891195'
                updatedBy: '20891195'
                mock: 32cd624d-9986-4f20-9048-89252f722269
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: paramMissingError
                  message: Parameter is missing in the request.
                  details:
                    param:
                      - statusCode
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /mocks/{mockId}/publish:
    post:
      tags:
        - Mocks
      summary: Publish a mock server
      description: >-
        Publishes a mock server. Publishing a mock server sets its **Access
        Control** configuration setting to public.
      requestBody:
        content: {}
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                mock:
                  id: e3d951bf-873f-49ac-a658-b2dcb91d3289
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: mockAlreadyPublishedError
                  message: This mock is already public.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /mocks/{mockId}/call-logs:
    get:
      tags:
        - Mocks
      summary: Get a mock server's call logs
      description: >-
        Gets a mock server's call logs. You can get a maximum of 6.5MB of call
        logs **or** a total of 100 call logs, whichever limit is met first in
        one API call.


        Call logs contain exchanged request and response data made to mock
        servers. The logs provide visibility into how the mock servers are being
        used. You can log data to debug, test, analyze, and more, depending upon
        the use case.
      parameters:
        - name: mockId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Fri, 10 Jun 2022 19:10:52 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '120'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx
            x-frame-options:
              schema:
                type: string
                example: SAMEORIGIN
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            x-srv-trace:
              schema:
                type: string
                example: v=1;t=7b522a87c70459d8
            x-srv-span:
              schema:
                type: string
                example: v=1;s=08e5bf465e218638
            ETag:
              schema:
                type: string
                example: W/"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs"
            Vary:
              schema:
                type: string
                example: Accept-Encoding
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    call-logs:
                      - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                        responseName: >-
                          Double check your method and the request path and try
                          again.
                        servedAt: '2022-01-17T06:19:30.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: error
                          statusCode: 404
                      - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                        responseName: Bad request
                        servedAt: '2022-01-17T06:19:22.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 400
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                      - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                        responseName: Get filtered list of Animals
                        servedAt: '2022-01-17T06:18:26.000Z'
                        request:
                          method: GET
                          path: /animals?type=dog
                        response:
                          type: success
                          statusCode: 200
                      - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                        responseName: Get Animals
                        servedAt: '2022-01-17T06:18:06.000Z'
                        request:
                          method: GET
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                    meta:
                      nextCursor: null
                example-1:
                  summary: Filter by Limit
                  value:
                    call-logs:
                      - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                        responseName: >-
                          Double check your method and the request path and try
                          again.
                        servedAt: '2022-01-17T06:19:30.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: error
                          statusCode: 404
                      - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                        responseName: Bad request
                        servedAt: '2022-01-17T06:19:22.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 400
                    meta:
                      nextCursor: >-
                        eyJzY2hlbWUiOiJjdXJzb3JfcGFnaW5hdGlvbklkIiwiZGlyZWN0aW9uVHlwZSI6Im5leHQiLCJwaXZvdCI6InBhZ2luYXRpb25JZCIsInZhbHVlIjoxNjQyNDAwMzU2MDAwNTc5fQ==
                example-2:
                  summary: Filter by Cursor
                  value:
                    call-logs:
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                      - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                        responseName: Get filtered list of Animals
                        servedAt: '2022-01-17T06:18:26.000Z'
                        request:
                          method: GET
                          path: /animals?type=dog
                        response:
                          type: success
                          statusCode: 200
                      - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                        responseName: Get Animals
                        servedAt: '2022-01-17T06:18:06.000Z'
                        request:
                          method: GET
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                    meta:
                      nextCursor: null
                example-3:
                  summary: Filter by a Date Range
                  value:
                    call-logs:
                      - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                        responseName: >-
                          Double check your method and the request path and try
                          again.
                        servedAt: '2022-01-17T06:19:30.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: error
                          statusCode: 404
                      - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                        responseName: Bad request
                        servedAt: '2022-01-17T06:19:22.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 400
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                      - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                        responseName: Get filtered list of Animals
                        servedAt: '2022-01-17T06:18:26.000Z'
                        request:
                          method: GET
                          path: /animals?type=dog
                        response:
                          type: success
                          statusCode: 200
                      - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                        responseName: Get Animals
                        servedAt: '2022-01-17T06:18:06.000Z'
                        request:
                          method: GET
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                    meta:
                      nextCursor: null
                example-4:
                  summary: Filter by Date Since
                  value:
                    call-logs:
                      - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                        responseName: >-
                          Double check your method and the request path and try
                          again.
                        servedAt: '2022-01-17T06:19:30.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: error
                          statusCode: 404
                      - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                        responseName: Bad request
                        servedAt: '2022-01-17T06:19:22.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 400
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                    meta:
                      nextCursor: null
                example-5:
                  summary: Filter by responseStatusCode
                  value:
                    call-logs:
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                      - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                        responseName: Get filtered list of Animals
                        servedAt: '2022-01-17T06:18:26.000Z'
                        request:
                          method: GET
                          path: /animals?type=dog
                        response:
                          type: success
                          statusCode: 200
                      - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                        responseName: Get Animals
                        servedAt: '2022-01-17T06:18:06.000Z'
                        request:
                          method: GET
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                    meta:
                      nextCursor: null
                example-6:
                  summary: Filter by responseType
                  value:
                    call-logs:
                      - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                        responseName: Bad request
                        servedAt: '2022-01-17T06:19:22.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 400
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                      - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                        responseName: Get filtered list of Animals
                        servedAt: '2022-01-17T06:18:26.000Z'
                        request:
                          method: GET
                          path: /animals?type=dog
                        response:
                          type: success
                          statusCode: 200
                      - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                        responseName: Get Animals
                        servedAt: '2022-01-17T06:18:06.000Z'
                        request:
                          method: GET
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                    meta:
                      nextCursor: null
                example-7:
                  summary: Filter by requestMethod
                  value:
                    call-logs:
                      - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                        responseName: >-
                          Double check your method and the request path and try
                          again.
                        servedAt: '2022-01-17T06:19:30.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: error
                          statusCode: 404
                      - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                        responseName: Bad request
                        servedAt: '2022-01-17T06:19:22.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 400
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                    meta:
                      nextCursor: null
                example-8:
                  summary: Filter by requestPath
                  value:
                    call-logs:
                      - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                        responseName: Get filtered list of Animals
                        servedAt: '2022-01-17T06:18:26.000Z'
                        request:
                          method: GET
                          path: /animals?type=dog
                        response:
                          type: success
                          statusCode: 200
                    meta:
                      nextCursor: null
                example-9:
                  summary: Sort by servedAt
                  value:
                    call-logs:
                      - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                        responseName: Get Animals
                        servedAt: '2022-01-17T06:18:06.000Z'
                        request:
                          method: GET
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                      - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                        responseName: Get filtered list of Animals
                        servedAt: '2022-01-17T06:18:26.000Z'
                        request:
                          method: GET
                          path: /animals?type=dog
                        response:
                          type: success
                          statusCode: 200
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 200
                      - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                        responseName: Bad request
                        servedAt: '2022-01-17T06:19:22.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: success
                          statusCode: 400
                      - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                        responseName: >-
                          Double check your method and the request path and try
                          again.
                        servedAt: '2022-01-17T06:19:30.000Z'
                        request:
                          method: POST
                          path: /animals
                        response:
                          type: error
                          statusCode: 404
                    meta:
                      nextCursor: null
                example-10:
                  summary: Filter by Header and Body Data
                  value:
                    call-logs:
                      - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                        responseName: >-
                          Double check your method and the request path and try
                          again.
                        servedAt: '2022-01-17T06:19:30.000Z'
                        request:
                          method: POST
                          path: /animals
                          headers:
                            - key: content-length
                              value: '50'
                            - key: x-mock-match-request-body
                              value: 'true'
                            - key: content-type
                              value: application/json
                          body:
                            mode: raw
                            data: '{"type":"hamster","breed":"Syrian Hamster"}'
                        response:
                          type: error
                          statusCode: 404
                          headers: []
                          body:
                            data: >-
                              {"error":{"name":"mockRequestNotFoundError","message":"Double
                              check your method and the request path and try
                              again."}}
                      - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                        responseName: Bad request
                        servedAt: '2022-01-17T06:19:22.000Z'
                        request:
                          method: POST
                          path: /animals
                          headers:
                            - key: content-length
                              value: '69'
                            - key: x-mock-match-request-body
                              value: 'true'
                            - key: content-type
                              value: application/json
                          body:
                            mode: raw
                            data: >-
                              {"type":"hamster","breed":"Syrian
                              Hamster","age":"1 month"}
                        response:
                          type: success
                          statusCode: 400
                          headers:
                            - description:
                                content: ''
                                type: text/plain
                              key: Content-Type
                              value: application/json
                          body:
                            data: "{\n\t\"message\": \"Malformed request. You need to send gender as part of the request.\"\n}"
                      - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                        responseName: Successful addition of animals to the store
                        servedAt: '2022-01-17T06:19:16.000Z'
                        request:
                          method: POST
                          path: /animals
                          headers:
                            - key: content-length
                              value: '88'
                            - key: x-mock-match-request-body
                              value: 'true'
                            - key: content-type
                              value: application/json
                          body:
                            mode: raw
                            data: >-
                              {"type":"hamster","breed":"Syrian
                              Hamster","age":"1 month","gender":"male"}
                        response:
                          type: success
                          statusCode: 200
                          headers:
                            - description:
                                content: ''
                                type: text/plain
                              key: Content-Type
                              value: application/json
                          body:
                            data: "{\n\t\"message\": \"Animal added successfully to the store\"\n}"
                      - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                        responseName: Get filtered list of Animals
                        servedAt: '2022-01-17T06:18:26.000Z'
                        request:
                          method: GET
                          path: /animals?type=dog
                          headers: []
                          body: {}
                        response:
                          type: success
                          statusCode: 200
                          headers:
                            - description:
                                content: ''
                                type: text/plain
                              key: Content-Type
                              value: application/json
                          body:
                            data: "[\n\t{\n\t\t\"type\": \"dog\",\n\t\t\"breed\": \"German Sheperd\",\n\t\t\"age\": \"6 months\",\n\t\t\"gender\": \"male\"\n\t},\n\t{\n\t\t\"type\": \"dog\",\n\t\t\"breed\": \"Bulldog\",\n\t\t\"age\": \"1 year\",\n\t\t\"gender\": \"female\"\n\t}\n]"
                      - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                        responseName: Get Animals
                        servedAt: '2022-01-17T06:18:06.000Z'
                        request:
                          method: GET
                          path: /animals
                          headers: []
                          body: {}
                        response:
                          type: success
                          statusCode: 200
                          headers:
                            - description:
                                content: ''
                                type: text/plain
                              key: Content-Type
                              value: application/json
                          body:
                            data: "[\n\t{\n\t\t\"type\": \"dog\",\n\t\t\"breed\": \"German Sheperd\",\n\t\t\"age\": \"6 months\",\n\t\t\"gender\": \"male\"\n\t},\n\t{\n\t\t\"type\": \"dog\",\n\t\t\"breed\": \"Bulldog\",\n\t\t\"age\": \"1 year\",\n\t\t\"gender\": \"female\"\n\t},\n\t{\n\t\t\"type\": \"cat\",\n\t\t\"breed\": \"Persian cat\",\n\t\t\"age\": \"3 months\",\n\t\t\"gender\": \"female\"\n\t}\n]"
                    meta:
                      nextCursor: null
        '429':
          description: Too Many Requests
          headers:
            Date:
              schema:
                type: string
                example: Fri, 10 Jun 2022 19:10:52 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '120'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx
            x-frame-options:
              schema:
                type: string
                example: SAMEORIGIN
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            x-srv-trace:
              schema:
                type: string
                example: v=1;t=7b522a87c70459d8
            x-srv-span:
              schema:
                type: string
                example: v=1;s=08e5bf465e218638
            ETag:
              schema:
                type: string
                example: W/"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs"
            Vary:
              schema:
                type: string
                example: Accept-Encoding
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /monitors:
    post:
      tags:
        - Monitors
      summary: Create a monitor
      description: >-
        **In Postman v10 and higher you cannot create monitors for collections
        added to an API definition.**


        Creates a monitor. Include the following properties in the request body:


        - `name` — A **string** value that contains the monitor's name.

        - `schedule` — An **object** that contains the following properties:
            - `cron` — A **string** value the monitor's run frequency. At this time you can only create monitors with limited schedules. For information about the available schedules, see our [Postman Monitors](https://monitor.getpostman.com) collection. See the table below for cron patterns.
            - `timezone` — A string value that contains the monitor's [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
        - `collection` — A **string** value that contains the monitor's
        associated collection unique ID.

        - `environment` — A **string** value that contains the monitor's
        associated environment unique ID.
            

        ### Cron patterns


        | Frequency | Cron Pattern |

        | --- | --- |

        | Every 5 minutes | `\\\*/5 \\\* \\\* \\\* \\\*` |

        | Every 30 minutes | `\\\*/30 \\\* \\\* \\\* \\\*` |

        | Every Hour | `0 \\\*/1 \\\* \\\* \\\*` |

        | Every 6 Hours | `0 \\\*/6 \\\* \\\* \\\*` |

        | Every day at 5pm | `0 17 \\\* \\\* \\\*` |

        | Every Monday at 12pm | `0 12 \\\* \\\* MON` |

        | Every weekday (Monday - Friday) at 6am | `0 6 \\\* \\\* MON-FRI` |
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n  \"monitor\": {\n    \"name\": \"{{monitorName}}\",\n   
                \"schedule\": {\n      \"cron\":
                \"{{cronFrequencyPattern}}\",\n      \"timezone\":
                \"{{monitorTimezone}}\"\n    },\n    \"collection\":
                \"{{collectionUid}}\",\n    \"environment\":
                \"{{environmentUid}}\"\n  }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    monitor:
                      id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                      name: Test Monitor
                      uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                example-1:
                  summary: Create Monitor in a Workspace
                  value:
                    monitor:
                      id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                      name: Test Monitor
                      uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Invalid Cron Pattern
                  value:
                    error:
                      name: cronPatternNotAllowedError
                      message: >-
                        The specified cron pattern is not allowed. Please check
                        https://monitor.getpostman.com for the allowed
                        schedules.
                      details:
                        pattern: '* * * * *'
                example-1:
                  summary: Invalid Collection UID
                  value:
                    error:
                      name: invalidUidError
                      message: The specified uid is invalid.
                      details:
                        param: collection
                        uid: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                example-2:
                  summary: Invalid Environment UID
                  value:
                    error:
                      name: invalidUidError
                      message: The specified uid is invalid.
                      details:
                        param: environment
                        uid: 5daabc50-8451-43f6-922d-96b403b4f28e
                example-3:
                  summary: Invalid Timezone
                  value:
                    error:
                      name: invalidParamsError
                      message: The request had invalid parameters
                      details:
                        param: schedule.timezone
                example-4:
                  summary: Missing Parameter
                  value:
                    error:
                      name: paramMissingError
                      message: Parameter is missing in the request.
                      details:
                        param:
                          - name
                example-5:
                  summary: Forbidden Error
                  value:
                    error:
                      name: forbiddenError
                      message: >-
                        You need read access to this collection in order to
                        perform this action.
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - Monitors
      summary: Get all monitors
      description: Gets all monitors.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                monitors:
                  - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    name: Test Monitor
                    uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    owner: 12345678
                  - id: 1e6b6cb7-f13d-4000-acb7-0695757174a8
                    name: Postman Echo Monitor
                    uid: 87654321-1e6b6cb7-f13d-4000-acb7-0695757174a8
                    owner: 87654321
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /monitors/{monitorId}/run:
    post:
      tags:
        - Monitors
      summary: Run a monitor
      description: Runs a monitor and returns its run results.
      requestBody:
        content: {}
      parameters:
        - name: monitorId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Monitor Run Failed
                  value:
                    run:
                      info:
                        jobId: 1ecee76a-e14e-47c0-bddc-256bf690c407
                        monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                        name: Test Monitor
                        collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                        environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                        status: failed
                        startedAt: '2022-06-17T20:00:41.659Z'
                        finishedAt: '2022-06-17T20:00:42.693Z'
                      stats:
                        assertions:
                          total: 1
                          failed: 1
                        requests:
                          total: 1
                          failed: 0
                      executions:
                        - id: 1
                          item:
                            name: Sample POST Request
                          request:
                            method: POST
                            url: http://echo.getpostman.com/post
                            headers:
                              Content-Type: application/json
                              User-Agent: PostmanRuntime/7.29.0
                              Accept: '*/*'
                              Cache-Control: no-cache
                              Postman-Token: null
                              Host: echo.getpostman.com
                              Accept-Encoding: gzip, deflate, br
                              Connection: keep-alive
                              Content-Length: '0'
                            body:
                              contentLength: 0
                            timestamp: '2022-06-17T20:00:42.423Z'
                          response:
                            code: 200
                            body:
                              contentLength: 50
                            responseTime: 15
                            responseSize: 50
                            headers:
                              Date: Fri, 17 Jun 2022 20:00:42 GMT
                              Content-Type: text/plain
                              Content-Length: '50'
                              Connection: keep-alive
                              Server: null
                      failures: []
                example-1:
                  summary: Monitor Run with Errors
                  value:
                    run:
                      info:
                        jobId: 1ecee76a-e14e-47c0-bddc-256bf690c407
                        monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                        name: Test Monitor
                        collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                        environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                        status: error
                        startedAt: '2022-06-17T20:04:47.183Z'
                        finishedAt: '2022-06-17T20:04:48.858Z'
                      stats:
                        assertions:
                          total: 4
                          failed: 2
                        requests:
                          total: 4
                          failed: 3
                      executions:
                        - id: 1
                          item:
                            name: Sample GET Request
                          request:
                            method: GET
                            url: >-
                              https://example.com/search?format=json&state=&city=&country=
                            headers:
                              User-Agent: PostmanRuntime/7.29.0
                              Accept: '*/*'
                              Cache-Control: no-cache
                              Postman-Token: null
                              Host: example.com
                              Accept-Encoding: gzip, deflate, br
                              Connection: keep-alive
                            body:
                              contentLength: 0
                            timestamp: '2022-06-17T20:04:47.926Z'
                          response:
                            code: 200
                            body:
                              contentLength: 2
                            responseTime: 257
                            responseSize: 2
                            headers:
                              Server: null
                              Date: Fri, 17 Jun 2022 20:04:47 GMT
                              Content-Type: application/json; charset=UTF-8
                              Transfer-Encoding: chunked
                              Connection: keep-alive
                              Keep-Alive: null
                              Access-Control-Allow-Origin: '*'
                              Access-Control-Allow-Methods: OPTIONS,GET
                          errors:
                            - name: TypeError
                              message: Cannot read property 'lat' of undefined
                      failures:
                        - executionId: 1
                          name: TypeError
                          message: Cannot read property 'lat' of undefined
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
        undefined:
          content:
            application/json:
              schema:
                type: object
              example:
                run:
                  info:
                    jobId: 1ecee76a-e14e-47c0-bddc-256bf690c407
                    monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    name: Test Monitor
                    collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                    status: success
                    startedAt: '2022-06-17T19:50:04.019Z'
                    finishedAt: '2022-06-17T19:50:06.439Z'
                  stats:
                    assertions:
                      total: 0
                      failed: 0
                    requests:
                      total: 1
                      failed: 0
                  executions:
                    - id: 1
                      item:
                        name: Sample POST Request
                      request:
                        method: POST
                        url: http://echo.getpostman.com/post
                        headers:
                          Content-Type: application/json
                          User-Agent: PostmanRuntime/7.29.0
                          Accept: '*/*'
                          Cache-Control: no-cache
                          Postman-Token: null
                          Host: echo.getpostman.com
                          Accept-Encoding: gzip, deflate, br
                          Connection: keep-alive
                          Content-Length: '0'
                        body:
                          contentLength: 0
                        timestamp: '2022-06-17T19:50:06.186Z'
                      response:
                        code: 200
                        body:
                          contentLength: 50
                        responseTime: 49
                        responseSize: 50
                        headers:
                          Date: Fri, 17 Jun 2022 19:50:06 GMT
                          Content-Type: text/plain
                          Content-Length: '50'
                          Connection: keep-alive
                          Server: null
                  failures: []
  /monitors/{monitorId}:
    delete:
      tags:
        - Monitors
      summary: Delete a monitor
      description: Deletes a monitor.
      parameters:
        - name: monitorId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                monitor:
                  id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                  uid: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: serverError
                  message: An error has occurred on the server.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - Monitors
      summary: Get a monitor
      description: Gets information about a monitor.
      parameters:
        - name: monitorId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                monitor:
                  id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                  name: Test Monitor
                  uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                  owner: 12345678
                  collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                  environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                  options:
                    strictSSL: true
                    followRedirects: true
                    requestTimeout: 3000
                    requestDelay: 0
                  notifications:
                    onError:
                      - email: user@example.com
                    onFailure:
                      - email: user@example.com
                  distribution: []
                  schedule:
                    cron: 0 0 * * * *
                    timezone: America/Chicago
                    nextRun: '2022-06-18T05:00:00.000Z'
                  lastRun:
                    status: failed
                    startedAt: '2022-06-17T18:39:52.852Z'
                    finishedAt: '2022-06-17T18:39:53.707Z'
                  stats:
                    assertions:
                      total: 8
                      failed: 1
                    requests:
                      total: 4
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified monitor does not exist.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    put:
      tags:
        - Monitors
      summary: Update a monitor
      description: |-
        Updates a monitor. Include the following properties in the request body:

        - `name` — A **string** value that contains the monitor's name.
        - `schedule` — An **object** that contains the following properties:
            - `cron` — A **string** value the monitor's run frequency. At this time you can only create monitors with limited schedules. For information about the available schedules, see our [Postman Monitors](https://monitor.getpostman.com) collection. See the table below for cron patterns.
            - `timezone` — A string value that contains the monitor's [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        ### Cron patterns

        | Frequency | Cron Pattern |
        | --- | --- |
        | Every 5 minutes | `\\*/5 \\* \\* \\* \\*` |
        | Every 30 minutes | `\\*/30 \\* \\* \\* \\*` |
        | Every Hour | `0 \\*/1 \\* \\* \\*` |
        | Every 6 Hours | `0 \\*/6 \\* \\* \\*` |
        | Every day at 5pm | `0 17 \\* \\* \\*` |
        | Every Monday at 12pm | `0 12 \\* \\* MON` |
        | Every weekday (Monday - Friday) at 6am | `0 6 \\* \\* MON-FRI` |
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"monitor\": {\n\t\t\"name\":
                \"{{monitorName}}\",\n\t\t\"schedule\": {\n\t\t\t\"cron\":
                \"{{cronFrequencyPattern}}\",\n            \"timezone\":
                \"{{monitorTimezone}}\"\n\t\t}\n\t}\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: monitorId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                monitor:
                  id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                  name: Test Monitor
                  uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified monitor does not exist.
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /workspaces/{workspaceId}:
    put:
      tags:
        - Workspaces
      summary: Update a workspace
      description: >-
        Updates a workspace. You can use the following request body properties
        to update the workspace:


        *   `name` — A **string** that contains the workspace's new name.

        *   `type` — Optional. A **string** that contains the workspace type:
            *   `personal` — A personal workspace.
            *   `team` — A team workspace.
        *   `description` — Optional. A **string** that contains the new
        workspace description.
            

        **Note:**


        You can change a workspace's `type` from `personal` to `team`, but you
        **cannot** change a workspace from `team` to `personal`.


        ### **Important:**


        We **deprecated** linking collections or environments between
        workspaces. We do **not** recommend that you do this.


        If you have a linked collection or environment, note the following:


        *   The endpoint does **not** create a clone of a collection or
        environment.

        *   Any changes you make to a linked collection or environment changes
        them in **all** workspaces.

        *   If you delete a collection or environment linked between workspaces,
        the system deletes it in **all** the workspaces.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"workspace\": {\n        \"name\":
                \"{{workspaceName}}\",\n        \"description\":
                \"{{workspaceDescription}}\",\n        \"type\":
                \"{{workspaceType}}\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: workspaceId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                workspace:
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                  name: Test Workspace
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: invalidUIDError
                  message: The ID provided is not a valid UID.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: forbiddenError
                  message: You do not have access to update this workspace.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified workspace does not exist.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - Workspaces
      summary: Get a workspace
      description: >-
        Gets information about a workspace.


        **Note:**


        This endpoint's response contains the `visibility` field.
        [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility)
        determines who can access the workspace:


        - `only-me` — Applies to the **My Workspace** workspace.

        - `personal` — Only you can access the workspace.

        - `team` — All team members can access the workspace.

        - `private-team` — Only invited team members can access the workspace.

        - `public` — Everyone can access the workspace.
            

        ### Important


        We have **deprecated** the `name` and `uid` responses in the following
        array of objects:


        - `collections`

        - `environments`

        - `mocks`

        - `monitors`

        - `apis`
      parameters:
        - name: workspaceId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                workspace:
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                  name: Team Workspace
                  type: team
                  description: The Test team workspace.
                  visibility: private-team
                  createdBy: '12345678'
                  updatedBy: '12345678'
                  createdAt: '2022-07-06T16:18:32.000Z'
                  updatedAt: '2022-07-06T20:55:13.000Z'
                  collections:
                    - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                      name: Test Collection
                      uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                  environments:
                    - id: 5daabc50-8451-43f6-922d-96b403b4f28e
                      name: Test Environment
                      uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                  mocks:
                    - id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                      name: Test Mock
                      uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                  monitors:
                    - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                      name: Test Monitor
                      uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                  apis:
                    - id: 387c2863-6ee3-4a56-8210-225f774edade
                      name: Test API
                      uid: 12345678-387c2863-6ee3-4a56-8210-225f774edade
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: Instance not found in the database.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: Instance not found in the database.
    delete:
      tags:
        - Workspaces
      summary: Delete a workspace
      description: >-
        Deletes an existing workspace.


        ### **Important:**


        If you delete a workspace that has a linked collection or environment
        with another workspace, this will delete the collection and environment
        in **all** workspaces.
      parameters:
        - name: workspaceId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                workspace:
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified workspace does not exist.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /workspaces:
    post:
      tags:
        - Workspaces
      summary: Create a workspace
      description: >-
        Creates a new
        [workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
        Include the following properties in the request body:


        * `name` — A **string** that contains the workspace's name.

        * `type` — A **string** that contains the workspace type:
            * `personal` — A personal workspace.
            * `team` — A team workspace.

        You can include the following optional properties in the request body:


        * `description` — A **string** that contains a description of the
        workspace.


        ### **Important:**


        We **deprecated** linking collections or environments between
        workspaces. We do **not** recommend that you do this.


        If you have a linked collection or environment, note the following:


        * The endpoint does **not** create a clone of a collection or
        environment.

        * Any changes you make to a linked collection or environment changes
        them in **all** workspaces.

        * If you delete a collection or environment linked between workspaces,
        the system deletes it in **all** the workspaces.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"workspace\": {\n        \"name\":
                \"{{workspaceName}}\",\n        \"description\":
                \"{{workspaceDescription}}\",\n        \"type\":
                \"{{workspaceType}}\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                workspace:
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                  name: Test Workspace
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: Instance not found in the database.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - Workspaces
      summary: Get all workspaces
      description: >-
        Gets all
        [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
        The response includes your workspaces and any workspaces that you have
        access to.


        **Note:**


        This endpoint's response contains the `visibility` field.
        [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility)
        determines who can access the workspace:


        * `only-me` — Applies to the **My Workspace** workspace.

        * `personal` — Only you can access the workspace.

        * `team` — All team members can access the workspace.

        * `private-team` — Only invited team members can access the workspace.

        * `public` — Everyone can access the workspace.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    workspaces:
                      - id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                        name: Test Workspace
                        type: personal
                        visibility: personal
                      - id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                        name: Team Workspace
                        type: team
                        visibility: private-team
                example-1:
                  summary: Filter by Type
                  value:
                    workspaces:
                      - id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                        name: Test Workspace
                        type: personal
                        visibility: personal
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /me:
    get:
      tags:
        - User
      summary: Get authenticated user
      description: >-
        Gets information about the authenticated user.


        **Note:**


        This API returns a different response for users with the [Guest
        role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    user:
                      id: 12345678
                      username: taylor-lee
                      email: taylor.lee@example.com
                      fullName: Taylor Lee
                      avatar: https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg
                      isPublic: true
                    operations:
                      - name: mock_usage
                        limit: 1000000
                        usage: 110276
                        overage: 0
                      - name: monitor_request_runs
                        limit: 10000000
                        usage: 1141750
                        overage: 0
                      - name: api_usage
                        limit: 1000000
                        usage: 16240
                        overage: 0
                      - name: custom_domains
                        limit: 25
                        usage: 25
                        overage: 0
                      - name: serverless_requests
                        limit: 10000
                        usage: 0
                        overage: 0
                      - name: integrations
                        limit: 5000
                        usage: 1018
                        overage: 0
                      - name: cloud_agent_requests
                        limit: 1000000
                        usage: 1615
                        overage: 0
                example-1:
                  summary: Guest User Response
                  value:
                    user:
                      id: 12345678
                      username: taylor-lee
                      email: taylor.lee@example.com
                      fullName: Taylor Lee
                      avatar: https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg
                      isPublic: true
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: AuthenticationError
                  message: >-
                    Invalid API Key. Every request requires a valid API Key to
                    be sent.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /import/openapi:
    post:
      tags:
        - Import
      summary: Import an OpenAPI definition
      description: >-
        Imports an OpenAPI definition into Postman as a new [Postman
        Collection](https://learning.postman.com/docs/getting-started/creating-the-first-collection/).


        Include the following properties in the request body:


        - `type` — A **string** that contains the definition's type. One of:
            - `string`
            - `json`
            - `file`
        - `input` — The OpenAPI definition, based on the `type` value:
            - For `string`, the definition's stringified JSON object.
            - For `json`, the definition's JSON object.
            - For `file`, a definition file. To import a file, the request body **must** be a `form-data` request and include the `type` key with the `file` value.

        You can include the following additional properties in the request body:


        - `options` — An **object** that contains advanced creation options and
        their values. You can find a complete list of properties and their
        values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter
        OPTIONS
        documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md).
        **These properties are case-sensitive.**
            

        For more information, refer to the collection's examples.


        **Note:**


        If you import with the `file` input method, you **must** use the Postman
        desktop app. The Postman web app does not support this method type.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"type\": \"{{APIspecificationType}}\",\n    \"input\":
                {{APIspecification}},\n    \"options\": {\n       
                \"{{optionName}}\": \"{{optionvalue}}\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    collections:
                      - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        name: Test API
                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    environments: []
                example-1:
                  summary: Import an OpenAPI Definition to a Workspace
                  value:
                    collections:
                      - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        name: Test Collection
                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    environments: []
                example-2:
                  summary: Import an OpenAPI Definition with Options
                  value:
                    collections:
                      - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        name: Test Collection
                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    environments: []
                example-3:
                  summary: Import a Stringified OpenAPI Definition
                  value:
                    collections:
                      - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        name: Test Collection
                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    environments: []
                example-4:
                  summary: Import a File
                  value:
                    collections:
                      - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        name: Test Collection
                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    environments: []
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Invalid Parameters
                  value:
                    error:
                      name: invalidParamsError
                      message: >-
                        The request body has invalid values for the type
                        parameter. Value must be one of file, string, json
                      details:
                        param: type
                example-1:
                  summary: Missing Parameters
                  value:
                    error:
                      name: paramMissingError
                      message: >-
                        The request body is missing a value for the type
                        parameter. Check your request and try again.
                      details:
                        param: type
                example-2:
                  summary: Malformed Request
                  value:
                    error:
                      name: invalidSchemaError
                      message: >-
                        Specification must contain a semantic version number of
                        the OAS specification
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /import/exported:
    post:
      tags:
        - Import
      summary: Import an exported Postman data dump file
      description: >-
        Imports exported Postman data. This endpoint **only** accepts [export
        data dump files](https://postman.postman.co/me/export).


        For more information, read our [Exporting data
        dumps](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/#exporting-data-dumps)
        documentation.


        ## Important


        This endpoint is **deprecated**.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Required. The `file` type value.
                  example: file
                input:
                  type: string
                  description: Required. A file containing a valid user's export .zip file.
                  format: binary
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                collections:
                  - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                    name: Test API
                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Invalid Parameters
                  value:
                    error:
                      name: invalidParamsError
                      message: >-
                        The request body has invalid values for the type
                        parameter. Value must be one of file, string, json
                      details:
                        param: type
                example-1:
                  summary: Missing Parameter
                  value:
                    error:
                      name: paramMissingError
                      message: >-
                        The request body is missing a value for the type
                        parameter. Check your request and try again.
                      details:
                        param: type
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /webhooks:
    post:
      tags:
        - Webhooks
      summary: Create a webhook
      description: >-
        Creates a webhook that triggers a collection with a custom payload. You
        can get the webhook's URL from the `webhookUrl` property in the
        endpoint's response.


        Include the following properties in a `webhook` object in the request
        body:


        *   `name` — The webhook's name. On success, the system creates a new
        monitor with this name in the **Monitors** tab.

        *   `collection` — The collection UID to trigger when calling this
        webhook.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                webhook:
                  name: '{{webhookName}}'
                  collection: '{{collectionUid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                webhook:
                  id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                  name: Test Webhook
                  collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                  webhookUrl: >-
                    https://newman-api.getpostman.com/run/12345678/267a6e99-b6da-407c-a96f-03be2d6282fb
                  uid: 12345678-1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /scim/v2/Users/{userId}:
    get:
      tags:
        - SCIM 2.0 - Identity > User Provisioning
      summary: Get a user resource
      description: Gets information about a Postman team member.
      security:
        - noauthAuth: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:schemas:core:2.0:User
                id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                userName: taylor-lee@example.com
                name:
                  givenName: Taylor
                  familyName: Lee
                externalId: '12345678'
                active: true
                meta:
                  resourceType: User
                  created: '2021-02-22T04:24:13.000Z'
                  lastModified: '2021-02-22T04:24:13.000Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This Postman team doesn’t exist anymore.
                status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Your API key was generated by a Team Admin who is no longer on
                  your team. Use an API key generated by a Team Admin.
                status: '403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This person isn’t a member of the team.
                status: '404'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 300 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Unable to fetch information about this team member.
                status: '500'
    put:
      tags:
        - SCIM 2.0 - Identity > User Provisioning
      summary: Update a user
      description: >-
        Updates a user's first and last name in Postman.


        **Note:**


        This endpoint only updates a user's first and last name and pushes it to
        Postman. You cannot update any other user attributes with the SCIM API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "schemas": [
                        "urn:ietf:params:scim:schemas:core:2.0:User"
                        ],
                    "userName": "{{userName}}",
                    "name": {
                        "givenName": "{{firstName}}",
                        "familyName": "{{lastName}}"
                    },
                    "externalId": "{{externalId}}",
                    "locale": "{{locale}}",
                    "groups": [
                        "{{groupId}}"
                    ],
                    "active": {{boolean}}
                }
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:schemas:core:2.0:User
                id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                userName: taylor-lee@example.com
                name:
                  givenName: Taylor
                  familyName: Lee
                externalId: '12345678'
                active: true
                meta:
                  resourceType: User
                  created: '2021-02-22T04:24:13.000Z'
                  lastModified: '2021-02-22T04:24:13.000Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Bad Request
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      Couldn’t update this team member’s username. Try again —
                      it should work next time around.
                    status: '400'
                example-1:
                  summary: Invalid Team
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This Postman team doesn’t exist anymore.
                    status: '400'
                example-2:
                  summary: Invalid Syntax
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    scimType: invalidSyntax
                    detail: >-
                      The request body seems to be incomplete or have
                      unsupported characters.
                    status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Forbidden
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      Your API key was generated by a Team Admin who is no
                      longer on your team. Use an API key generated by a Team
                      Admin.
                    status: '403'
                example-1:
                  summary: Admin Action Not Allowed
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: The admin is not allowed to perform this action.
                    status: '403'
                example-2:
                  summary: User Not in Team
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This person isn’t a member of the team.
                    status: '403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This person isn’t a member of the team.
                status: '404'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 180 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Couldn’t update this team member’s information. Try again — it
                  should work next time around.
                status: '500'
    patch:
      tags:
        - SCIM 2.0 - Identity > User Provisioning
      summary: Update a user's state
      description: >-
        Updates a user's active state in Postman. Set the `active` property in
        the request body to one of the following values:


        - `true` — Activates the user. This lets them authenticate in to your
        Postman team.

        - `false` — Removes the user from your Postman team and deactivates the
        account. This blocks the user from authenticating in to Postman.
            

        ### Reactivating users


        By setting the `active` property from `false` to `true`, this
        reactivates an account. This allows the account to authenticate in to
        Postman and adds the account back on to your Postman team.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "schemas": [
                        "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                    ],
                    "Operations": [
                        {
                            "op": "replace",
                            "value": {
                                "active": {{boolean}}
                            }
                        }
                    ]
                }
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:schemas:core:2.0:User
                id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                userName: taylor-lee@example.com
                name:
                  givenName: Taylor
                  familyName: Lee
                externalId: '12345678'
                active: false
                meta:
                  resourceType: User
                  created: '2021-02-22T04:24:13.000Z'
                  lastModified: '2021-02-22T04:24:13.000Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Bad Request
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    scimType: invalidSyntax
                    detail: You’ve used operation that Postman doesn’t support.
                    status: '400'
                example-1:
                  summary: Invalid Team
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: Team doesn't exist.
                    status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Forbidden
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This person isn’t a member of the team.
                    status: '403'
                example-1:
                  summary: Admin Team Mismatch
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      Your API key was generated by a Team Admin who is no
                      longer on your team. Use an API key generated by a Team
                      Admin.
                    status: '403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This person isn’t a member of the team.
                status: '404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Couldn’t update this team member’s information. Try again — it
                  should work next time around.
                status: '500'
        undefined:
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 180 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
  /scim/v2/Users:
    post:
      tags:
        - SCIM 2.0 - Identity > User Provisioning
      summary: Create a user
      description: >-
        Creates a new user account in Postman and adds the user to your
        organization's Postman team. If the account does not already exist, this
        also activates the user so they can authenticate in to your Postman
        team.


        If the account already exists, the system sends the user an [email
        invite](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#inviting-users)
        to join the Postman team. The user joins the team once they accept the
        invite.


        By default, the system assigns new users the developer role. You can
        [update user roles in
        Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-team-roles).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "schemas": [
                        "urn:ietf:params:scim:schemas:core:2.0:User"
                    ],
                    "userName": "{{userEmail}}",
                    "name": {
                        "givenName": "{{firstName}}",
                        "familyName": "{{lastName}}"
                    },
                    "locale": "{{locale}}",
                    "groups": [
                        "{{groupId}}"
                    ],
                    "active": {{boolean}}
                }
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Created
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:User
                    id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                    userName: taylor-lee@example.com
                    name:
                      givenName: Test
                      familyName: User
                    emails:
                      - primary: true
                        value: taylor-lee@example.com
                        type: work
                        display: taylor-lee@example.com
                    externalId: '12345678'
                    active: true
                    meta:
                      resourceType: User
                      created: '2021-02-22T04:24:13.000Z'
                      lastModified: '2021-02-22T04:24:13.000Z'
                example-1:
                  summary: Create User In Group
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:User
                    id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                    userName: taylor-lee@example.com
                    name:
                      givenName: Test
                      familyName: User
                    emails:
                      - primary: true
                        value: taylor-lee@example.com
                        type: work
                        display: taylor-lee@example.com
                    externalId: '12345678'
                    active: true
                    meta:
                      resourceType: User
                      created: '2021-02-22T04:24:13.000Z'
                      lastModified: '2021-02-22T04:24:13.000Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Invalid Syntax
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    scimType: invalidSyntax
                    detail: >-
                      The request body seems to be incomplete or have
                      unsupported characters.
                    status: '400'
                example-1:
                  summary: Invalid Team
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This Postman team doesn’t exist anymore.
                    status: '400'
                example-2:
                  summary: Not Enterprise
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      Only Postman teams on the Enterprise plan can use SCIM
                      provisioning. Upgrade your plan.
                    status: '400'
                example-3:
                  summary: No Slots Available
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      No slots available on your Postman team. Purchase or free
                      up slots to invite more members. For help, contact Team
                      Admins or members with a Billing role.
                    status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Your API key was generated by a Team Admin who is no longer on
                  your team. Use an API key generated by a Team Admin.
                status: '403'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This person is already a member of the team.
                scimType: uniqueness
                status: '409'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 180 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to add members to the team. Try again — it should work
                  next time around.
                status: '500'
    get:
      tags:
        - SCIM 2.0 - Identity > User Provisioning
      summary: Get all user resources
      description: Gets information about all Postman team members.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:ListResponse
                    totalResults: 2
                    startIndex: 1
                    itemsPerPage: 2
                    Resources:
                      - schemas:
                          - urn:ietf:params:scim:schemas:core:2.0:User
                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        userName: taylor-lee@example.com
                        name:
                          givenName: Taylor
                          familyName: Lee
                        externalId: '12345678'
                        active: true
                        meta:
                          resourceType: User
                          created: '2021-02-22T04:24:13.000Z'
                          lastModified: '2021-02-22T04:24:13.000Z'
                      - schemas:
                          - urn:ietf:params:scim:schemas:core:2.0:User
                        id: 123775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        userName: alex-cruz@okta.local
                        name:
                          givenName: Alex
                          familyName: Cruz
                        externalId: '87654321'
                        active: true
                        meta:
                          resourceType: User
                          created: '2021-02-22T04:24:13.000Z'
                          lastModified: '2021-02-22T04:24:13.000Z'
                example-1:
                  summary: No Results Found
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:ListResponse
                    totalResults: 2
                    startIndex: 1
                    itemsPerPage: 0
                    Resources: []
                example-2:
                  summary: Filter Results
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:ListResponse
                    totalResults: 2
                    startIndex: 1
                    itemsPerPage: 1
                    Resources:
                      - schemas:
                          - urn:ietf:params:scim:schemas:core:2.0:User
                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        userName: taylor-lee@example.com
                        name:
                          givenName: Taylor
                          familyName: Lee
                        externalId: '12345678'
                        active: true
                        meta:
                          resourceType: User
                          created: '2021-02-22T04:24:13.000Z'
                          lastModified: '2021-02-22T04:24:13.000Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Invalid Filter
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: You’ve used filter(s) that Postman doesn’t support.
                    status: '400'
                example-1:
                  summary: Bad Request
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This Postman team doesn’t exist anymore.
                    status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Your API key was generated by a Team Admin who is no longer on
                  your team. Use an API key generated by a Team Admin.
                status: '403'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 300 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Couldn’t fetch members of the team.
                status: '500'
  /scim/v2/Groups:
    get:
      tags:
        - SCIM 2.0 - Identity > Group Provisioning
      summary: Get all group resources
      description: Gets all Postman groups within the team.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:ListResponse
                    totalResults: 2
                    startIndex: 1
                    itemsPerPage: 2
                    Resources:
                      - schemas:
                          - urn:ietf:params:scim:schemas:core:2.0:Group
                        id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                        displayName: Test-API
                        members:
                          - value: 23a35c2723d34c03b4c56443c09e7173
                            display: Taylor Lee
                        externalId: '1234'
                        meta:
                          resourceType: Group
                          created: '2022-02-22T04:24:13.000Z'
                          lastModified: '2022-02-22T04:24:13.000Z'
                      - schemas:
                          - urn:ietf:params:scim:schemas:core:2.0:Group
                        id: 123775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        displayName: Test Group
                        members:
                          - value: 23a35c2723d34c03b4c56443c09e7173
                            display: Taylor Lee
                          - value: ghc794f24f4c49f4b5d503a4cb2686e90
                            display: Alex Cruz
                        externalId: '4321'
                        meta:
                          resourceType: Group
                          created: '2022-02-22T04:24:13.000Z'
                          lastModified: '2022-02-22T04:24:13.000Z'
                example-1:
                  summary: Filter Results
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:ListResponse
                    totalResults: 1
                    startIndex: 1
                    itemsPerPage: 1
                    Resources:
                      - schemas:
                          - urn:ietf:params:scim:schemas:core:2.0:Group
                        id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                        displayName: Test-API
                        members:
                          - value: b1c794f24f4c49f4b5d503a4cb2686ea
                            display: Taylor Lee
                        externalId: '1234'
                        meta:
                          resourceType: Group
                          created: '2022-02-22T04:24:13.000Z'
                          lastModified: '2022-02-22T04:24:13.000Z'
                example-2:
                  summary: No Results Found
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:ListResponse
                    totalResults: 0
                    startIndex: 1
                    itemsPerPage: 0
                    Resources: []
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Invalid Team
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This Postman team doesn’t exist anymore.
                    status: '400'
                example-1:
                  summary: Invalid Filter
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: You’ve used filter(s) that Postman doesn’t support.
                    status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Your API key was generated by a Team Admin who is no longer on
                  your team. Use an API key generated by a Team Admin.
                status: '403'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 300 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Couldn’t fetch members of the team.
                status: '500'
    post:
      tags:
        - SCIM 2.0 - Identity > Group Provisioning
      summary: Create a group
      description: >-
        Creates a new user group in Postman and creates a new account for each
        group member.


        Each account is added to your Postman team and authentication is
        activated for each user. If an existing Postman account uses an email
        that matches a group member's email ID, an [email
        invite](https://postman.postman.co/docs/administration/managing-your-team/managing-your-team/#invites)
        to join your Postman team is sent to that user. Once the user accepts
        the invite, they'll be added to your team.


        By default, the system assigns new users the developer role. You can
        [update user roles in
        Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-team-roles).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "schemas": ["urn:ietf:params:scim:schemas:core:2.0:Group"],
                    "displayName": {{ userGroup }},
                    "members": []
                }
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Group Created
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:Group
                    id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                    displayName: Test-API
                    members: []
                    externalId: '1234'
                    meta:
                      resourceType: Group
                      created: '2022-02-22T04:24:13.000Z'
                      lastModified: '2022-02-22T04:24:13.000Z'
                example-1:
                  summary: Group Created with Members
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:Group
                    id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                    displayName: Test-API
                    members:
                      - value: b1c794f24f4c49f4b5d503a4cb2686ea
                        display: Taylor Lee
                    externalId: '1234'
                    meta:
                      resourceType: Group
                      created: '2022-02-22T04:24:13.000Z'
                      lastModified: '2022-02-22T04:24:13.000Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Invalid Syntax
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    scimType: invalidSyntax
                    detail: >-
                      The request body seems to be incomplete or have
                      unsupported characters.
                    status: '400'
                example-1:
                  summary: Invalid Team
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This Postman team doesn’t exist anymore.
                    status: '400'
                example-2:
                  summary: Not Enterprise
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      Only Postman teams on the Enterprise plan can use SCIM
                      provisioning. Upgrade your plan.
                    status: '400'
                example-3:
                  summary: No Slots Available
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      No slots available on your Postman team. Purchase or free
                      up slots to invite more members. For help, contact Team
                      Admins or members with a Billing role.
                    status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Your API key was generated by a Team Admin who is no longer on
                  your team. Use an API key generated by a Team Admin.
                status: '403'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                scimType: uniqueness
                detail: This person is already a member of the team.
                status: '409'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 180 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to add members to the team. Try again — it should work
                  next time around.
                status: '500'
  /scim/v2/Groups/{groupId}:
    patch:
      tags:
        - SCIM 2.0 - Identity > Group Provisioning
      summary: Update a group
      description: |-
        Updates a group's information. Using this endpoint you can:

        - Update a group's name.
        - Add or remove members from a Postman group.
            

        Include the following properties in the request body:

        - `Operations` — An **object** that contains the following properties:
            - `op` — The operation to perform. One of:
                - `add`
                - `remove`
                - `replace`
            - `value` — An **object** that contains the following properties:
                - `id` — The group's ID.
                - `displayName` — The group's display name.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:PutOp
                Operations:
                  - op: '{{operation}}'
                    value:
                      id: '{{groupId}}'
                      displayName: '{{userGroupName}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
        - name: groupId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Update a Group Name
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:Group
                    id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                    displayName: Test-API
                    members: null
                    externalId: '1234'
                    meta:
                      resourceType: Group
                      created: '2022-02-22T04:24:13.000Z'
                      lastModified: '2022-02-22T04:24:13.000Z'
                example-1:
                  summary: Add Team Members
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:Group
                    id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                    displayName: Test-API
                    members:
                      - value: 23a35c2723d34c03b4c56443c09e7173
                        display: taylor.lee@example.com
                      - value: 89bb1940b90545759e7f6f887cfb368e
                        display: alex.cruz@example.com
                    externalId: '1234'
                    meta:
                      resourceType: Group
                      created: '2022-02-22T04:24:13.000Z'
                      lastModified: '2022-02-22T04:24:13.000Z'
                example-2:
                  summary: Remove Team Members
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:Group
                    id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                    displayName: Test-API
                    members:
                      - value: 23a35c2723d34c03b4c56443c09e7173
                        display: taylor.lee@example.com
                    externalId: '1234'
                    meta:
                      resourceType: Group
                      created: '2022-02-22T04:24:13.000Z'
                      lastModified: '2022-02-22T04:24:13.000Z'
                example-3:
                  summary: Replace Team Members
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:Group
                    id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                    displayName: Test-API
                    members:
                      - value: 23a35c2723d34c03b4c56443c09e7173
                        display: taylor.lee@example.com
                      - value: 89bb1940b90545759e7f6f887cfb368e
                        display: alex.cruz@example.com
                    externalId: '1234'
                    meta:
                      resourceType: Group
                      created: '2022-02-22T04:24:13.000Z'
                      lastModified: '2022-02-22T04:24:13.000Z'
                example-4:
                  summary: Add and Remove Team Members
                  value:
                    schemas:
                      - urn:ietf:params:scim:schemas:core:2.0:Group
                    id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                    displayName: Test-API
                    members:
                      - value: 23a35c2723d34c03b4c56443c09e7173
                        display: taylor.lee@example.com
                    externalId: '1234'
                    meta:
                      resourceType: Group
                      created: '2022-02-22T04:24:13.000Z'
                      lastModified: '2022-02-22T04:24:13.000Z'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Bad Request
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      Couldn’t update this team member’s username. Try again —
                      it should work next time around.
                    status: '400'
                example-1:
                  summary: Bad Request
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: >-
                      Couldn’t update this team member’s username. Try again —
                      it should work next time around.
                    status: '400'
                example-2:
                  summary: Invalid Team
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This Postman team doesn’t exist anymore.
                    status: '400'
                example-3:
                  summary: Invalid Syntax
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    scimType: invalidSyntax
                    detail: >-
                      The request body seems to be incomplete or have
                      unsupported characters.
                    status: '400'
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Your API key was generated by a Team Admin who is no longer on
                  your team. Use an API key generated by a Team Admin.
                status: '403'
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Admin Team Mismatch
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: The admin is not allowed to perform this action.
                    status: '403'
                example-1:
                  summary: Forbidden
                  value:
                    schemas:
                      - urn:ietf:params:scim:api:messages:2.0:Error
                    detail: This person isn’t a member of the team.
                    status: '403'
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This Group isn’t a member of the team.
                status: '404'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 180 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Couldn’t update this team member’s information. Try again — it
                  should work next time around.
                status: '500'
    get:
      tags:
        - SCIM 2.0 - Identity > Group Provisioning
      summary: Get a group resource
      description: Gets information about a Postman group within the team.
      security:
        - noauthAuth: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
        - name: groupId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:schemas:core:2.0:Group
                id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                displayName: Test-API
                members:
                  - value: b1c794f24f4c49f4b5d503a4cb2686ea
                    display: Taylor Lee
                externalId: '1234'
                meta:
                  resourceType: Group
                  created: '2022-02-22T04:24:13.000Z'
                  lastModified: '2022-02-22T04:24:13.000Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This Postman team doesn’t exist anymore.
                status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Your API key was generated by a Team Admin who is no longer on
                  your team. Use an API key generated by a Team Admin.
                status: '403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This group isn’t a member of the team.
                status: '404'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 300 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Unable to fetch information about this team member.
                status: '500'
    delete:
      tags:
        - SCIM 2.0 - Identity > Group Provisioning
      summary: Delete a group
      description: >-
        Deletes a group in Postman.


        User accounts that were in the deleted group are deactivated in Postman
        if the app is assigned to the user only with the deleted group.


        User accounts and the data corresponding to them are **not** deleted. To
        permanently delete user accounts and their data, [contact Postman
        support](https://www.postman.com/support/).
      security:
        - noauthAuth: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{apiKey}}'
        - name: groupId
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This Postman team doesn’t exist anymore.
                status: '400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Unable to access the team. Check if you have entered a valid
                  API key.
                status: '401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  Your API key was generated by a Team Admin who is no longer on
                  your team. Use an API key generated by a Team Admin.
                status: '403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: This group isn’t a member of the team.
                status: '404'
        '429':
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: >-
                  That’s 180 attempts in less than a minute. Wait for a minute
                  and then try again.
                status: 429
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:api:messages:2.0:Error
                detail: Unable to fetch information about this team member.
                status: '500'
  /scim/v2/ResourceTypes:
    get:
      tags:
        - SCIM 2.0 - Identity
      summary: Get resource types
      description: Gets all the resource types supported by Postman's SCIM API.
      responses:
        undefined:
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                - schemas:
                    - urn:ietf:params:scim:schemas:core:2.0:ResourceType
                  id: User
                  name: User
                  endpoint: /Users
                  description: User Account
                  schema: urn:ietf:params:scim:schemas:core:2.0:User
                  schemaExtensions:
                    - schema: >-
                        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User
                      required: true
                - schemas:
                    - urn:ietf:params:scim:schemas:core:2.0:Group
                  id: Group
                  displayName: Group
                  members: []
                  description: Group Account
                  schema: urn:ietf:params:scim:schemas:core:2.0:Group
                  schemaExtensions:
                    - schema: >-
                        urn:ietf:params:scim:schemas:extension:enterprise:2.0:Group
                      required: true
  /scim/v2/ServiceProviderConfig:
    get:
      tags:
        - SCIM 2.0 - Identity
      summary: Get service provider configuration
      description: >-
        Gets the Postman SCIM API configuration information. This includes a
        list of supported operations.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schemas:
                  - urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig
                documentationUri: >-
                  https://learning.postman.com/docs/administration/managing-your-team/configuring-scim
                patch:
                  supported: true
                bulk:
                  supported: false
                  maxOperations: 0
                  maxPayloadSize: 0
                filter:
                  supported: true
                  maxResults: 100
                changePassword:
                  supported: false
                sort:
                  supported: false
                etag:
                  supported: false
                authenticationSchemes:
                  - name: OAuth Bearer Token
                    description: >-
                      Authentication scheme using the OAuth Bearer Token
                      Standard
                    specUri: http://www.rfc-editor.org/info/rfc6750
                    type: oauthbearertoken
                meta:
                  resourceType: ServiceProviderConfig
                  location: https://api.getpostman.com/scim/v2/ServiceProviderConfig
  /security/api-validation:
    post:
      tags:
        - API Security
      summary: Schema security validation
      description: >-
        Performs a security analysis on the given definition and returns any
        issues. This can help you understand their impact and provides solutions
        to help you resolve the errors. You can include this endpoint to your
        CI/CD process to automate schema validation.


        For more information, read our [API definition
        warnings](https://learning.postman.com/docs/api-governance/api-definition/api-definition-warnings/)
        documentation.


        Include the following properties in the request body:


        - `type` — A **string** value that contains the API definition's type.
        One of:
            - `openapi3`
            - `openapi2`
        - `language` — A **string** value that contains the API definition's
        language. One of:
            - `json`
            - `yaml`
        - `schema` — A **string** value that contains the API definition's
        contents.
            

        **Note:**


        The maximum allowed size of the definition is 10 MB.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"schema\": {\n        \"type\":
                \"{{schemaType}}\",\n        \"language\":
                \"{{schemaLanguage}}\",\n        \"schema\":
                \"{{schemaBody}}\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Sun, 12 Sep 2021 09:45:42 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx
            x-frame-options:
              schema:
                type: string
                example: SAMEORIGIN
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            x-srv-trace:
              schema:
                type: string
                example: v=1;t=df3a673f51ba400d
            x-srv-span:
              schema:
                type: string
                example: v=1;s=5f5d0aa04106e973
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '60'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '58'
            X-RateLimit-Reset:
              schema:
                type: integer
                example: '1631439948'
            ETag:
              schema:
                type: string
                example: W/"164-PBgIpGM9qzmFyny6Y8Rw7l8wfv4"
            Vary:
              schema:
                type: string
                example: Accept-Encoding
            Content-Encoding:
              schema:
                type: string
                example: gzip
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    warnings: []
                example-1:
                  summary: Successful Response with Warnings
                  value:
                    warnings:
                      - severity: MEDIUM
                        message: HTTP authentication scheme is using an unknown scheme.
                        location:
                          start:
                            line: 1
                            column: 1116
                          end:
                            line: 1
                            column: 1118
                        dataPath:
                          - components
                          - securitySchemes
                          - BasicAuth
                          - scheme
                        possibleFixUrl: >-
                          https://go.pstmn.io/openapi3-security-warnings#http-authentication-scheme-is-using-an-unknown-scheme
                        category:
                          name: Broken User Authentication
        '400':
          description: Bad Request
          headers:
            Date:
              schema:
                type: string
                example: Sun, 12 Sep 2021 09:39:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '125'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx
            x-frame-options:
              schema:
                type: string
                example: SAMEORIGIN
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            x-srv-trace:
              schema:
                type: string
                example: v=1;t=583cc629de922167
            x-srv-span:
              schema:
                type: string
                example: v=1;s=510c7b003e356f45
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '60'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '59'
            X-RateLimit-Reset:
              schema:
                type: integer
                example: '1631439621'
            ETag:
              schema:
                type: string
                example: W/"7d-N5PP6H8rafi0mv9sTvRw40PwI84"
            Vary:
              schema:
                type: string
                example: Accept-Encoding
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name:
                    name: Invalid schema
                    reason: Provided schema type is not supported.
        '429':
          description: Too Many Requests
          headers:
            Date:
              schema:
                type: string
                example: Sun, 12 Sep 2021 09:39:21 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '125'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx
            x-frame-options:
              schema:
                type: string
                example: SAMEORIGIN
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            x-srv-trace:
              schema:
                type: string
                example: v=1;t=583cc629de922167
            x-srv-span:
              schema:
                type: string
                example: v=1;s=510c7b003e356f45
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '60'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '59'
            X-RateLimit-Reset:
              schema:
                type: integer
                example: '1631439621'
            ETag:
              schema:
                type: string
                example: W/"7d-N5PP6H8rafi0mv9sTvRw40PwI84"
            Vary:
              schema:
                type: string
                example: Accept-Encoding
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/schemas:
    post:
      tags:
        - API > v10 > Schema
      summary: Create a schema
      description: >-
        Creates a schema for an API. The request body must contain the
        following:


        - `type` — A **string** value that contains the API schema's type. One
        of:
            - `openapi:3_1`
            - `openapi:3`
            - `openapi:2`
            - `openapi:1`
            - `raml:0_8`
            - `raml:1`
            - `wsdl:1`
            - `wsdl:2`
            - `graphql`
            - `proto:2`
            - `proto:3`
            - `asyncapi:2`
        - `files` — An **array** of schema files that contains the following:
            - `path` — A **string** value that contains the schema file's path.
            - `content` — A **string** value that contains the schema file's stringified contents.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: '{{schemaType}}'
                files:
                  - path: '{{filePath1}}'
                    content: '{{content1}}'
                  - path: '{{filePath2}}'
                    content: '{{content2}}'
                  - path: '{{filePath3}}'
                    content: '{{content3}}'
                  - path: '{{filePath4}}'
                    content: '{{content4}}'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Create Schema
                  value:
                    type: openapi:3
                    files:
                      - path: NewPet.json
                        createdBy: '557089'
                        id: 41a3d7fd-bf9a-4053-b20e-37453962b4d6
                        createdAt: '2023-03-21T10:10:54.000Z'
                        name: NewPet.json
                        updatedBy: '557089'
                        updatedAt: '2023-03-21T10:10:54.000Z'
                      - path: Pet.json
                        createdBy: '557089'
                        id: 93502b81-9f47-45e1-94f7-64882c92519b
                        createdAt: '2023-03-21T10:10:54.000Z'
                        name: Pet.json
                        updatedBy: '557089'
                        updatedAt: '2023-03-21T10:10:54.000Z'
                      - path: common/Error.json
                        createdBy: '557089'
                        id: 72f4e1c2-5bf8-4247-ab3c-42bcdcc9ae9c
                        createdAt: '2023-03-21T10:10:54.000Z'
                        name: Error.json
                        updatedBy: '557089'
                        updatedAt: '2023-03-21T10:10:54.000Z'
                      - path: parameters.json
                        createdBy: '557089'
                        id: 2fdc8ea1-d02e-4e50-989e-6fa28f42b995
                        createdAt: '2023-03-21T10:10:54.000Z'
                        name: parameters.json
                        updatedBy: '557089'
                        updatedAt: '2023-03-21T10:10:54.000Z'
                      - root:
                          enabled: true
                        path: swagger.json
                        createdBy: '557089'
                        id: b4fc1bdc-6587-4f9b-95c9-f768146089b4
                        createdAt: '2023-03-21T10:10:54.000Z'
                        name: swagger.json
                        updatedBy: '557089'
                        updatedAt: '2023-03-21T10:10:54.000Z'
                    createdBy: '557089'
                    createdAt: '2023-03-21T10:10:54.000Z'
                    id: b4fc1bdc-6587-4f9b-95c9-f768146089b4
                    updatedBy: '557089'
                    updatedAt: '2023-03-21T10:10:54.000Z'
                example-1:
                  summary: Create Schema with Proto
                  value:
                    type: proto:2
                    files:
                      - path: index.proto
                        createdBy: '557089'
                        id: 41a3d7fd-bf9a-4053-b20e-37453962b4d6
                        createdAt: '2023-03-21T10:10:54.000Z'
                        name: index.proto
                        updatedBy: '557089'
                        updatedAt: '2023-03-21T10:10:54.000Z'
                        root:
                          enabled: true
                    createdBy: '557089'
                    createdAt: '2023-03-21T10:10:54.000Z'
                    id: b4fc1bdc-6587-4f9b-95c9-f768146089b4
                    updatedBy: '557089'
                    updatedAt: '2023-03-21T10:10:54.000Z'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Schema Already Exists
                  value:
                    type: invalidParamsError
                    title: Could not create the resource
                    detail: Schema already exists for this API
                example-1:
                  summary: Missing files Parameter
                  value:
                    type: invalidParamError
                    title: Invalid request body
                    detail: 'Missing parameter: ''files'''
                example-2:
                  summary: Missing content Parameter
                  value:
                    type: invalidParamError
                    title: Invalid request body
                    detail: Required field 'content' missing in the files array
                example-3:
                  summary: Invalid type Parameter
                  value:
                    type: InvalidParamsError
                    title: Required parameter is invalid
                    detail: >-
                      Required property `type` is invalid. Should be one of:
                      proto:2, proto:3, graphql, openapi:3_1, openapi:3,
                      openapi:2, openapi:1, raml:1, raml:0_8, wsdl:2, wsdl:1,
                      asyncapi:2
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: You do not have access to perform this operation.
                title: You are not permitted to perform the action.
                type: forbiddenError
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: instanceNotFoundError
                title: Resource not found
                detail: We could not find the API you are looking for
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: This action is not allowed for git linked APIs
                type: actionNotAllowedError
                title: Action not allowed
  /apis/{apiId}/schemas/{schemaId}/files/{filePath}:
    put:
      tags:
        - API > v10 > Schema
      summary: Create or update a schema file
      description: >-
        Creates or updates an API schema file. The request body must contain the
        following properties:


        - `content` — A **string** value that contains the file's contents.
            

        **Note:**


        - If the provided file path exists, the file will be updated with the
        new contents.

        - If the provided file path does **not** exist, then a new schema file
        will be created.

        - If the file path contains a `/` (forward slash) character, then a
        folder is created. For example, if the file path is the
        `dir/schema.json` value, then a `dir` folder is created with the
        `schema.json` file inside.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"content\": \"{{fileContent}}\"\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: schemaId
          in: path
          schema:
            type: string
          required: true
        - name: filePath
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                    createdBy: '2345'
                    updatedBy: '2345'
                    createdAt: '2022-03-29T11:37:15Z'
                    updatedAt: '2022-03-29T11:37:15Z'
                    path: data-model/index.json
                    name: index.json
                example-1:
                  summary: Successfully Update root Tag
                  value:
                    id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                    createdBy: '2345'
                    updatedBy: '2345'
                    createdAt: '2022-03-29T11:37:15Z'
                    updatedAt: '2022-03-29T11:37:15Z'
                    path: data-model/index.json
                    name: index.json
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: invalidParamError
                title: Invalid param error
                detail: Schema is not linked to the API
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: You do not have access to perform this operation.
                title: You are not permitted to perform the action.
                type: forbiddenError
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: API Not Found
                  value:
                    type: instanceNotFoundError
                    title: Resource not found
                    detail: We could not find the API you are looking for
                example-1:
                  summary: Schema Not Found
                  value:
                    type: instanceNotFoundError
                    title: Resource not found
                    detail: We could not find the resource you are looking for
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: actionNotAllowedError
                title: Action not allowed
                detail: This action is not allowed for Git linked APIs
    get:
      tags:
        - API > v10 > Schema
      summary: Get schema file contents
      description: >-
        Gets an API schema file contents at the defined path. You can use the
        `versionId` query parameter to get schema file contents published in an
        API version.


        **Note:**


        The `versionId` query parameter is a **required** parameter for API
        viewers.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: schemaId
          in: path
          schema:
            type: string
          required: true
        - name: filePath
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                    path: s1.json
                    name: s1
                    createdBy: '2345'
                    updatedBy: '2345'
                    createdAt: '2022-03-29T11:37:15Z'
                    updatedAt: '2022-03-29T11:37:15Z'
                    content: |-
                      openapi: '3.0.0'
                      info:
                        version: '1.0.0'
                        title: 'Sample API'
                        description: Buy or rent spacecrafts

                      paths:
                        /spacecrafts/{spacecraftId}:
                          parameters:
                            - name: spacecraftId
                              description: The unique identifier of the spacecraft
                              in: path
                              required: true
                              schema:
                                $ref: '#/components/schemas/SpacecraftId'
                          get:
                            summary: Read a spacecraft
                            responses:
                              '200':
                                description: The spacecraft corresponding to the provided `spacecraftId`
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Spacecraft'
                              404:
                                description: No spacecraft found for the provided `spacecraftId`
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Error'
                              500:
                                description: Unexpected error
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Error'
                      components:
                        schemas:
                          SpacecraftId:
                            description: The unique identifier of a spacecraft
                            type: string
                          Spacecraft:
                            type: object
                            required:
                              - id
                              - names
                              - type
                            properties:
                              id:
                                $ref: '#/components/schemas/SpacecraftId'
                              name:
                                type: string
                              type:
                                type: string
                                enum:
                                  - capsule
                                  - probe
                                  - satellite
                                  - spaceplane
                                  - station
                              description:
                                type: string
                          Error:
                            type: object
                            required:
                              - message
                            properties:
                              message:
                                description: A human readable error message
                                type: string
                        securitySchemes:
                          ApiKey:
                            type: apiKey
                            in: header
                            name: X-Api-Key
                      security:
                        - ApiKey: []
                example-1:
                  summary: Successful Response for Published Version
                  value:
                    id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                    path: s1.json
                    name: s1
                    createdBy: '2345'
                    updatedBy: '2345'
                    createdAt: '2022-03-29T11:37:15Z'
                    updatedAt: '2022-03-29T11:37:15Z'
                    content: |-
                      openapi: '3.0.0'
                      info:
                        version: '1.0.0'
                        title: 'Sample API'
                        description: Buy or rent spacecrafts

                      paths:
                        /spacecrafts/{spacecraftId}:
                          parameters:
                            - name: spacecraftId
                              description: The unique identifier of the spacecraft
                              in: path
                              required: true
                              schema:
                                $ref: '#/components/schemas/SpacecraftId'
                          get:
                            summary: Read a spacecraft
                            responses:
                              '200':
                                description: The spacecraft corresponding to the provided `spacecraftId`
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Spacecraft'
                              404:
                                description: No spacecraft found for the provided `spacecraftId`
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Error'
                              500:
                                description: Unexpected error
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Error'
                      components:
                        schemas:
                          SpacecraftId:
                            description: The unique identifier of a spacecraft
                            type: string
                          Spacecraft:
                            type: object
                            required:
                              - id
                              - names
                              - type
                            properties:
                              id:
                                $ref: '#/components/schemas/SpacecraftId'
                              name:
                                type: string
                              type:
                                type: string
                                enum:
                                  - capsule
                                  - probe
                                  - satellite
                                  - spaceplane
                                  - station
                              description:
                                type: string
                          Error:
                            type: object
                            required:
                              - message
                            properties:
                              message:
                                description: A human readable error message
                                type: string
                        securitySchemes:
                          ApiKey:
                            type: apiKey
                            in: header
                            name: X-Api-Key
                      security:
                        - ApiKey: []
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: invalidParamError
                title: Invalid param error
                detail: Schema is not linked to the API
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                title: You are not permitted to perform the action.
                detail: Please ensure that you have required permissions
                type: ForbiddenError
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: API Not Found
                  value:
                    type: instanceNotFoundError
                    title: Resource not found
                    detail: We could not find the API you are looking for
                example-1:
                  summary: Path Not Found
                  value:
                    title: Resource not found
                    detail: API schema file does not exist
                    type: instanceNotFoundError
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: actionNotAllowedError
                title: Action not allowed
                detail: This action is not allowed for git linked APIs
    delete:
      tags:
        - API > v10 > Schema
      summary: Delete a schema file
      description: Deletes a file in an API schema.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: schemaId
          in: path
          schema:
            type: string
          required: true
        - name: filePath
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: invalidParamError
                title: Invalid param error
                detail: Schema is not linked to the API
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: You do not have access to perform this operation.
                title: You are not permitted to perform the action.
                type: forbiddenError
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Path Not Found
                  value:
                    type: instanceNotFoundError
                    title: Resource not found
                    detail: 'File not found: Folder1/nestedFile.json'
                example-1:
                  summary: API Not Found
                  value:
                    type: instanceNotFoundError
                    title: Resource not found
                    detail: We could not find the API you are looking for
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: This action is not allowed for git linked APIs
                type: actionNotAllowedError
                title: Action not allowed
  /apis/{apiId}/schemas/{schemaId}:
    get:
      tags:
        - API > v10 > Schema
      summary: Get a schema
      description: >-
        Gets information about API schema. You can use the `versionId` query
        parameter to get a schema published in an API version.


        You can use this API to do the following:


        - Get a schema's metadata.

        - Get all the files in a schema. This only returns the first file in the
        schema. The endpoint response contains a link to the next set of
        response results.

        - Get a schema's contents in multi-file or bundled format.
            

        **Note:**


        The `versionId` query parameter is a **required** parameter for API
        viewers.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: schemaId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                    type: openapi:3
                    createdBy: '2345'
                    updatedBy: '2345'
                    createdAt: '2022-03-29T11:37:15Z'
                    updatedAt: '2022-03-29T11:37:15Z'
                    files:
                      meta:
                        nextPath: >-
                          /apis/1fdbff7c-036b-4f8a-91bc-17bf3ae74fd2/schemas/cf98c187-17c1-455f-afbf-d4be51f12770/files?cursor=eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJkaXIvczEuanNvbiJ9
                      data:
                        - createdBy: '5000842'
                          path: dir/s1.json
                          updatedBy: '5000842'
                          updatedAt: '2023-03-16T19:11:24.000Z'
                          createdAt: '2023-03-16T18:38:56.000Z'
                          id: cf98c187-17c1-455f-afbf-d4be51f12770
                          name: s1.json
                example-1:
                  summary: Get Bundled Schema
                  value:
                    id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                    type: openapi:3
                    createdBy: '2345'
                    updatedBy: '2345'
                    createdAt: '2022-03-29T11:37:15Z'
                    updatedAt: '2022-03-29T11:37:15Z'
                    content: |-
                      openapi: '3.0.0'
                      info:
                        version: '1.0.0'
                        title: 'Sample API'
                        description: Buy or rent spacecrafts

                      paths:
                        /spacecrafts/{spacecraftId}:
                          parameters:
                            - name: spacecraftId
                              description: The unique identifier of the spacecraft
                              in: path
                              required: true
                              schema:
                                $ref: '#/components/schemas/SpacecraftId'
                          get:
                            summary: Read a spacecraft
                            responses:
                              '200':
                                description: The spacecraft corresponding to the provided `spacecraftId`
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Spacecraft'
                              404:
                                description: No spacecraft found for the provided `spacecraftId`
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Error'
                              500:
                                description: Unexpected error
                                content:
                                  application/json:
                                    schema:
                                      $ref: '#/components/schemas/Error'
                      components:
                        schemas:
                          SpacecraftId:
                            description: The unique identifier of a spacecraft
                            type: string
                          Spacecraft:
                            type: object
                            required:
                              - id
                              - names
                              - type
                            properties:
                              id:
                                $ref: '#/components/schemas/SpacecraftId'
                              name:
                                type: string
                              type:
                                type: string
                                enum:
                                  - capsule
                                  - probe
                                  - satellite
                                  - spaceplane
                                  - station
                              description:
                                type: string
                          Error:
                            type: object
                            required:
                              - message
                            properties:
                              message:
                                description: A human readable error message
                                type: string
                        securitySchemes:
                          ApiKey:
                            type: apiKey
                            in: header
                            name: X-Api-Key
                      security:
                        - ApiKey: []
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Schema Not Linked to API
                  value:
                    type: invalidParamError
                    title: Invalid param error
                    detail: Schema is not linked to the API
                example-1:
                  summary: Invalid Version ID
                  value:
                    type: invalidParamError
                    title: Invalid version Id provided
                    detail: Schema not published in this version
                example-2:
                  summary: Bad Request
                  value:
                    title: Invalid request body
                    type: invalidParamError
                    detail: Missing field 'versionId' in the request body
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                title: You are not permitted to perform the action.
                detail: Please ensure that you have required permissions
                type: ForbiddenError
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: instanceNotFoundError
                title: Resource not found
                detail: We could not find the API you are looking for
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: This action is not allowed for git linked APIs
                type: actionNotAllowedError
                title: Action not allowed
  /apis/{apiId}/schemas/{schemaId}/files:
    get:
      tags:
        - API > v10 > Schema
      summary: Get schema files
      description: >-
        Gets the files in an API schema. You can use the `versionId` query
        parameter to get schema files published in an API version.


        **Note:**


        The `versionId` query parameter is a **required** parameter for API
        viewers.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: schemaId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                meta:
                  nextCursor: >-
                    eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJOZXdQZXQuanNvbiJ9
                files:
                  - id: e8a015e0-f472-4bb3-a523-57ce7c4583ed
                    path: data-model/error.yaml
                    name: error.yaml
                    createdAt: '2022-03-29T11:37:15Z'
                    updatedAt: '2022-03-29T11:37:15Z'
                    createdBy: 2345
                    updatedBy: 2345
                  - id: e8a015e0-f472-4bb3-a523-57ce7c4583ef
                    path: data-model/error2.yaml
                    name: error2.yaml
                    createdAt: '2022-03-29T11:37:15Z'
                    updatedAt: '2022-03-29T11:37:15Z'
                    createdBy: 2345
                    updatedBy: 2345
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Schema Not Linked to API
                  value:
                    type: invalidParamError
                    title: Invalid param error
                    detail: Schema is not linked to the API
                example-1:
                  summary: Invalid Version ID
                  value:
                    type: invalidParamError
                    title: Invalid version Id provided
                    detail: Schema not published in this version
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                title: You are not permitted to perform the action.
                detail: Please ensure that you have required permissions
                type: ForbiddenError
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: instanceNotFoundError
                title: Resource not found
                detail: We could not find the API you are looking for
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: This action is not allowed for git linked APIs
                type: actionNotAllowedError
                title: Action not allowed
  /apis/{apiId}/versions:
    post:
      tags:
        - API > v9 > API Version
      summary: Create an API version
      description: >-
        **This endpoint is deprecated in Postman v10 and higher.**


        Creates a new API version. Include the following request body properties
        in the `version` object:


        - `name` — Required. A **string** that contains the API version's name.

        - `source` — An **object** that contains the following properties:
            - `id` — A **string** that contains an API version's ID to copy to the created API version.
            - `schema` — A **boolean** value. If true, copy the API definition to the new API version.
            - `relations` — An **object** that contains the relation types to copy to the new API version. Each property is a **boolean** value that, if true, copies to the new API version. If you do **not** include any the following properties, the system does **not** copy them over (defaults to the `false` value):
                - `monitor`
                - `mock`
                - `documentation`
                - `test`
                - `environment`
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"version\": {\n\t\t\"name\":
                \"{{apiVersionName}}\",\n\t\t\"source\": {\n\t\t\t\"id\":
                \"{{apiVersionId}}\",\n\t\t\t\"schema\":
                {{boolean}},\n\t\t\t\"relations\": {\n\t\t\t\t\"monitor\":
                {{boolean}},\n\t\t\t\t\"mock\":
                {{boolean}},\n\t\t\t\t\"documentation\":
                {{boolean}},\n                \"test\":
                {{boolean}},\n                \"environment\":
                {{boolean}}\n\t\t\t}\n\t\t}\n\t}\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version:
                  id: 8421a1f3-3262-4d47-a597-7005bf4c1564
                  name: v1
                  api: 387c2863-6ee3-4a56-8210-225f774edade
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - API > v9 > API Version
      summary: Get all API versions
      description: >-
        Gets information about an API's versions.


        **In Postman v9 and earlier:**


        When you create an API, the system creates a single, default API
        version. You can use this version’s ID with any endpoints that require
        an API version ID.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                versions:
                  - id: a9879d02-74bf-425a-bbec-6d27aa135507
                    name: Draft
                    summary: null
                    createdBy: '20891195'
                    updatedBy: '20891195'
                    stage: Planning
                    visibility: public
                    api: 387c2863-6ee3-4a56-8210-225f774edade
                    createdAt: '2023-02-14T14:26:05.000Z'
                    updatedAt: '2023-02-14T14:26:05.000Z'
                    repositoryIntegration: null
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{versionId}:
    get:
      tags:
        - API > v10 > Version
      summary: Get a version
      description: >-
        Gets information about an API version.


        **Note:**


        - For API editors, this endpoint returns an HTTP `302 Found` status code
        when the version status is pending. It also returns the
        `/apis/{apiId}/tasks/{taskId}` task status response header.

        - For API viewers, this endpoint returns an HTTP `404 Not Found` when
        the version status is pending.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: versionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    version:
                      createdAt: '2022-06-09T14:48:45.000Z'
                      updatedAt: '2022-06-09T19:50:49.000Z'
                      id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                      name: Release 1.0
                      releaseNotes: This is the first release.
                      schemas:
                        - id: C1
                          type: openapi3
                      collections:
                        - id: C1
                          name: collection1
                        - id: C2
                          name: collection2
                example-1:
                  summary: Successful Response for API Viewers
                  value:
                    version:
                      createdAt: '2022-06-09T14:48:45.000Z'
                      updatedAt: '2022-06-09T19:50:49.000Z'
                      id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                      name: Release 1.0
                      releaseNotes: This is the first release.
                      schemas:
                        - id: C1
                          type: openapi:3
                      collections:
                        - id: C1
                          name: collection1
                        - id: C2
                          name: collection2
        '302':
          description: Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Location:
              schema:
                type: string
                example: >-
                  /apis/5360b75f-447e-467c-9299-12fd6c92450d/tasks/3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
          content:
            application/json:
              schema:
                type: object
              example: {}
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: VersionNotFound
                title: API Version not found.
                details: We could not find the API Version you are looking for.
    delete:
      tags:
        - API > v10 > Version
      summary: Delete a version
      description: >-
        Deletes an API version.


        **Note:**


        This endpoint returns an HTTP `404 Not Found` response when an API
        version is pending publication.
      security:
        - apikeyAuth: []
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: versionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API version you are looking for
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: forbiddenError
                title: Forbidden
                detail: You do not have permission to perform this action
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                type: VersionNotFound
                title: API Version not found.
                details: We could not find the API Version you are looking for.
  /apis/{apiId}/versions/{apiVersionId}:
    put:
      tags:
        - API > v9 > API Version
      summary: Update an API version
      description: >-
        **This endpoint is deprecated in Postman v10 and higher.**


        Updates an API version. Include the following request body properties in
        the `version` object:


        - `name` — A **string** that contains the API version's name.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"version\": {\n\t\t\"name\":
                \"{{apiVersionName}}\"\n\t}\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version:
                  createdAt: '2022-08-02T13:28:05.000Z'
                  updatedAt: '2022-08-02T13:35:32.000Z'
                  id: a9879d02-74bf-425a-bbec-6d27aa135507
                  name: v1.0
                  summary: null
                  stage: Planning
                  visibility: public
                  createdBy: '12345678'
                  updatedBy: '12345678'
                  api: 387c2863-6ee3-4a56-8210-225f774edade
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - API > v9 > API Version
      summary: Get an API version
      description: >-
        Gets information about an API version.


        **In Postman v9 and earlier:**


        When you create an API, the system creates a single, default API
        version. You can use this version’s ID with any endpoints that require
        an API version ID.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version:
                  id: a9879d02-74bf-425a-bbec-6d27aa135507
                  name: Draft
                  summary: null
                  createdBy: '12345678'
                  updatedBy: '12345678'
                  stage: Planning
                  visibility: public
                  api: 387c2863-6ee3-4a56-8210-225f774edade
                  createdAt: '2023-02-14T14:26:05.000Z'
                  updatedAt: '2023-02-14T14:26:05.000Z'
                  repositoryIntegration: null
                  schema:
                    - 16bb367e-fafb-4ef3-933b-ee3d971866fb
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    delete:
      tags:
        - API > v9 > API Version
      summary: Delete an API version
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Deletes an API version.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                version:
                  id: a9879d02-74bf-425a-bbec-6d27aa135507
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API version you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/collections/{collectionId}:
    get:
      tags:
        - API > v10 > Collections
      summary: Get a collection
      description: >-
        Gets a collection attached to an API. You can use the `versionId` query
        parameter to get a collection published in a version.


        **Note:**


        The `versionId` query parameter is a **required** parameter for API
        viewers.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: collectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    item:
                      - protocolProfileBehavior:
                          disableBodyPruning: true
                        response:
                          - originalRequest:
                              url:
                                host:
                                  - https://api.getpostman.com
                                raw: >-
                                  https://api.getpostman.com/spacecrafts/:spacecraftId
                                variable:
                                  - description: >-
                                      (Required) The unique identifier of the
                                      spacecraft
                                    key: spacecraftId
                                    value: <string>
                                path:
                                  - spacecrafts
                                  - ':spacecraftId'
                              method: GET
                              header:
                                - description: 'Added as a part of security scheme: apikey'
                                  key: X-Api-Key
                                  value: <API Key>
                            code: 200
                            _postman_previewlanguage: json
                            responseTime: null
                            header:
                              - key: Content-Type
                                value: application/json
                            name: >-
                              The spacecraft corresponding to the provided
                              `spacecraftId`
                            _postman_previewtype: html
                            body: |-
                              {
                                "id": "<string>",
                                "name": "commodo",
                                "type": "capsule",
                                "description": "pariatur dolo"
                              }
                            cookie: []
                            status: OK
                            id: 54467f6e-71d7-43d5-acc0-48f948e38528
                          - originalRequest:
                              url:
                                host:
                                  - https://api.getpostman.com
                                raw: >-
                                  https://api.getpostman.com/spacecrafts/:spacecraftId
                                variable:
                                  - description: >-
                                      (Required) The unique identifier of the
                                      spacecraft
                                    key: spacecraftId
                                    value: <string>
                                path:
                                  - spacecrafts
                                  - ':spacecraftId'
                              method: GET
                              header:
                                - description: 'Added as a part of security scheme: apikey'
                                  key: X-Api-Key
                                  value: <API Key>
                            code: 404
                            _postman_previewlanguage: json
                            responseTime: null
                            header:
                              - key: Content-Type
                                value: application/json
                            name: >-
                              No spacecraft found for the provided
                              `spacecraftId`
                            _postman_previewtype: html
                            body: |-
                              {
                                "message": "dolore Excepteur"
                              }
                            cookie: []
                            status: Not Found
                            id: 1231609a-7a3d-444d-aa0c-579703e618f4
                          - originalRequest:
                              url:
                                host:
                                  - https://api.getpostman.com
                                raw: >-
                                  https://api.getpostman.com/spacecrafts/:spacecraftId
                                variable:
                                  - description: >-
                                      (Required) The unique identifier of the
                                      spacecraft
                                    key: spacecraftId
                                    value: <string>
                                path:
                                  - spacecrafts
                                  - ':spacecraftId'
                              method: GET
                              header:
                                - description: 'Added as a part of security scheme: apikey'
                                  key: X-Api-Key
                                  value: <API Key>
                            code: 500
                            _postman_previewlanguage: json
                            responseTime: null
                            header:
                              - key: Content-Type
                                value: application/json
                            name: Unexpected error
                            _postman_previewtype: html
                            body: |-
                              {
                                "message": "dolore Excepteur"
                              }
                            cookie: []
                            status: Internal Server Error
                            id: db674465-8cec-4208-9724-42278ca9b83c
                        id: d3779255-5293-4e58-9b65-8954936e1dca
                        request:
                          url:
                            host:
                              - https://api.getpostman.com
                            raw: >-
                              https://api.getpostman.com/spacecrafts/:spacecraftId
                            variable:
                              - description: >-
                                  (Required) The unique identifier of the
                                  spacecraft
                                key: spacecraftId
                                value: <string>
                            path:
                              - spacecrafts
                              - ':spacecraftId'
                          method: GET
                          header:
                            - key: Accept
                              value: application/json
                        name: Read a spacecraft
                    auth:
                      apikey:
                        - type: string
                          key: key
                          value: X-Api-Key
                        - type: string
                          key: value
                          value: SCBKCDKCHKDHCK
                        - type: string
                          key: in
                          value: header
                      type: apikey
                    info:
                      description: Buy or rent spacecrafts
                      _postman_id: e726de58-f1b3-4edd-a8a7-2579dc799d39
                      schema: >-
                        https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                      name: Generated
                    variable:
                      - value: /
                        type: string
                        id: 526a20ba-acfb-4549-a841-8edf2d24b929
                        key: baseUrl
                example-1:
                  summary: Successful Response with Version
                  value:
                    item:
                      - protocolProfileBehavior:
                          disableBodyPruning: true
                        response:
                          - originalRequest:
                              url:
                                host:
                                  - https://api.getpostman.com
                                raw: >-
                                  https://api.getpostman.com/spacecrafts/:spacecraftId
                                variable:
                                  - description: >-
                                      (Required) The unique identifier of the
                                      spacecraft
                                    key: spacecraftId
                                    value: <string>
                                path:
                                  - spacecrafts
                                  - ':spacecraftId'
                              method: GET
                              header:
                                - description: 'Added as a part of security scheme: apikey'
                                  key: X-Api-Key
                                  value: <API Key>
                            code: 200
                            _postman_previewlanguage: json
                            responseTime: null
                            header:
                              - key: Content-Type
                                value: application/json
                            name: >-
                              The spacecraft corresponding to the provided
                              `spacecraftId`
                            _postman_previewtype: html
                            body: |-
                              {
                                "id": "<string>",
                                "name": "commodo",
                                "type": "capsule",
                                "description": "pariatur dolo"
                              }
                            cookie: []
                            status: OK
                            id: 54467f6e-71d7-43d5-acc0-48f948e38528
                          - originalRequest:
                              url:
                                host:
                                  - https://api.getpostman.com
                                raw: >-
                                  https://api.getpostman.com/spacecrafts/:spacecraftId
                                variable:
                                  - description: >-
                                      (Required) The unique identifier of the
                                      spacecraft
                                    key: spacecraftId
                                    value: <string>
                                path:
                                  - spacecrafts
                                  - ':spacecraftId'
                              method: GET
                              header:
                                - description: 'Added as a part of security scheme: apikey'
                                  key: X-Api-Key
                                  value: <API Key>
                            code: 404
                            _postman_previewlanguage: json
                            responseTime: null
                            header:
                              - key: Content-Type
                                value: application/json
                            name: >-
                              No spacecraft found for the provided
                              `spacecraftId`
                            _postman_previewtype: html
                            body: |-
                              {
                                "message": "dolore Excepteur"
                              }
                            cookie: []
                            status: Not Found
                            id: 1231609a-7a3d-444d-aa0c-579703e618f4
                          - originalRequest:
                              url:
                                host:
                                  - https://api.getpostman.com
                                raw: >-
                                  https://api.getpostman.com/spacecrafts/:spacecraftId
                                variable:
                                  - description: >-
                                      (Required) The unique identifier of the
                                      spacecraft
                                    key: spacecraftId
                                    value: <string>
                                path:
                                  - spacecrafts
                                  - ':spacecraftId'
                              method: GET
                              header:
                                - description: 'Added as a part of security scheme: apikey'
                                  key: X-Api-Key
                                  value: <API Key>
                            code: 500
                            _postman_previewlanguage: json
                            responseTime: null
                            header:
                              - key: Content-Type
                                value: application/json
                            name: Unexpected error
                            _postman_previewtype: html
                            body: |-
                              {
                                "message": "dolore Excepteur"
                              }
                            cookie: []
                            status: Internal Server Error
                            id: db674465-8cec-4208-9724-42278ca9b83c
                        id: d3779255-5293-4e58-9b65-8954936e1dca
                        request:
                          url:
                            host:
                              - https://api.getpostman.com
                            raw: >-
                              https://api.getpostman.com/spacecrafts/:spacecraftId
                            variable:
                              - description: >-
                                  (Required) The unique identifier of the
                                  spacecraft
                                key: spacecraftId
                                value: <string>
                            path:
                              - spacecrafts
                              - ':spacecraftId'
                          method: GET
                          header:
                            - key: Accept
                              value: application/json
                        name: Read a spacecraft
                    auth:
                      apikey:
                        - type: string
                          key: key
                          value: X-Api-Key
                        - type: string
                          key: value
                          value: SCBKCDKCHKDHCK
                        - type: string
                          key: in
                          value: header
                      type: apikey
                    info:
                      description: Buy or rent spacecrafts
                      _postman_id: e726de58-f1b3-4edd-a8a7-2579dc799d39
                      schema: >-
                        https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                      name: Generated
                    variable:
                      - value: /
                        type: string
                        id: 526a20ba-acfb-4549-a841-8edf2d24b929
                        key: baseUrl
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                title: Invalid request body
                type: invalidParamError
                detail: Missing field 'versionId' in the request body
  /apis/{apiId}/collections:
    post:
      tags:
        - API > v10 > Collections
      summary: Add a collection
      description: >-
        Adds a collection to an API. To do this, use the following
        `operationType` values:


        - `COPY_COLLECTION` — Copies a collection from the workspace and adds it
        to an API.

        - `CREATE_NEW` — Creates a new collection by providing the new
        collection's content.

        - `GENERATE_FROM_SCHEMA` — Generates the collection from an API schema.
            

        For examples of each method, see the collection's response examples.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                operationType: '{{operationType}}'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Copy a Collection
                  value:
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                example-1:
                  summary: Generate a Collection from Schema
                  value:
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                example-2:
                  summary: Add a New Collection
                  value:
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: You do not have access to perform this operation.
                title: You are not permitted to perform the action.
                type: forbiddenError
  /apis/{apiId}/collections/{collectionId}/sync-with-schema-tasks:
    put:
      tags:
        - API > v10 > Collections
      summary: Sync collection with schema
      description: >-
        Syncs a collection attached to an API with the API schema.


        This is an asynchronous endpoint that returns an HTTP `202 Accepted`
        response. The response contains a polling link to the
        `/apis/{apiId}/tasks/{taskId}` endpoint in the Location header.


        **Note:**


        This endpoint only supports the OpenAPI 3 schema type.
      requestBody:
        content: {}
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: collectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Location:
              schema:
                type: string
                example: >-
                  /apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39
          content:
            application/json:
              schema:
                type: object
              example:
                taskId: 66ae9950-0869-4e65-96b0-1e0e47e771af
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: This endpoint does not support v9 APIs.
                title: Unsupported API
                type: unsupportedEntityError
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "detail": "You do not have access to perform this operation.",
                    "title": "You are not permitted to perform the action.",
                    "type": "forbiddenError"
                }
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Schema Not Found
                  value:
                    detail: We could not find a schema linked to this API
                    title: Schema not found
                    type: instanceNotFoundError
                example-1:
                  summary: Collection Not Found
                  value:
                    detail: We could not find a collection you are looking for
                    title: Collection not found
                    type: instanceNotFoundError
                example-2:
                  summary: API Not Found
                  value:
                    title: We could not find the API you are looking for
                    detail: We could not find the API you are looking for.
                    type: instanceNotFoundError
        '422':
          description: Unprocessable Entity (WebDAV) (RFC 4918)
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Unsupported Schema Type
                  value:
                    title: Unsupported schema
                    detail: >-
                      Collection syncing is not supported for the current schema
                      type of the API
                    type: unsupportedEntityError
                example-1:
                  summary: Action Not Allowed
                  value:
                    detail: This action is not allowed for git linked APIs
                    type: actionNotAllowedError
                    title: Action not allowed
  /apis/{apiId}/tasks/{taskId}:
    get:
      tags:
        - API > v10
      summary: Get status of an asynchronous task
      description: Gets the status of an asynchronous task.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/vnd.api.v10+json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: taskId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Pending Status
                  value:
                    meta:
                      url: >-
                        https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39/sync
                      action: update
                      model: collection
                    id: 66ae9950-0869-4e65-96b0-1e0e47e771af
                    createdAt: '2023-02-12 19:34:49'
                    updatedAt: '2023-02-12 19:34:49'
                    status: pending
                example-1:
                  summary: Completed Status
                  value:
                    meta:
                      url: >-
                        https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39/sync
                      action: update
                      model: collection
                    details:
                      resources:
                        - id: collectionID
                          url: >-
                            /apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39
                    id: 66ae9950-0869-4e65-96b0-1e0e47e771af
                    createdAt: '2023-02-12 19:34:49'
                    updatedAt: '2023-02-12 19:34:49'
                    status: completed
                example-2:
                  summary: Failed Status
                  value:
                    meta:
                      url: >-
                        https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39/sync
                      action: update
                      model: collection
                    details:
                      error:
                        message: The API contains invalid schema
                    id: 66ae9950-0869-4e65-96b0-1e0e47e771af
                    createdAt: '2019-02-12 19:34:49'
                    updatedAt: '2023-02-12 19:34:49'
                    status: failed
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                detail: Parameter, taskId is in an invalid format.
                title: The specified parameter is in an invalid format
                type: invalidParamsError
  /apis:
    post:
      tags:
        - API > v9
      summary: Create an API
      description: "Creates an API. Include the following properties in the `api`\_object:\n\n*   `name` — A **string** value that contains the API's name.\n    \n\nYou can include the following optional properties:\n\n*   `summary` — A **string** value that contains a summary of the API.\n*   `description` — A **string** value that contains the description of the API."
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"api\": {\n        \"name\": \"{{apiName}}\",\n       
                \"summary\": \"{{apiSummary}}\",\n        \"description\":
                \"{{apiDescription}}\"\n    }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    api:
                      createdAt: '2022-06-29T20:46:58.000Z'
                      updatedAt: '2022-06-29T20:46:58.000Z'
                      id: 5360b75f-447e-467c-9299-12fd6c92450d
                      name: Test API
                      summary: Test API Schema
                      description: This is a test API.
                      createdBy: '12345678'
                      updatedBy: '12345678'
                example-1:
                  summary: Create API in a Workspace
                  value:
                    api:
                      createdAt: '2022-06-29T20:46:58.000Z'
                      updatedAt: '2022-06-29T20:46:58.000Z'
                      id: 5360b75f-447e-467c-9299-12fd6c92450d
                      name: Test API
                      summary: Test API Schema
                      description: This is a test API.
                      createdBy: '12345678'
                      updatedBy: '12345678'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: paramMissingError
                  message: Parameter is missing in the request.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - API > v9
      summary: Get all APIs
      description: Gets information about all APIs.
      responses:
        '200':
          description: OK
          headers:
            Date:
              schema:
                type: string
                example: Tue, 12 Jul 2022 16:39:09 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '120'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx
            x-frame-options:
              schema:
                type: string
                example: SAMEORIGIN
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            x-srv-trace:
              schema:
                type: string
                example: v=1;t=915b2bd230311a7e
            x-srv-span:
              schema:
                type: string
                example: v=1;s=108d09101d76e02a
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '400'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '399'
            X-RateLimit-Reset:
              schema:
                type: integer
                example: '1657644009'
            ETag:
              schema:
                type: string
                example: W/"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs"
            Vary:
              schema:
                type: string
                example: Accept-Encoding
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    apis:
                      - createdAt: '2022-06-09T14:48:45.000Z'
                        updatedAt: '2022-06-09T19:50:49.000Z'
                        id: 5360b75f-447e-467c-9299-12fd6c92450d
                        name: Test API
                        summary: Test API.
                        description: This is a test API.
                        createdBy: '12345678'
                        updatedBy: '12345678'
                        isPublic: true
                      - createdAt: '2022-06-22T16:51:28.000Z'
                        updatedAt: '2022-06-22T16:51:28.000Z'
                        id: 69ce25ea-2914-426e-ae34-af558b6777e6
                        name: Public API A
                        summary: Public Test A.
                        description: This is a public test API.
                        createdBy: '12345678'
                        updatedBy: '12345678'
                        isPublic: true
                      - createdAt: '2022-06-30T16:51:28.000Z'
                        updatedAt: '2022-06-30T16:51:28.000Z'
                        id: 69ce25ea-2914-426e-ae34-af558b6777e6
                        name: Public Test API B
                        summary: Public Test B
                        description: This is another public test API.
                        createdBy: '87654321'
                        updatedBy: '87654321'
                        isPublic: false
                example-1:
                  summary: Get Public APIs
                  value:
                    apis:
                      - createdAt: '2022-06-09T14:48:45.000Z'
                        updatedAt: '2022-06-09T19:50:49.000Z'
                        id: 5360b75f-447e-467c-9299-12fd6c92450d
                        name: Test API
                        summary: Test API.
                        description: This is a test API.
                        createdBy: '12345678'
                        updatedBy: '12345678'
                        isPublic: true
                      - createdAt: '2022-06-22T16:51:28.000Z'
                        updatedAt: '2022-06-22T16:51:28.000Z'
                        id: 69ce25ea-2914-426e-ae34-af558b6777e6
                        name: Public API A
                        summary: Public Test A.
                        description: This is a public test API.
                        createdBy: '12345678'
                        updatedBy: '12345678'
                        isPublic: true
                example-2:
                  summary: Get APIs in a Date Range
                  value:
                    apis:
                      - createdAt: '2022-06-09T14:48:45.000Z'
                        updatedAt: '2022-06-09T19:50:49.000Z'
                        id: 5360b75f-447e-467c-9299-12fd6c92450d
                        name: Test API
                        summary: Test API.
                        description: This is a test API.
                        createdBy: '12345678'
                        updatedBy: '12345678'
                        isPublic: true
                example-3:
                  summary: Filter APIs by Name
                  value:
                    apis:
                      - createdAt: '2022-06-22T16:51:28.000Z'
                        updatedAt: '2022-06-22T16:51:28.000Z'
                        id: 69ce25ea-2914-426e-ae34-af558b6777e6
                        name: Public API A
                        summary: Public Test A.
                        description: This is a public test API.
                        createdBy: '12345678'
                        updatedBy: '12345678'
                        isPublic: true
                      - createdAt: '2022-06-30T16:51:28.000Z'
                        updatedAt: '2022-06-30T16:51:28.000Z'
                        id: 69ce25ea-2914-426e-ae34-af558b6777e6
                        name: Public Test API B
                        summary: Public Test B
                        description: This is another public test API.
                        createdBy: '87654321'
                        updatedBy: '87654321'
                        isPublic: false
                example-4:
                  summary: Sort by updatedAt
                  value:
                    apis:
                      - createdAt: '2022-06-09T14:48:45.000Z'
                        updatedAt: '2022-06-09T19:50:49.000Z'
                        id: 5360b75f-447e-467c-9299-12fd6c92450d
                        name: Test API
                        summary: Test API.
                        description: This is a test API.
                        createdBy: '12345678'
                        updatedBy: '12345678'
                        isPublic: true
                      - createdAt: '2022-06-22T16:51:28.000Z'
                        updatedAt: '2022-06-22T16:51:28.000Z'
                        id: 69ce25ea-2914-426e-ae34-af558b6777e6
                        name: Public API A
                        summary: Public Test A.
                        description: This is a public test API.
                        createdBy: '12345678'
                        updatedBy: '12345678'
                        isPublic: true
                      - createdAt: '2022-06-30T16:51:28.000Z'
                        updatedAt: '2022-06-30T16:51:28.000Z'
                        id: 69ce25ea-2914-426e-ae34-af558b6777e6
                        name: Public Test API B
                        summary: Public Test B
                        description: This is another public test API.
                        createdBy: '87654321'
                        updatedBy: '87654321'
                        isPublic: false
        '429':
          description: Too Many Requests
          headers:
            Date:
              schema:
                type: string
                example: Tue, 12 Jul 2022 16:39:09 GMT
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '120'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: nginx
            x-frame-options:
              schema:
                type: string
                example: SAMEORIGIN
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            x-srv-trace:
              schema:
                type: string
                example: v=1;t=915b2bd230311a7e
            x-srv-span:
              schema:
                type: string
                example: v=1;s=108d09101d76e02a
            X-RateLimit-Limit:
              schema:
                type: integer
                example: '400'
            X-RateLimit-Remaining:
              schema:
                type: integer
                example: '399'
            X-RateLimit-Reset:
              schema:
                type: integer
                example: '1657644009'
            ETag:
              schema:
                type: string
                example: W/"78-WpLmxRlFkKKPPDh/y4B5Gn3NuSs"
            Vary:
              schema:
                type: string
                example: Accept-Encoding
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}:
    put:
      tags:
        - API > v9
      summary: Update an API
      description: >-
        Updates an API. Include at least one of the following properties in the
        `api` object:


        *   `name` — A **string** value that contains the API's name.

        *   `summary` — A **string** value that contains a summary of the API.

        *   `description` — A **string** value that contains the description of
        the API.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"api\": {\n\t\t\"name\": \"{{apiName}}\",\n       
                \"summary\": \"{{apiSummary}}\",\n\t\t\"description\":
                \"{{apiDescription}}\"\n\t}\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                api:
                  createdAt: '2022-06-29T20:46:58.000Z'
                  updatedAt: '2022-06-29T20:46:58.000Z'
                  id: 5360b75f-447e-467c-9299-12fd6c92450d
                  name: Test API A
                  summary: Test API A Schema
                  description: This is Test API A.
                  createdBy: '12345678'
                  updatedBy: '12345678'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    get:
      tags:
        - API > v9
      summary: Get an API
      description: Gets information about an API.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                api:
                  createdAt: '2022-06-09T14:48:45.000Z'
                  updatedAt: '2022-06-09T19:50:49.000Z'
                  id: 5360b75f-447e-467c-9299-12fd6c92450d
                  name: Test API
                  summary: Test API.
                  description: This is a test API.
                  createdBy: '12345678'
                  updatedBy: '12345678'
                  team: '1234'
                  isPublic: true
                  versions:
                    - id: a9879d02-74bf-425a-bbec-6d27aa135507
                      name: Draft
                      summary: null
                      schemas:
                        - id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                          type: openapi3
                          language: json
                          content: |-
                            {
                              "openapi": "3.0.0",
                              "info": {
                                "version": "1.0.0",
                                "title": "Test API"
                              },
                              "servers": [
                                {
                                  "url": "http://locahost:3000"
                                }
                              ],
                              "paths": {
                                "/user": {
                                  "get": {
                                    "summary": "List all users",
                                    "operationId": "listUser",
                                    "parameters": [
                                      {
                                        "name": "id",
                                        "in": "query",
                                        "required": true,
                                        "description": "The user's ID.",
                                        "example": 1234,
                                        "schema": {
                                          "type": "integer",
                                          "format": "int32"
                                        }
                                      }
                                    ],
                                    "responses": {
                                      "200": {
                                        "description": "Information about the user.",
                                        "headers": {
                                          "x-next": {
                                            "description": "A link to the next page of responses.",
                                            "schema": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "content": {
                                          "application/json": {
                                            "schema": {
                                              "$ref": "#/components/schemas/User"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "components": {
                                "schemas": {
                                  "User": {
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "name"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "tag": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "Error": {
                                    "type": "object",
                                    "required": [
                                      "code",
                                      "message"
                                    ],
                                    "properties": {
                                      "code": {
                                        "type": "integer",
                                        "format": "int32"
                                      },
                                      "message": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                      relations:
                        - id: 66b88a55-9e52-41b0-8577-7b6798ff5bee
                          model: apiDefinition
                          type: apiDefinition
                          modelId: 66b88a55-9e52-41b0-8577-7b6798ff5bee
                        - id: 66b88a55-9e52-41b0-8577-7b6798ff5bee
                          model: schema
                          type: schema
                          modelId: 66b88a55-9e52-41b0-8577-7b6798ff5bee
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    delete:
      tags:
        - API > v9
      summary: Delete an API
      description: Deletes an API.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                api:
                  id: 5360b75f-447e-467c-9299-12fd6c92450d
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/unclassified:
    get:
      tags:
        - API > v9 > Relations
      summary: Get unclassified relations
      description: >-
        **This endpoint is for Postman v10 and higher.**


        Gets all of an API version's unclassified relations.


        Unclassified relations are used for documentation and testing. This is
        the default relation type.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                unclassified:
                  - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                    name: Test
                    updatedAt: '2023-01-19T14:50:05.000Z'
                    collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/monitor:
    get:
      tags:
        - API > v9 > Relations
      summary: Get monitor relations
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Gets an API version's monitor relations.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                monitor:
                  - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    name: Test Monitor
                    updatedAt: '2022-07-10T05:00:25.066Z'
                    monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/documentation:
    get:
      tags:
        - API > v9 > Relations
      summary: Get  documentation relations
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Gets an API version's documentation relations.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                documentation:
                  - id: b9bccf0f-e06a-433d-b556-a3cd158f0270
                    name: Test Collection
                    createdAt: '2022-07-08T20:29:35.000Z'
                    updatedAt: '2022-07-08T20:31:06.000Z'
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/integrationtest:
    get:
      tags:
        - API > v9 > Relations
      summary: Get integration test relations
      description: '**This endpoint is deprecated.**'
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                integrationtest:
                  - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                    name: C test
                    updatedAt: '2019-08-29T10:18:11.000Z'
                    collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                  - id: 521b0486-ab91-4d3a-9189-43c9380a0533
                    name: C1
                    updatedAt: '2019-08-29T11:40:39.000Z'
                    collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/testsuite:
    get:
      tags:
        - API > v9 > Relations
      summary: Get test suite relations
      description: '**This endpoint is deprecated.**'
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                testsuite:
                  - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                    name: C test
                    updatedAt: '2019-08-29T10:18:11.000Z'
                    collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                  - id: 521b0486-ab91-4d3a-9189-43c9380a0533
                    name: C1
                    updatedAt: '2019-08-29T11:40:39.000Z'
                    collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/relations:
    get:
      tags:
        - API > v9 > Relations
      summary: Get all linked relations
      description: >-
        Gets all of an API version's relations.


        **Note:**


        In Postman v10 and higher, this endpoint returns the following:


        - The `unclassified` relation is for documentation and testing. This is
        the default relation type.

        - The `apiDefinition` relation is the relation used for API definitions.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                relations:
                  apiDefintion:
                    16bb367e-fafb-4ef3-933b-ee3d971866fb:
                      id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                  unclassified:
                    b9bccf0f-e06a-433d-b556-a3cd158f0270:
                      id: b9bccf0f-e06a-433d-b556-a3cd158f0270
                      name: Test Collection
                      createdAt: '2023-01-30T17:41:50.000Z'
                      updatedAt: '2023-01-19T14:50:05.000Z'
                  schema:
                    16bb367e-fafb-4ef3-933b-ee3d971866fb:
                      id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    post:
      tags:
        - API > v9 > Relations
      summary: Create relations
      description: >-
        Creates a new relation for an API version. Include the following in the
        request body:


        - `relationType` — An **array** that contains entity relations. The key
        value for this array must be the `unclassified` value.
            

        You must include the following properties in the `relationType` array:


        - `entityId` — The collection's UID value.
            

        **Note:**


        The following is **deprecated** in Postman API v10 and higher:


        | **`relationType`** | **`entityId`** |

        | --- | --- |

        | `documentation` and `test` | A collection UID value. |

        | `environment` | An environment UID value. |

        | `mock` | A mock ID value. |

        | `monitor` | A monitor ID value. |


        The endpoint accepts multiple `relationType` arrays in a single call.
        For an example, see the example response documentation.


        The `documentation` and `test` values returned in the response are the
        relation ID values, **not** the collection ID values.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                '{{relationType}}':
                  - '{{entityId}}'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                unclassified:
                  - 2e006451-e819-443f-97bc-d1635e51007f
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: invalidParamsError
                  message: The specified parameter is in an invalid format
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/test:
    get:
      tags:
        - API > v9 > Relations
      summary: Get all test relations
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Gets all of an API version's test relations.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                test:
                  - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                    name: Test Collection
                    updatedAt: '2022-07-08T18:32:23.000Z'
                    collectionId: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/{relationType}/{entityId}/syncWithSchema:
    put:
      tags:
        - API > v9 > Relations
      summary: Sync API relations with definition
      description: Syncs an API version's relation with the API's definition.
      requestBody:
        content: {}
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
        - name: relationType
          in: path
          schema:
            type: string
          required: true
          description: >-
            The `unclassified` relation type. This relation is used for
            documentation and testing.


            **Note:**


            In Postman v10 and earlier, this value is one of:

            * `documentation`

            * `test`

            * `mock`

            * `monitor`
          example: unclassified
        - name: entityId
          in: path
          schema:
            type: string
          required: true
          description: >-
            The collection's UID value.


            **Note:**


            In Postman v10 and earlier, the entity's ID value is one of the
            following, based on its relation type:

            * `documentation` and `test` — The collection UID value.

            * `environment` — The environment UID value.

            * `mock` — The mock ID value.

            * `monitor` — The monitor ID value.
          example: '{{entityId}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API version you are looking for
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/environment:
    get:
      tags:
        - API > v9 > Relations
      summary: Get environment relations
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Gets an API version's environment relations.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                environment:
                  - id: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                    name: Test Environment
                    createdAt: '2022-07-08T20:32:48.000Z'
                    updatedAt: '2022-07-08T20:31:30.000Z'
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/contracttest:
    get:
      tags:
        - API > v9 > Relations
      summary: Get contract test relations
      description: '**This endpoint is deprecated.**'
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                contracttest:
                  - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                    name: C test
                    updatedAt: '2019-08-29T10:18:11.000Z'
                    collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                  - id: 521b0486-ab91-4d3a-9189-43c9380a0533
                    name: C1
                    updatedAt: '2019-08-29T11:40:39.000Z'
                    collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}:
    get:
      tags:
        - API > v9 > Schema
      summary: Get a schema
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Gets information about an API's definition.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
        - name: schemaId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schema:
                  id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                  type: openapi3
                  language: json
                  createdAt: '2022-07-01T20:12:31.000Z'
                  updatedAt: '2022-07-01T20:13:04.000Z'
                  createdBy: '12345678'
                  updatedBy: '12345678'
                  schema: |-
                    {
                      "openapi": "3.0.0",
                      "info": {
                        "version": "1.0.0",
                        "title": "Test API"
                      },
                      "servers": [
                        {
                          "url": "http://locahost:3000"
                        }
                      ],
                      "paths": {
                        "/user": {
                          "get": {
                            "summary": "List all users",
                            "operationId": "listUser",
                            "parameters": [
                              {
                                "name": "id",
                                "in": "query",
                                "required": true,
                                "description": "The user's ID.",
                                "example": 1234,
                                "schema": {
                                  "type": "integer",
                                  "format": "int32"
                                }
                              }
                            ],
                            "responses": {
                              "200": {
                                "description": "Information about the user.",
                                "headers": {
                                  "x-next": {
                                    "description": "A link to the next page of responses.",
                                    "schema": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "content": {
                                  "application/json": {
                                    "schema": {
                                      "$ref": "#/components/schemas/User"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "components": {
                        "schemas": {
                          "User": {
                            "type": "object",
                            "required": [
                              "id",
                              "name"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64"
                              },
                              "name": {
                                "type": "string"
                              },
                              "tag": {
                                "type": "string"
                              }
                            }
                          },
                          "Error": {
                            "type": "object",
                            "required": [
                              "code",
                              "message"
                            ],
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "message": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  apiVersion: a9879d02-74bf-425a-bbec-6d27aa135507
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Bad Request
                  value:
                    error:
                      name: instanceNotFoundError
                      message: We could not find the API you are looking for
                example-1:
                  summary: Definition Mismatch
                  value:
                    error:
                      name: schemaApiVersionMismatchError
                      message: >-
                        The Schema ID provided does not belong to the API
                        Version ID provided.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    put:
      tags:
        - API > v9 > Schema
      summary: Update a schema
      description: >-
        **This endpoint is deprecated in Postman v10 and higher.**


        Updates an API definition. The request body must contain a `schema`
        object with the following properties:


        - `type` — A **string** value that contains the API definition's type.
        One of:
            - `openapi3_1`
            - `openapi3`
            - `openapi2`
            - `openapi1`
            - `raml`
            - `raml1`
            - `wsdl1`
            - `wsdl2`
            - `graphql`
            - `proto2`
            - `graphql`
            - `proto3`
        - `language` — A **string** value that contains the API definition's
        language. One of:
            - OpenAPI and RAML — `json` or `yaml`
            - GraphQL — `graphql`
            - WSDL — `xml`
            - Protobuf — `proto`
        - `schema` — Optional. A **string** value that contains the API
        definition's contents.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"schema\": {\n\t\t\"language\":
                \"{{apiDefinitionLanguage}}\",\n        \"schema\":
                \"{{apiDefinition}}\",\n\t\t\"type\":
                \"{{apiDefinitionType}}\"\n\t}\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
        - name: schemaId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schema:
                  id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                  language: yaml
                  apiVersion: a9879d02-74bf-425a-bbec-6d27aa135507
                  type: openapi3
                  createdBy: '12345678'
                  updatedBy: '12345678'
                  createdAt: '2021-05-22T13:17:07.000Z'
                  updatedAt: '2021-05-22T13:17:07.000Z'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the API you are looking for
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/schemas:
    post:
      tags:
        - API > v9 > Schema
      summary: Create a schema
      description: >-
        **This endpoint is deprecated in Postman v10 and higher.**


        Creates an API definition. The request body must contain a `schema`
        object with the following properties:


        - `type` — A **string** value that contains the API definition's type.
        One of:
            - `openapi3_1`
            - `openapi3`
            - `openapi2`
            - `openapi1`
            - `raml`
            - `raml1`
            - `wsdl1`
            - `wsdl2`
            - `graphql`
            - `proto2`
            - `graphql`
            - `proto3`
        - `language` — A **string** value that contains the API definition's
        language. One of:
            - OpenAPI and RAML — `json` or `yaml`
            - GraphQL — `graphql`
            - WSDL — `xml`
            - Protobuf — `proto`
        - `schema` — A **string** value that contains the API definition's
        contents.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n\t\"schema\": {\n\t\t\"language\":
                \"{{apiDefinitionLanguage}}\",\n\t\t\"schema\":
                \"{{apiDefinition}}\",\n\t\t\"type\":
                \"{{apiDefinitionType}}\"\n\t}\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                schema:
                  id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                  language: json
                  apiVersion: a9879d02-74bf-425a-bbec-6d27aa135507
                  type: openapi3
                  createdBy: '12345678'
                  updatedBy: '12345678'
                  createdAt: '2021-05-22T13:17:07.000Z'
                  updatedAt: '2021-05-22T13:17:07.000Z'
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceAlreadyExists
                  message: A schema already exists for this API Version
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}/collections:
    post:
      tags:
        - API > v9 > Schema
      summary: Create a collection from a schema
      description: >-
        **This endpoint is deprecated in Postman v10 and higher.**


        Creates a collection and links it to an API as one or multiple
        relations.


        Include the following properties in the request body:


        - `name` — A **string** that contains the name of the collection.
            

        You can also include the following additional properties in the request
        body:


        - `relations` — An **array** that contains a list of relations to
        create:
            - `contracttest` — **Deprecated.**
            - `integrationtest` — **Deprecated.**
            - `testsuite` — **Deprecated.**
            - `documentation`
        - `options` — An **object** that contains advanced creation options and
        their values. You can find a complete list of properties and their
        values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter
        OPTIONS
        documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md).
        **These properties are case-sensitive.**
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: '{{collectionName}}'
                relations:
                  - type: '{{relationType}}'
                options:
                  '{{optionName}}': '{{optionValue}}'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
        - name: schemaId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    collection:
                      id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                      uid: 12345678ß-12ece9e1-2abf-4edc-8e34-de66e74114d2
                example-1:
                  summary: Create a Collection with a Documentation Relation
                  value:
                    collection:
                      id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                      uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    relations:
                      - type: documentation
                        id: d86b6c97-fdf9-4c37-825a-49b0223913c7
                example-2:
                  summary: Create a Collection with Advanced Options
                  value:
                    collection:
                      id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                      uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    relations:
                      - type: documentation
                        id: d86b6c97-fdf9-4c37-825a-49b0223913c7
                example-3:
                  summary: Create a Collection from a Definition in a Workspace
                  value:
                    collection:
                      id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                      uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    relations:
                      - type: documentation
                        id: d86b6c97-fdf9-4c37-825a-49b0223913c7
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: invalidParamsError
                  message: The specified parameter is in an invalid format
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/releases/{apiReleaseId}:
    get:
      tags:
        - API > v9 > Release
      summary: Get an API release
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Gets information about an API version's release.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
          example: '{{apiId}}'
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
          example: '{{apiVersionId}}'
        - name: apiReleaseId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                release:
                  id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                  name: Release 1.0
                  summary: This is the first release.
                  description: >-
                    This is the first release of the Test API. For more
                    information, read the documentation.
                  visibility: public
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    patch:
      tags:
        - API > v9 > Release
      summary: Update an API release
      description: >-
        **This endpoint is deprecated in Postman v10 and higher.**


        Updates an API version's release. Include at least one of the following
        properties in the `release` object:


        - `name` — A **string** value that contains the release name.

        - `visibility` — A **string** value that contains the release's
        visibility. One of:
            - `private` — The release is private.
            - `public` — The release is public.
        - `summary` — A **string** value that contains the release's summary.

        - `description` — A **string** value that contains the release's
        description.

        - `gitTag` — A **string** value that contains a valid [Git
        tag](https://docs.github.com/en/rest/git/tags) ID. The tag must exist in
        the API's connected Git repository.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                release:
                  name: '{{apiReleaseName}}'
                  summary: '{{apiReleaseSummary}}'
                  description: '{{apiReleaseDescription}}'
                  visibility: '{{apiReleaseVisibility}}'
                  gitTag: '{{apiReleaseGitTag}}'
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
        - name: apiReleaseId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                release:
                  id: 8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2
                  name: Release 1.5
                  summary: This is the first public release update.
                  description: >-
                    This is the first release update of the Test API. For more
                    information, read the documentation.
                  visibility: public
                  gitTag: Test
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                release:
                  id: 8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2
                  name: Release 1.5
                  summary: This is the first public release update.
                  description: >-
                    This is the first release update of the Test API. For more
                    information, read the documentation.
                  visibility: public
                  gitTag: Test
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    delete:
      tags:
        - API > v9 > Release
      summary: Delete an API release
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Deletes an API version's release.
      security:
        - apikeyAuth: []
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
        - name: apiReleaseId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                release:
                  id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: We could not find the release you are looking for
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /apis/{apiId}/versions/{apiVersionId}/releases:
    get:
      tags:
        - API > v9 > Release
      summary: Get all API releases
      description: |-
        **This endpoint is deprecated in Postman v10 and higher.**

        Gets information about all of an API version's releases.
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
          example: '{{apiId}}'
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
          example: '{{apiVersionId}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                releases:
                  - id: 07d940bf-40fc-4acd-a11e-be6769894af0
                    name: Release 2.0
                    description: This is the second release of the Test API.
                    visibility: private
                  - id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                    name: Release 1.0
                    description: >-
                      This is the first release of the Test API. For more
                      information, read the documentation.
                    visibility: public
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    post:
      tags:
        - API > v9 > Release
      summary: Create an API release
      description: >-
        **This endpoint is deprecated in Postman v10 and higher.**


        Creates a new API version release. Include the following properties in
        the `release` object:


        - `name` — A **string** value that contains the release name.

        - `visibility` — A **string** value that contains the release's
        visibility. One of:
            - `private` — The release is private.
            - `public` — The release is public.

        You can include the following optional properties:


        - `summary` — A **string** value that contains the release's summary.

        - `description` — A **string** value that contains the release's
        description.

        - `gitTag` — A **string** value that contains a valid [Git
        tag](https://docs.github.com/en/rest/git/tags) ID. The tag must exist in
        the API's connected Git repository.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                release:
                  name: '{{apiReleaseName}}'
                  summary: '{{apiReleaseSummary}}'
                  description: '{{apiReleaseDescription}}'
                  visibility: '{{apiReleaseVisibility}}'
                  gitTag: '{{apiReleaseGitTag}}'
      parameters:
        - name: apiId
          in: path
          schema:
            type: string
          required: true
        - name: apiVersionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                release:
                  id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                  name: Release 1.0
                  summary: This is the first release.
                  description: >-
                    This is the first release of the Test API. For more
                    information, read the documentation.
                  visibility: public
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: apiRepositoryNotFoundError
                  message: This API version is not linked to a repository
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /audit/logs:
    get:
      tags:
        - Audit Logs
      summary: Get team audit logs
      description: >-
        Gets a list of your team's generated audit events. For a complete list
        of all audit events, read our [Utilizing audit
        logs](https://learning.postman.com/docs/administration/audit-logs/)
        documentation.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                trails:
                  - id: 12
                    ip: 192.0.2.0
                    userAgent: PostmanRuntime/7.29.0 Postman/5.5.4 ChromeApp
                    action: user.login_password_success
                    timestamp: '2022-11-10T18:31:32.000Z'
                    message: >-
                      taylor-lee successfully logged in using the Postman
                      password.
                    data:
                      actor:
                        name: Taylor Lee
                        username: taylor.lee
                        email: taylor.lee@example.com
                        id: 12345678
                        active: true
                      user:
                        name: Taylor Lee
                        username: taylor.lee
                        email: taylor.lee@example.com
                        id: 12345678
                      team:
                        name: Postman-Testing
                        id: 125648
                  - id: 13
                    ip: 192.0.2.0
                    userAgent: null
                    action: team.scim_add_member
                    timestamp: '2022-11-10T17:19:03.000Z'
                    message: Taylor Lee provisioned user Alex Cruz
                    data:
                      actor:
                        name: Taylor Lee
                        username: taylor.lee
                        email: taylor.lee@example.com
                        id: 12345678
                        active: true
                      user:
                        name: Alex Cruz
                        username: alex.cruz
                        email: alex.cruz@example.com
                        id: 87654321
                      team:
                        name: Test-API
                        id: 1234
                  - id: 14
                    ip: null
                    userAgent: null
                    action: user.authaccount.linked
                    timestamp: '2022-11-10T17:19:02.000Z'
                    message: Taylor Lee created account linkage for user.
                    data:
                      actor:
                        name: Taylor Lee
                        username: taylor.lee
                        email: taylor.lee@example.com
                        id: 12345678
                        active: true
                      user:
                        name: Alex Cruz
                        username: alex.cruz
                        email: alex.cruz@example.com
                        id: 87654321
                      team:
                        name: Test-API
                        id: 1234
                      variables:
                        auth_type: okta
                        auth_uid: 8f868a0353fd46cbadfe8a6ab3853b94
                        authaccount_uid: f97535389e8447ae8006b2795a2059e1
                  - id: 15
                    ip: 192.0.2.0
                    userAgent: null
                    action: team.create_group
                    timestamp: '2022-11-10T15:54:47.000Z'
                    message: Taylor Lee created group Test-API.
                    data:
                      actor:
                        name: Taylor Lee
                        username: taylor.lee
                        email: taylor.lee@example.com
                        id: 12345678
                        active: true
                      user:
                        name: Taylor Lee
                        username: taylor.lee
                        email: taylor.lee@example.com
                        id: 12345678
                      team:
                        name: API-Testing
                        id: 11
                      variables:
                        groupId: '1234'
                        groupName: Test-API
                        groupVisibility: team
                nextCursor: 95427049
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: AuthenticationError
                  message: >-
                    Invalid API Key. Every request requires a valid API Key to
                    be sent.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: ForbiddenRequest
                  message: You do not have permissions to view team Audit logs
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /network/private:
    get:
      tags:
        - Private API Network
      summary: Get all elements and folders
      description: >-
        Gets information about the folders and elements added to your [Private
        API
        Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
        Elements are APIs, collections, and workspaces.


        **Note:**


        The `limit` and `offset` parameters are separately applied to elements
        and folders. For example, if you query a `limit` value of `10` and an
        `offset` value `0`, the endpoint returns 10 elements and 10 folders for
        a total of 20 items. The `totalCount` property in the `meta` response is
        the total count of **both** elements and folders.
      parameters:
        - name: X-API-Key
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Successful Response
                  value:
                    elements:
                      - addedAt: '2021-11-29T06:31:24.000Z'
                        addedBy: 12345678
                        createdBy: 12345678
                        createdAt: '2020-06-01T08:32:31.000Z'
                        updatedBy: 12345678
                        updatedAt: '2021-11-29T06:31:24.000Z'
                        type: api
                        id: 5360b75f-447e-467c-9299-12fd6c92450d
                        parentFolderId: 1
                        name: Billing API
                        summary: The payments and account services API.
                        description: null
                        href: >-
                          https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d
                      - addedAt: '2021-11-29T06:31:26.000Z'
                        addedBy: 12345678
                        createdBy: 12345678
                        createdAt: '2020-06-01T13:59:34.000Z'
                        updatedBy: 12345678
                        updatedAt: '2021-11-29T06:31:26.000Z'
                        type: api
                        id: 41f6dc6d-d8ab-45c6-8506-74a25acf5d5f
                        parentFolderId: 2
                        name: Reporting API
                        summary: The reporting API.
                        description: null
                        href: >-
                          https://api.getpostman.com/apis/41f6dc6d-d8ab-45c6-8506-74a25acf5d5f
                    folders:
                      - id: 1
                        parentFolderId: 0
                        updatedAt: '2021-11-29T06:31:24.000Z'
                        updatedBy: 12345678
                        createdBy: 12345678
                        createdAt: '2020-06-01T08:32:31.000Z'
                        name: Billing
                        description: The Billing API.
                        type: folder
                      - id: 2
                        parentFolderId: 0
                        updatedAt: '2022-10-17T11:54:51.000Z'
                        updatedBy: 12345678
                        createdBy: 12345678
                        createdAt: '2021-03-05T06:27:24.000Z'
                        name: Reporting
                        description: null
                        type: folder
                    meta:
                      limit: 1000
                      offset: 0
                      totalCount: 2
                example-1:
                  summary: List Root Folder's Elements
                  value:
                    elements:
                      - addedAt: '2021-11-29T06:31:24.000Z'
                        addedBy: 12345678
                        createdBy: 12345678
                        createdAt: '2020-06-01T08:32:31.000Z'
                        updatedBy: 12345678
                        updatedAt: '2021-11-29T06:31:24.000Z'
                        type: api
                        id: 5360b75f-447e-467c-9299-12fd6c92450d
                        parentFolderId: 1
                        name: Billing API
                        summary: The payments and account services API.
                        description: null
                        href: >-
                          https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d
                      - addedBy: 12345678
                        addedAt: '2022-12-07T18:22:15.000Z'
                        createdBy: 12345678
                        createdAt: '2022-12-07T18:22:15.000Z'
                        updatedBy: 12345678
                        updatedAt: '2022-12-07T18:22:15.000Z'
                        type: collection
                        id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        name: Billing API Collection
                        summary: The Billing API collection.
                        description: null
                        href: >-
                          https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                        parentFolderId: 2
                        environments:
                          - 120403-c6cf0fe2-c637-4d30-a640-ed64ec6d0ddb
                          - 7084-461d8126-22c8-43ed-b99d-27e8a34d8eef
                    folders:
                      - id: 1
                        parentFolderId: 0
                        updatedAt: '2021-11-29T06:31:24.000Z'
                        updatedBy: 12345678
                        createdBy: 12345678
                        createdAt: '2020-06-01T08:32:31.000Z'
                        name: Billing
                        description: The Billing API.
                        type: folder
                    meta:
                      limit: 1000
                      offset: 0
                      totalCount: 2
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: AuthenticationError
                  message: >-
                    Invalid API Key. Every request requires a valid API Key to
                    be sent.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: forbiddenError
                  message: You do not have enough permissions to perform this action.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: serverError
                  message: An error has occurred on the server.
    post:
      tags:
        - Private API Network
      summary: Add an element or folder
      description: >-
        Publishes a element or creates a folder in your [Private API
        Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
        An element is a Postman API, collection, or workspace.


        Include the following in the request body object:


        - `elementType` — The Private API Network element type. One of:
            - `api`
            - `folder`
            - `collection`
            - `workspace`

        In the `elementType` object, include the following values:


        **For APIs and Workspaces:**


        - `id` — A **string** value that contains the element's ID.

        - `parentFolderId` — An **integer** value that contains the element's
        parent folder ID.
            

        **For Collections:**


        - `id` — A **string** value that contains the collection's UID
        (`userId`\-`collectionId`).

        - `summary` — A **string** value that contains the collection's summary.

        - `parentFolderId` — An **integer** value that contains the collection's
        parent folder ID.
            

        **For Private API Network Folders:**


        - `name` — A **string** value that contains the folder's name.

        - `description` — A **string** value that contains the folder's
        description.

        - `parentFolderId` — An **integer** value that contains the folder's
        parent folder ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "{{elementType}}": {
                        "id": "{{elementId}}",
                        "parentFolderId": {{parentFolderId}}
                    }
                }
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Add an API
                  value:
                    addedAt: '2022-06-09T14:48:45.000Z'
                    addedBy: 12345678
                    createdBy: 12345678
                    createdAt: '2021-10-11T09:39:33.000Z'
                    updatedBy: 12345678
                    updatedAt: '2022-12-07T17:54:33.000Z'
                    type: api
                    id: 5360b75f-447e-467c-9299-12fd6c92450d
                    name: Billing API
                    summary: The payments and account services API.
                    description: null
                    href: >-
                      https://api.getpostman.com/apis/fcf87a6d-6d10-4cfa-bed2-0c234ff99f7b
                    parentFolderId: 1
                example-1:
                  summary: Add a Collection
                  value:
                    addedAt: '2022-12-07T18:22:15.000Z'
                    addedBy: 12345678
                    createdBy: 12345678
                    createdAt: '2022-12-07T18:22:15.000Z'
                    updatedBy: 12345678
                    updatedAt: '2022-12-07T18:22:15.000Z'
                    type: collection
                    id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    name: Billing API Collection
                    summary: The Billing API collection.
                    description: null
                    href: >-
                      https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    parentFolderId: 1
                example-2:
                  summary: Add a Collection with Environments
                  value:
                    addedAt: '2022-12-07T18:22:15.000Z'
                    addedBy: 12345678
                    createdBy: 12345678
                    createdAt: '2022-12-07T18:22:15.000Z'
                    updatedBy: 12345678
                    updatedAt: '2022-12-07T18:22:15.000Z'
                    type: collection
                    id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    name: Billing API Collection
                    summary: The Billing API collection.
                    description: null
                    href: >-
                      https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    parentFolderId: 1
                    environments:
                      - 120403-c6cf0fe2-c637-4d30-a640-ed64ec6d0ddb
                      - 7084-461d8126-22c8-43ed-b99d-27e8a34d8eef
                example-3:
                  summary: Add a Workspace
                  value:
                    addedAt: '2022-12-07T17:59:23.000Z'
                    addedBy: 12345678
                    createdBy: 12345678
                    createdAt: '2022-12-07T17:59:23.000Z'
                    updatedBy: 12345678
                    updatedAt: '2022-12-07T17:59:23.000Z'
                    type: workspace
                    id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                    name: Billing Team Workspace
                    summary: The Billing team's workspace.
                    description: null
                    href: >-
                      https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                    parentFolderId: 1
                example-4:
                  summary: Create a Folder
                  value:
                    id: 1
                    parentFolderId: 0
                    updatedAt: '2022-12-07T18:00:39.000Z'
                    updatedBy: 12345678
                    createdBy: 12345678
                    createdAt: '2022-12-07T18:00:39.000Z'
                    name: Billing
                    description: The Billing API.
                    type: folder
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: AuthenticationError
                  message: >-
                    Invalid API Key. Every request requires a valid API Key to
                    be sent.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: forbiddenError
                  message: You do not have enough permissions to perform this action.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified API does not exist.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
        '500':
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: serverError
                  message: An error has occurred on the server.
  /network/private/{elementType}/{elementId}:
    put:
      tags:
        - Private API Network
      summary: Update an element or folder
      description: >-
        Updates an element or folder in your [Private API
        Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
        When you call this endpoint, the `elementType` property must be the
        `api`, `folder`, `collection`, or `workspace` value.


        The `elementId` value is the `api`, `folder`, or `workspace` element's
        ID. For `collection`, this value is the collection's UID
        (`userId`\-`collectionId`).


        Include the following in the request body object:


        - `elementType` — The Private API Network element type. One of:
            - `api`
            - `folder`
            - `collection`
            - `workspace`

        In the `elementType` object, include the following values:


        - `parentFolderId` — The element's new Private API Network folder ID.
            

        **For Collections:**


        - `summary` — A **string** value that contains the collection's new
        summary.
            

        **For Private API Network Folders:**


        You can include the following optional properties:


        - `description` — A **string** value that contains the folder's new
        description.

        - `name` — A **string** value that contains the folder's new name.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "{{elementType}}": {
                        "parentFolderId": {{parentFolderId}}
                    }
                }
      parameters:
        - name: elementType
          in: path
          schema:
            type: string
          required: true
        - name: elementId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: Update an API
                  value: |-
                    {
                        "addedAt": "2022-06-09T14:48:45.000Z",
                        "addedBy": 12345678,
                        "createdBy": 12345678,
                        "createdAt": "2021-10-11T09:39:33.000Z",
                        "updatedBy": 12345678,
                        "updatedAt": "2022-12-07T17:54:33.000Z",
                        "type": "api",
                        "id": "5360b75f-447e-467c-9299-12fd6c92450d",
                        "name": "Billing API",
                        "summary": "The payments and account services API.",
                        "description": null,
                        "href": "https://api.getpostman.com/apis/fcf87a6d-6d10-4cfa-bed2-0c234ff99f7b",
                        "parentFolderId": 1
                    }
                example-1:
                  summary: Update a Collection
                  value: |-
                    {
                        "addedAt": "2022-12-07T18:22:15.000Z",
                        "addedBy": 12345678,
                        "createdBy": 12345678,
                        "createdAt": "2022-12-07T18:22:15.000Z",
                        "updatedBy": 12345678,
                        "updatedAt": "2022-12-07T18:22:15.000Z",
                        "type": "collection",
                        "id": "12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2",
                        "name": "Billing API Collection",
                        "summary": "The Billing API collection.",
                        "description": null,
                        "href": "https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2",
                        "parentFolderId": 1
                    }
                example-2:
                  summary: Update a Workspace
                  value: |-
                    {
                        "addedAt": "2022-12-07T17:59:23.000Z",
                        "addedBy": 12345678,
                        "createdBy": 12345678,
                        "createdAt": "2022-12-07T17:59:23.000Z",
                        "updatedBy": 12345678,
                        "updatedAt": "2022-12-07T17:59:23.000Z",
                        "type": "workspace",
                        "id": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
                        "name": "Billing Team Workspace",
                        "summary": "The Billing team's workspace.",
                        "description": null,
                        "href": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
                        "parentFolderId": 1
                    }
                example-3:
                  summary: Update a Folder
                  value: |-
                    {
                        "id": 1,
                        "parentFolderId": 0,
                        "updatedAt": "2022-12-07T20:27:06.000Z",
                        "updatedBy": 12345678,
                        "createdBy": 12345678,
                        "createdAt": "2022-12-07T17:04:23.000Z",
                        "name": "Billing",
                        "description": "The Billing API.",
                        "type": "folder"
                    }
            application/json:
              schema:
                type: object
              example:
                addedAt: '2022-12-07T18:22:15.000Z'
                addedBy: 12345678
                createdBy: 12345678
                createdAt: '2022-12-07T18:22:15.000Z'
                updatedBy: 12345678
                updatedAt: '2022-12-07T18:22:15.000Z'
                type: collection
                id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                name: Billing API Collection
                summary: The Billing API collection.
                description: null
                href: >-
                  https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                parentFolderId: 1
                environments:
                  - 660a6sa-c8sa37-46ca-9sa1d8-7e8c669d1
                  - 02466-c837-46ca-9sa1d8-7e669d1
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: AuthenticationError
                  message: >-
                    Invalid API Key. Every request requires a valid API Key to
                    be sent.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: forbiddenError
                  message: You do not have enough permissions to perform this action.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified API does not exist.
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
    delete:
      tags:
        - Private API Network
      summary: Remove an element or folder
      description: >-
        Removes an element or delete a folder from your [Private API
        Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).


        **Note:**


        Removing an API, collection, or workspace element does **not** delete
        it. It only removes it from the Private API Network folder.
      parameters:
        - name: elementType
          in: path
          schema:
            type: string
          required: true
        - name: elementId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            text/plain:
              schema:
                type: string
              examples:
                example-0:
                  summary: Remove an API
                  value: |-
                    {
                        "api": {
                            "id": "5360b75f-447e-467c-9299-12fd6c92450d"
                        }
                    }
                example-1:
                  summary: Delete a Folder
                  value: |-
                    {
                        "folder": {
                            "id": "1"
                        }
                    }
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Remove a Collection
                  value:
                    collection:
                      id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                example-1:
                  summary: Remove a Workspace
                  value:
                    workspace:
                      id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: folderNotEmptyError
                message: You need to empty this folder before deleting it.
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: AuthenticationError
                  message: >-
                    Invalid API Key. Every request requires a valid API Key to
                    be sent.
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: forbiddenError
                  message: You do not have enough permissions to perform this action.
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified API does not exist.
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "name": "instanceNotFoundError",
                    "message": "Instance not found for the model Folder, id 1"
                }
        '429':
          description: Too Many Requests
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
  /network/private/network-entity/request/all:
    get:
      tags:
        - Private API Network
      summary: Get all element add requests
      description: "Gets a list requests to add elements to the\_[Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/)."
      parameters:
        - name: X-API-Key
          in: header
          schema:
            type: string
          example: '{{x-api-key}}'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                requests:
                  - id: 1
                    createdBy: 87654321
                    createdAt: '2020-06-01T08:32:31.000Z'
                    status: pending
                    element:
                      type: api
                      id: 360b75f-447e-467c-9299-12fd3c92450d
                      name: Test api
                      summary: Test api summary
                  - id: 2
                    createdBy: 12345678
                    createdAt: '2022-06-09T14:48:45.000Z'
                    message: Please approve this collection
                    status: denied
                    element:
                      type: collection
                      id: 5360b75f-447e-467c-9299-12fd3c92450d
                      name: Test Collection
                      summary: This is a test collection.
                    response:
                      createdAt: '2020-06-01T08:32:31.000Z'
                      createdBy: 2272
                      message: Too many errors, please fix and resubmit
                meta:
                  limit: 10
                  offset: 5
                  totalCount: 100
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                name: invalidParamsError
                message: The specified request does not exist.
  /network/private/network-entity/request/{id}:
    put:
      tags:
        - Private API Network
      summary: Respond to an element add request
      description: >-
        Responds to a user's request to add an element to the [Private API
        Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
        Include the following in the request body:


        - `message` — A **string** value in a `response` object that contains a
        message that details why the user's request was denied.

        - `status` — A **string** value that contains the request's status. One
        of:
            - `denied`
            - `approved`
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"response\": {\n        \"message\":
                {{responderMessage}}\n    },\n    \"status\":
                {{responseStatus}}\n}"
      parameters:
        - name: x-api-key
          in: header
          schema:
            type: string
          example: '{{x-api-key}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: The element request's ID.
          example: '{{requestId}}'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Request Denied
                  value:
                    request:
                      - id: 2
                        createdAt: '2022-06-09T14:48:45.000Z'
                        createdBy: 12345678
                        message: Please add this to the network
                        status: denied
                        element:
                          type: api
                          id: 5360b75f-447e-467c-9299-12fd3c92450d
                          name: Test api
                          summary: This is a test API
                        response:
                          createdAt: '2022-06-09T14:48:45.000Z'
                          createdBy: 2272
                          message: Please fix the API issues first
                example-1:
                  summary: Request Approved
                  value:
                    request:
                      - id: 1
                        createdAt: '2022-06-09T14:48:45.000Z'
                        createdBy: 12345678
                        message: Please add this to the network
                        status: approved
                        element:
                          createdAt: '2022-06-09T14:48:45.000Z'
                          createdBy: 2272
                          type: api
                          id: 5360b75f-447e-467c-9299-12fd3c92450d
                          name: Test api
                          summary: This is a test API
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Request Not Found
                  value:
                    name: RequestNotFound
                    message: No request found for the corresponding ID
                example-1:
                  summary: Invalid Request Payload
                  value:
                    name: invalidParamsError
                    message: Status type can only be denied or approved.
                example-2:
                  summary: Requested Element Already Published
                  value:
                    name: requestEntityAlreadyPublished
                    message: Test api has already been published to the network
                example-3:
                  summary: Request Already Responded To
                  value:
                    name: requestAlreadyResponded
                    message: This request is already responded.
