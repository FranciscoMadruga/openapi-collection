{
	"info": {
		"_postman_id": "d780e4be-2e05-4b95-b36a-30d473a592ed",
		"name": "Flickr",
		"description": "Explore, upload and organize photos on Flickr\n\nContact Support:\n Name: No Contact\n Email: email@example.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27825666",
		"_collection_link": "https://www.postman.com/api-evangelist/workspace/images/collection/35240-d780e4be-2e05-4b95-b36a-30d473a592ed?action=share&creator=27825666&source=collection_link"
	},
	"item": [
		{
			"name": "rest",
			"item": [
				{
					"name": "Activity User Comments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.activity.userComments&api_key=<>&format=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.activity.userComments"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of recent activity on photos commented on by the calling user. Do not poll this method more than once an hour."
					},
					"response": []
				},
				{
					"name": "Activity User Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.activity.userPhotos&api_key=<>&format=<>&timeframe=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.activity.userPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "timeframe",
									"value": "<>",
									"description": "The timeframe in which to return updates for. This can be specified in days ('2d') or hours ('4h'). The default behavoir is to return changes since the beginning of the previous user session."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of recent activity on photos commented on by the calling user. Do not poll this method more than once an hour."
					},
					"response": []
				},
				{
					"name": "Auth Check Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.auth.checkToken&api_key=<>&format=<>&auth_token=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.auth.checkToken"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "auth_token",
									"value": "<>",
									"description": "The authentication token to check."
								}
							]
						},
						"description": "Returns the credentials attached to an authentication token. This call must be signed as specified in the authentication API spec."
					},
					"response": []
				},
				{
					"name": "Auth Get Frob",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.auth.getFrob&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.auth.getFrob"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns a frob to be used during authentication. This method call must be signed, and is deprecated in favour of OAuth."
					},
					"response": []
				},
				{
					"name": "Auth Get Full Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.auth.getFullToken&api_key=<>&format=<>&mini_token=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.auth.getFullToken"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "mini_token",
									"value": "<>",
									"description": "The mini-token typed in by a user. It should be 9 digits long. It may optionally contain dashes."
								}
							]
						},
						"description": "Get the full authentication token for a mini-token. This method call must be signed."
					},
					"response": []
				},
				{
					"name": "Auth Get Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.auth.getToken&api_key=<>&format=<>&frob=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.auth.getToken"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "frob",
									"value": "<>",
									"description": "The frob to check."
								}
							]
						},
						"description": "Returns the auth token for the given frob, if one has been attached. This method call must be signed, and is deprecated in favour of OAuth."
					},
					"response": []
				},
				{
					"name": "Auth Oauth Get Access Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.auth.oauth.getAccessToken&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.auth.oauth.getAccessToken"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Exchange an auth token from the old Authentication API, to an OAuth access token. Calling this method will delete the auth token used to make the request. The request must be signed."
					},
					"response": []
				},
				{
					"name": "Blogs Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.blogs.getList&api_key=<>&format=<>&service=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.blogs.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "service",
									"value": "<>",
									"description": "Optionally only return blogs for a given service id. You can get a list of from flickr.blogs.getServices()."
								}
							]
						},
						"description": "Get a list of configured blogs for the calling user."
					},
					"response": []
				},
				{
					"name": "Blogs Get Services",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.blogs.getServices&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.blogs.getServices"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns a list of Flickr supported blogging services."
					},
					"response": []
				},
				{
					"name": "Blogs Add Photo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.blogs.postPhoto&api_key=<>&format=<>&blog_id=<>&photo_id=<>&title=<>&description=<>&blog_password=<>&service=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.blogs.postPhoto"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "blog_id",
									"value": "<>",
									"description": "The ID of the blog to post to."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "title",
									"value": "<>",
									"description": "The title of the photo. Optional."
								},
								{
									"key": "description",
									"value": "<>",
									"description": "A description of the photo. May contain some limited HTML. Optional."
								},
								{
									"key": "blog_password",
									"value": "<>",
									"description": "The password for the blog (used when the blog does not have a stored password)."
								},
								{
									"key": "service",
									"value": "<>",
									"description": "Optionally only return blogs for a given service id. You can get a list of from flickr.blogs.getServices()."
								}
							]
						},
						"description": "Posts a photo to a blog."
					},
					"response": []
				},
				{
					"name": "Collections Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.collections.getInfo&api_key=<>&format=<>&collection_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.collections.getInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "collection_id",
									"value": "<>",
									"description": "The ID of the collection to fetch information for."
								}
							]
						},
						"description": "Returns information for a single collection. Currently can only be called by the collection owner, this may change."
					},
					"response": []
				},
				{
					"name": "Collections Get Tree",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.collections.getTree&api_key=<>&format=<>&collection_id=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.collections.getTree"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "collection_id",
									"value": "<>",
									"description": "The ID of the collection to fetch information for."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Returns a tree (or sub tree) of collections belonging to a given user."
					},
					"response": []
				},
				{
					"name": "Commons Get Institutions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.commons.getInstitutions&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.commons.getInstitutions"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Retrieves a list of the current Commons institutions."
					},
					"response": []
				},
				{
					"name": "Contacts Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.contacts.getList&api_key=<>&format=<>&filter=<>&page=<>&per_page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.contacts.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "filter",
									"value": "<>",
									"description": "An optional filter of the results. The following values are valid: friends (Only contacts who are friends, and not family), family (Only contacts who are family, and not friends), both (Only contacts who are both friends and family), neither (Only contacts who are neither friends nor family)."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								}
							]
						},
						"description": "Get a list of contacts for the calling user."
					},
					"response": []
				},
				{
					"name": "Contacts Get List Recently Uploaded",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.contacts.getListRecentlyUploaded&api_key=<>&format=<>&date_lastupload=<>&filter=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.contacts.getListRecentlyUploaded"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date_lastupload",
									"value": "<>",
									"description": "Limits the resultset to contacts that have uploaded photos since this date. The date should be in the form of a Unix timestamp. The default offset is (1) hour and the maximum (24) hours."
								},
								{
									"key": "filter",
									"value": "<>",
									"description": "An optional filter of the results. The following values are valid: friends (Only contacts who are friends, and not family), family (Only contacts who are family, and not friends), both (Only contacts who are both friends and family), neither (Only contacts who are neither friends nor family)."
								}
							]
						},
						"description": "Return a list of contacts for a user who have recently uploaded photos along with the total count of photos uploaded. This method is still considered experimental. We don't plan for it to change or to go away but so long as this notice is present you should write your code accordingly."
					},
					"response": []
				},
				{
					"name": "Contacts Get Public List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.contacts.getPublicList&api_key=<>&format=<>&user_id=<>&page=<>&per_page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.contacts.getPublicList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								}
							]
						},
						"description": "Get the contact list for a user."
					},
					"response": []
				},
				{
					"name": "Favorites Add",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.favorites.add&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.favorites.add"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Adds a photo to a user's favorites list."
					},
					"response": []
				},
				{
					"name": "Favorites Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.favorites.getList&api_key=<>&format=<>&min_fave_date=<>&max_fave_date=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.favorites.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "min_fave_date",
									"value": "<>",
									"description": "Minimum date that a photo was favorited on. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_fave_date",
									"value": "<>",
									"description": "Maximum date that a photo was favorited on. The date should be in the form of a unix timestamp."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of the user's favorite photos. Only photos which the calling user has permission to see are returned."
					},
					"response": []
				},
				{
					"name": "Favorites Get Public List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.favorites.getPublicList&api_key=<>&format=<>&user_id=<>&min_fave_date=<>&max_fave_date=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.favorites.getPublicList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "min_fave_date",
									"value": "<>",
									"description": "Minimum date that a photo was favorited on. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_fave_date",
									"value": "<>",
									"description": "Maximum date that a photo was favorited on. The date should be in the form of a unix timestamp."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of favorite public photos for the given user."
					},
					"response": []
				},
				{
					"name": "Favorites Remove",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.favorites.remove&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.favorites.remove"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Adds a photo to a user's favorites list."
					},
					"response": []
				},
				{
					"name": "Galleries Add Photo",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.addPhoto&api_key=<>&gallery_id=<>&photo_id=<>&comment=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.addPhoto"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "gallery_id",
									"value": "<>",
									"description": "The ID of the gallery to add a photo to. Note: this is the compound ID returned in methods like flickr.galleries.getList, and flickr.galleries.getListForPhoto."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "comment",
									"value": "<>",
									"description": "A short comment or story to accompany the photo."
								}
							]
						},
						"description": "Add a photo to a gallery."
					},
					"response": []
				},
				{
					"name": "Galleries Create",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.create&api_key=<>&format=<>&title=<>&description=<>&primary_photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.create"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "title",
									"value": "<>",
									"description": "The title of the photo. Optional."
								},
								{
									"key": "description",
									"value": "<>",
									"description": "A description of the photo. May contain some limited HTML. Optional."
								},
								{
									"key": "primary_photo_id",
									"value": "<>",
									"description": "The first photo to add to your gallery."
								}
							]
						},
						"description": "Create a new gallery for the calling user."
					},
					"response": []
				},
				{
					"name": "Galleries Edit Meta",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.editMeta&api_key=<>&gallery_id=<>&title=<>&description=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.editMeta"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "gallery_id",
									"value": "<>",
									"description": "The ID of the gallery to add a photo to. Note: this is the compound ID returned in methods like flickr.galleries.getList, and flickr.galleries.getListForPhoto."
								},
								{
									"key": "title",
									"value": "<>",
									"description": "The title of the photo. Optional."
								},
								{
									"key": "description",
									"value": "<>",
									"description": "A description of the photo. May contain some limited HTML. Optional."
								}
							]
						},
						"description": "Modify the metadata for a gallery."
					},
					"response": []
				},
				{
					"name": "Galleries Edit Photo",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.editPhoto&api_key=<>&gallery_id=<>&photo_id=<>&comment=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.editPhoto"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "gallery_id",
									"value": "<>",
									"description": "The ID of the gallery to add a photo to. Note: this is the compound ID returned in methods like flickr.galleries.getList, and flickr.galleries.getListForPhoto."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "comment",
									"value": "<>",
									"description": "A short comment or story to accompany the photo."
								}
							]
						},
						"description": "Edit the comment for a gallery photo."
					},
					"response": []
				},
				{
					"name": "Galleries Edit Photos",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.editPhotos&api_key=<>&gallery_id=<>&primary_photo_id=<>&photo_ids=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.editPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "gallery_id",
									"value": "<>",
									"description": "The ID of the gallery to add a photo to. Note: this is the compound ID returned in methods like flickr.galleries.getList, and flickr.galleries.getListForPhoto."
								},
								{
									"key": "primary_photo_id",
									"value": "<>",
									"description": "The first photo to add to your gallery."
								},
								{
									"key": "photo_ids",
									"value": "<>",
									"description": "A comma-delimited list of photo ids to include in the gallery. They will appear in the set in the order sent. This list must contain the primary photo id. This list of photos replaces the existing list."
								}
							]
						},
						"description": "Modify the photos in a gallery. Use this method to add, remove and re-order photos."
					},
					"response": []
				},
				{
					"name": "Galleries Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.getInfo&api_key=<>&format=<>&gallery_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.getInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "gallery_id",
									"value": "<>",
									"description": "The ID of the gallery to add a photo to. Note: this is the compound ID returned in methods like flickr.galleries.getList, and flickr.galleries.getListForPhoto."
								}
							]
						},
						"description": "Returns information about a gallery."
					},
					"response": []
				},
				{
					"name": "Galleries Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.getList&api_key=<>&format=<>&user_id=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return the list of galleries created by a user. Sorted from newest to oldest."
					},
					"response": []
				},
				{
					"name": "Galleries Get List For Photo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.getListForPhoto&api_key=<>&format=<>&photo_id=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.getListForPhoto"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return the list of galleries to which a photo has been added. Galleries are returned sorted by date which the photo was added to the gallery."
					},
					"response": []
				},
				{
					"name": "Galleries Get Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.galleries.getPhotos&api_key=<>&format=<>&gallery_id=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.galleries.getPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "gallery_id",
									"value": "<>",
									"description": "The ID of the gallery to add a photo to. Note: this is the compound ID returned in methods like flickr.galleries.getList, and flickr.galleries.getListForPhoto."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return the list of photos for a gallery."
					},
					"response": []
				},
				{
					"name": "Groups Browse",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.browse&api_key=<>&format=<>&cat_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.browse"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "cat_id",
									"value": "<>",
									"description": "The category id to fetch a list of groups and sub-categories for. If not specified, it defaults to zero, the root of the category tree."
								}
							]
						},
						"description": "Browse the group category tree, finding groups and sub-categories."
					},
					"response": []
				},
				{
					"name": "Groups Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.getInfo&api_key=<>&format=<>&group_id=<>&lang=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.getInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "group_id",
									"value": "<>",
									"description": "The NSID of the group to fetch information for."
								},
								{
									"key": "lang",
									"value": "<>",
									"description": "The language of the group name and description to fetch. If the language is not found, the primary language of the group will be returned. Valid values are the same as in feeds."
								}
							]
						},
						"description": "Get information about a group."
					},
					"response": []
				},
				{
					"name": "Groups Search",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.search&api_key=<>&format=<>&text=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.search"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "text",
									"value": "<>",
									"description": "The text to search for."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Search for groups. 18+ groups will only be returned for authenticated calls where the authenticated user is over 18."
					},
					"response": []
				},
				{
					"name": "Groups Members Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.members.getList&api_key=<>&format=<>&group_id=<>&membertypes=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.members.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "group_id",
									"value": "<>",
									"description": "The NSID of the group to fetch information for."
								},
								{
									"key": "membertypes",
									"value": "<>",
									"description": "Comma separated list of member types. Accepted values: 2 (member), 3 (moderator), 4 (admin). By default returns all types. (Returning super rare member type \"1: narwhal\" isn't supported by this API method)"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of the members of a group. The call must be signed on behalf of a Flickr member, and the ability to see the group membership will be determined by the Flickr member's group privileges."
					},
					"response": []
				},
				{
					"name": "Groups Pools Add",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.pools.add&api_key=<>&photo_id=<>&group_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.pools.add"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "group_id",
									"value": "<>",
									"description": "The NSID of the group to fetch information for."
								}
							]
						},
						"description": "Add a photo to a group's pool."
					},
					"response": []
				},
				{
					"name": "Groups Pools Get Context",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.pools.getContext&api_key=<>&format=<>&photo_id=<>&group_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.pools.getContext"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "group_id",
									"value": "<>",
									"description": "The NSID of the group to fetch information for."
								}
							]
						},
						"description": "Returns next and previous photos for a photo in a group pool."
					},
					"response": []
				},
				{
					"name": "Groups Pools Get Groups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.pools.getGroups&api_key=<>&format=<>&page=<>&per_page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.pools.getGroups"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								}
							]
						},
						"description": "Returns a list of groups to which you can add photos."
					},
					"response": []
				},
				{
					"name": "Groups Pools Get Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.pools.getPhotos&api_key=<>&format=<>&tags=<>&user_id=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.pools.getPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "tags",
									"value": "<>",
									"description": "A space-seperated list of tags to apply to the photo. Optional."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of pool photos for a given group, based on the permissions of the group and the user logged in (if any)."
					},
					"response": []
				},
				{
					"name": "Groups Pools Remove",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.groups.pools.remove&api_key=<>&photo_id=<>&group_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.groups.pools.remove"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "group_id",
									"value": "<>",
									"description": "The NSID of the group to fetch information for."
								}
							]
						},
						"description": "Remove a photo from a group pool."
					},
					"response": []
				},
				{
					"name": "Interestingness Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.interestingness.getList&api_key=<>&format=<>&date=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.interestingness.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns the list of interesting photos for the most recent day or a user-specified date."
					},
					"response": []
				},
				{
					"name": "Machinetags Get Namespaces",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.machinetags.getNamespaces&api_key=<>&format=<>&predicate=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.machinetags.getNamespaces"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "predicate",
									"value": "<>",
									"description": "Limit the list of namespaces returned to those that have the following predicate."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return a list of unique namespaces, optionally limited by a given predicate, in alphabetical order."
					},
					"response": []
				},
				{
					"name": "Machinetags Get Pairs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.machinetags.getPairs&api_key=<>&format=<>&namespace=<>&predicate=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.machinetags.getPairs"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "namespace",
									"value": "<>",
									"description": "Limit the list of pairs returned to those that have the following namespace."
								},
								{
									"key": "predicate",
									"value": "<>",
									"description": "Limit the list of namespaces returned to those that have the following predicate."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return a list of unique namespace and predicate pairs, optionally limited by predicate or namespace, in alphabetical order."
					},
					"response": []
				},
				{
					"name": "Machinetags Get Predicates",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.machinetags.getPredicates&api_key=<>&format=<>&namespace=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.machinetags.getPredicates"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "namespace",
									"value": "<>",
									"description": "Limit the list of pairs returned to those that have the following namespace."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return a list of unique predicates, optionally limited by a given namespace."
					},
					"response": []
				},
				{
					"name": "Machinetags Get Recent Values",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.machinetags.getRecentValues&api_key=<>&format=<>&namespace=<>&predicate=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.machinetags.getRecentValues"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "namespace",
									"value": "<>",
									"description": "Limit the list of pairs returned to those that have the following namespace."
								},
								{
									"key": "predicate",
									"value": "<>",
									"description": "Limit the list of namespaces returned to those that have the following predicate."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Fetch recently used (or created) machine tags values."
					},
					"response": []
				},
				{
					"name": "Machinetags Get Values",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.machinetags.getValues&api_key=<>&format=<>&namespace=<>&predicate=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.machinetags.getValues"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "namespace",
									"value": "<>",
									"description": "Limit the list of pairs returned to those that have the following namespace."
								},
								{
									"key": "predicate",
									"value": "<>",
									"description": "Limit the list of namespaces returned to those that have the following predicate."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return a list of unique values for a namespace and predicate."
					},
					"response": []
				},
				{
					"name": "Panda Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.panda.getList&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.panda.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Return a list of Flickr pandas, from whom you can request photos using the flickr.panda.getPhotos API method. More information about the pandas can be found on the dev blog."
					},
					"response": []
				},
				{
					"name": "Panda Get Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.panda.getPhotos&api_key=<>&format=<>&panda_name=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.panda.getPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "panda_name",
									"value": "<>",
									"description": "The name of the panda to ask for photos from. You can fetch a list of all the current pandas using the flickr.panda.getList API method."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Ask the Flickr Pandas for a list of recent public (and \"safe\") photos. More information about the pandas can be found on the dev blog."
					},
					"response": []
				},
				{
					"name": "People Find By Email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.people.findByEmail&api_key=<>&format=<>&find_email=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.people.findByEmail"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "find_email",
									"value": "<>",
									"description": "The email address of the user to find (may be primary or secondary)."
								}
							]
						},
						"description": "Return a user's NSID, given their email address"
					},
					"response": []
				},
				{
					"name": "People Find By Username",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.people.findByUsername&api_key=<>&format=<>&username=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.people.findByUsername"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "username",
									"value": "<>",
									"description": "The username of the user to lookup."
								}
							]
						},
						"description": "Return a user's NSID, given their username."
					},
					"response": []
				},
				{
					"name": "People Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.people.getInfo&api_key=<>&format=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.people.getInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Get information about a user."
					},
					"response": []
				},
				{
					"name": "People Get Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.people.getPhotos&api_key=<>&format=<>&user_id=<>&safe_search=<>&min_upload_date=<>&max_upload_date=<>&min_taken_date=<>&max_taken_date=<>&content_type=<>&privacy_filter=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.people.getPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "safe_search",
									"value": "<>",
									"description": "Safe search setting. Accepted values: 1 (safe), 2 (moderate), 3 (restricted)"
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "content_type",
									"value": "<>",
									"description": "Set to 1 for Photo, 2 for Screenshot, or 3 for Other. Optional."
								},
								{
									"key": "privacy_filter",
									"value": "<>",
									"description": "Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)"
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return photos from the given user's photostream. Only photos visible to the calling user will be returned. This method must be authenticated; to return public photos for a user, use flickr.people.getPublicPhotos."
					},
					"response": []
				},
				{
					"name": "People Get Photos Of",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.people.getPhotosOf&api_key=<>&format=<>&user_id=<>&owner_id=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.people.getPhotosOf"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "owner_id",
									"value": "<>",
									"description": "An NSID of a Flickr member. This will restrict the list of photos to those taken by that member."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of photos containing a particular Flickr member."
					},
					"response": []
				},
				{
					"name": "People Get Public Groups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.people.getPublicGroups&api_key=<>&format=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.people.getPublicGroups"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Returns the list of public groups a user is a member of."
					},
					"response": []
				},
				{
					"name": "People Get Public Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.people.getPublicPhotos&api_key=<>&format=<>&user_id=<>&safe_search=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.people.getPublicPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "safe_search",
									"value": "<>",
									"description": "Safe search setting. Accepted values: 1 (safe), 2 (moderate), 3 (restricted)"
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of public photos for the given user."
					},
					"response": []
				},
				{
					"name": "People Get Upload Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.people.getUploadStatus&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.people.getUploadStatus"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns information for the calling user related to photo uploads."
					},
					"response": []
				},
				{
					"name": "Photos Add Tags",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.addTags&api_key=<>&photo_id=<>&tags=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.addTags"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "tags",
									"value": "<>",
									"description": "A space-seperated list of tags to apply to the photo. Optional."
								}
							]
						},
						"description": "Add tags to a photo."
					},
					"response": []
				},
				{
					"name": "Photos Delete",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.delete&api_key=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.delete"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Delete a photo from Flickr."
					},
					"response": []
				},
				{
					"name": "Photos Get All Contexts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getAllContexts&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getAllContexts"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Returns all visible sets and pools the photo belongs to."
					},
					"response": []
				},
				{
					"name": "Photos Get Contacts Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getContactsPhotos&api_key=<>&format=<>&count=<>&just_friends=<>&single_photo=<>&include_self=<>&extras=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getContactsPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "count",
									"value": "<>",
									"description": "Number of photos to return. Defaults to 10, maximum 50. This is only used if single_photo is not passed."
								},
								{
									"key": "just_friends",
									"value": "<>",
									"description": "Set as 1 to only show photos from friends and family (excluding regular contacts)."
								},
								{
									"key": "single_photo",
									"value": "<>",
									"description": "Only fetch one photo (the latest) per contact, instead of all photos in chronological order."
								},
								{
									"key": "include_self",
									"value": "<>",
									"description": "Set to 1 to include photos from the calling user."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								}
							]
						},
						"description": "Fetch a list of recent photos from the calling users' contacts."
					},
					"response": []
				},
				{
					"name": "Photos Get Contacts Public Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getContactsPublicPhotos&api_key=<>&format=<>&user_id=<>&count=<>&just_friends=<>&single_photo=<>&include_self=<>&extras=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getContactsPublicPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "count",
									"value": "<>",
									"description": "Number of photos to return. Defaults to 10, maximum 50. This is only used if single_photo is not passed."
								},
								{
									"key": "just_friends",
									"value": "<>",
									"description": "Set as 1 to only show photos from friends and family (excluding regular contacts)."
								},
								{
									"key": "single_photo",
									"value": "<>",
									"description": "Only fetch one photo (the latest) per contact, instead of all photos in chronological order."
								},
								{
									"key": "include_self",
									"value": "<>",
									"description": "Set to 1 to include photos from the calling user."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								}
							]
						},
						"description": "Fetch a list of recent public photos from a users' contacts."
					},
					"response": []
				},
				{
					"name": "Photos Get Context",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getContext&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getContext"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Returns next and previous photos for a photo in a photostream."
					},
					"response": []
				},
				{
					"name": "Photos Get Counts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getCounts&api_key=<>&format=<>&dates=<>&taken_dates=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getCounts"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "dates",
									"value": "<>",
									"description": "A comma delimited list of unix timestamps, denoting the periods to return counts for. They should be specified smallest first."
								},
								{
									"key": "taken_dates",
									"value": "<>",
									"description": "A comma delimited list of mysql datetimes, denoting the periods to return counts for. They should be specified smallest first."
								}
							]
						},
						"description": "Returns next and previous photos for a photo in a photostream."
					},
					"response": []
				},
				{
					"name": "Photos Get Exif",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getExif&api_key=<>&format=<>&photo_id=<>&secret=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getExif"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "secret",
									"value": "<>",
									"description": "The secret for the photo. If the correct secret is passed then permissions checking is skipped. This enables the 'sharing' of individual photos by passing around the id and secret."
								}
							]
						},
						"description": "Retrieves a list of EXIF/TIFF/GPS tags for a given photo. The calling user must have permission to view the photo."
					},
					"response": []
				},
				{
					"name": "Photos Get Favorites",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getFavorites&api_key=<>&format=<>&photo_id=<>&page=<>&per_page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getFavorites"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								}
							]
						},
						"description": "Returns the list of people who have favorited a given photo."
					},
					"response": []
				},
				{
					"name": "Photos Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getInfo&api_key=<>&format=<>&photo_id=<>&secret=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "secret",
									"value": "<>",
									"description": "The secret for the photo. If the correct secret is passed then permissions checking is skipped. This enables the 'sharing' of individual photos by passing around the id and secret."
								}
							]
						},
						"description": "Get information about a photo. The calling user must have permission to view the photo."
					},
					"response": []
				},
				{
					"name": "Photos Get Not In Set",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getNotInSet&api_key=<>&format=<>&max_upload_date=<>&min_upload_date=<>&min_taken_date=<>&max_taken_date=<>&privacy_filter=<>&media=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getNotInSet"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "privacy_filter",
									"value": "<>",
									"description": "Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)"
								},
								{
									"key": "media",
									"value": "<>",
									"description": "Filter results by media type. Possible values are all (default), photos, videos"
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of your photos that are not part of any sets."
					},
					"response": []
				},
				{
					"name": "Photos Get Perms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getPerms&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getPerms"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Get permissions for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Get Recent",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getRecent&api_key=<>&format=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getRecent"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns the list of people who have favorited a given photo."
					},
					"response": []
				},
				{
					"name": "Photos Get Sizes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getSizes&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getSizes"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Returns the available sizes for a photo. The calling user must have permission to view the photo."
					},
					"response": []
				},
				{
					"name": "Photos Get Untagged",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getUntagged&api_key=<>&format=<>&max_upload_date=<>&min_upload_date=<>&min_taken_date=<>&max_taken_date=<>&privacy_filter=<>&media=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getUntagged"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "privacy_filter",
									"value": "<>",
									"description": "Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)"
								},
								{
									"key": "media",
									"value": "<>",
									"description": "Filter results by media type. Possible values are all (default), photos, videos"
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of your photos that are not tagged."
					},
					"response": []
				},
				{
					"name": "Photos Get With Geo Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getWithGeoData&api_key=<>&format=<>&max_upload_date=<>&min_upload_date=<>&min_taken_date=<>&max_taken_date=<>&privacy_filter=<>&media=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getWithGeoData"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "privacy_filter",
									"value": "<>",
									"description": "Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)"
								},
								{
									"key": "media",
									"value": "<>",
									"description": "Filter results by media type. Possible values are all (default), photos, videos"
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of your geo-tagged photos."
					},
					"response": []
				},
				{
					"name": "Photos Get Without Geo Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getWithoutGeoData&api_key=<>&format=<>&max_upload_date=<>&min_upload_date=<>&min_taken_date=<>&max_taken_date=<>&privacy_filter=<>&media=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getWithoutGeoData"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "privacy_filter",
									"value": "<>",
									"description": "Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)"
								},
								{
									"key": "media",
									"value": "<>",
									"description": "Filter results by media type. Possible values are all (default), photos, videos"
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Returns a list of your photos which haven't been geo-tagged."
					},
					"response": []
				},
				{
					"name": "Photos Get Recently Updated",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.getRecentlyUpdated&api_key=<>&format=<>&min_date=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.getRecentlyUpdated"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "min_date",
									"value": "<>",
									"description": "A Unix timestamp or any English textual datetime description indicating the date from which modifications should be compared."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return a list of your photos that have been recently created or which have been recently modified. Recently modified may mean that the photo's metadata (title, description, tags) may have been changed or a comment has been added (or just modified somehow :-)"
					},
					"response": []
				},
				{
					"name": "Photos Remove Tag",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.removeTag&api_key=<>&photo_id=<>&tag_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.removeTag"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "tag_id",
									"value": "<>",
									"description": "The tag to remove from the photo. This parameter should contain a tag id, as returned by flickr.photos.getInfo."
								}
							]
						},
						"description": "Remove a tag from a photo."
					},
					"response": []
				},
				{
					"name": "Photos Search",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.search&api_key=<>&format=<>&user_id=<>&tags=<>&tag_mode=<>&text=<>&min_upload_date=<>&max_upload_date=<>&min_taken_date=<>&max_taken_date=<>&license=<>&sort=<>&privacy_filter=<>&hbox=<>&accuracy=<>&safe_search=<>&content_type=<>&machine_tags=<>&machine_tag_mode=<>&group_id=<>&contacts=<>&woe_id=<>&place_id=<>&media=<>&has_geo=<>&geo_context=<>&lat=<>&lon=<>&radius=<>&radius_units=<>&is_commons=<>&is_gallery=<>&is_getty=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.search"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "tags",
									"value": "<>",
									"description": "A space-seperated list of tags to apply to the photo. Optional."
								},
								{
									"key": "tag_mode",
									"value": "<>",
									"description": "Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified."
								},
								{
									"key": "text",
									"value": "<>",
									"description": "The text to search for."
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "license",
									"value": "<>",
									"description": "The license id for photos (for possible values see the flickr.photos.licenses.getInfo method). Multiple licenses may be comma-separated."
								},
								{
									"key": "sort",
									"value": "<>",
									"description": "The order in which to sort returned photos. Deafults to date-posted-desc (unless you are doing a radial geo query, in which case the default sorting is by ascending distance from the point specified). The possible values are: date-posted-asc, date-posted-desc, date-taken-asc, date-taken-desc, interestingness-desc, interestingness-asc, and relevance."
								},
								{
									"key": "privacy_filter",
									"value": "<>",
									"description": "Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)"
								},
								{
									"key": "hbox",
									"value": "<>",
									"description": "A comma-delimited list of 4 values defining the Bounding Box of the area that will be searched. See API docs for more info."
								},
								{
									"key": "accuracy",
									"value": "<>",
									"description": "Recorded accuracy level of the location information. Current range is 1-16: World level is 1, Country is ~3, Region is ~6, City is ~11, Street is ~16. Defaults to maximum value if not specified."
								},
								{
									"key": "safe_search",
									"value": "<>",
									"description": "Safe search setting. Accepted values: 1 (safe), 2 (moderate), 3 (restricted)"
								},
								{
									"key": "content_type",
									"value": "<>",
									"description": "Set to 1 for Photo, 2 for Screenshot, or 3 for Other. Optional."
								},
								{
									"key": "machine_tags",
									"value": "<>",
									"description": "Machine tag(s). See API docs for format. Multiple machine tags may be queried by passing a comma-separated list. The number of machine tags you can pass in a single query depends on the tag mode (AND or OR) that you are querying with. \"AND\" queries are limited to (16) machine tags. \"OR\" queries are limited to (8)."
								},
								{
									"key": "machine_tag_mode",
									"value": "<>",
									"description": "Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified."
								},
								{
									"key": "group_id",
									"value": "<>",
									"description": "The NSID of the group to fetch information for."
								},
								{
									"key": "contacts",
									"value": "<>",
									"description": "Search your contacts. Either 'all' or 'ff' for just friends and family. (Experimental)"
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "media",
									"value": "<>",
									"description": "Filter results by media type. Possible values are all (default), photos, videos"
								},
								{
									"key": "has_geo",
									"value": "<>",
									"description": "Any photo that has been geotagged, or if the value is \"0\" any photo that has not been geotagged. See API docs for more info."
								},
								{
									"key": "geo_context",
									"value": "<>",
									"description": "Geo context is a numeric value representing the photo's geotagginess beyond latitude and longitude. See API docs for more info. Accepted values: 0 (not defined), 1 (indoors), 2 (outdoors)"
								},
								{
									"key": "lat",
									"value": "<>",
									"description": "A valid latitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "lon",
									"value": "<>",
									"description": "A valid longitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "radius",
									"value": "<>",
									"description": "A valid radius used for geo queries, greater than zero and less than 20 miles (or 32 kilometers), for use with point-based geo queries. The default value is 5 (km)."
								},
								{
									"key": "radius_units",
									"value": "<>",
									"description": "The unit of measure when doing radial geo queries. Valid options are \"mi\" (miles) and \"km\" (kilometers). The default is \"km\"."
								},
								{
									"key": "is_commons",
									"value": "<>",
									"description": "Limit the scope of the search to only photos that are part of the Flickr Commons project. Default is false."
								},
								{
									"key": "is_gallery",
									"value": "<>",
									"description": "Limit the scope of the search to only photos that are in a gallery? Default is false, search all photos."
								},
								{
									"key": "is_getty",
									"value": "<>",
									"description": "Limit the scope of the search to only photos that are for sale on Getty. Default is false."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return a list of photos matching some criteria. Only photos visible to the calling user will be returned. To return private or semi-private photos, the caller must be authenticated with 'read' permissions, and have permission to view the photos. Unauthenticated calls will only return public photos."
					},
					"response": []
				},
				{
					"name": "Photos Set Content Type",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.setContentType&api_key=<>&photo_id=<>&content_type=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.setContentType"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "content_type",
									"value": "<>",
									"description": "Set to 1 for Photo, 2 for Screenshot, or 3 for Other. Optional."
								}
							]
						},
						"description": "Set the content type of a photo."
					},
					"response": []
				},
				{
					"name": "Photos Set Dates",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.setDates&api_key=<>&photo_id=<>&date_posted=<>&date_taken=<>&date_taken_granularity=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.setDates"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "date_posted",
									"value": "<>",
									"description": "The date the photo was uploaded to flickr (see the dates documentation)"
								},
								{
									"key": "date_taken",
									"value": "<>",
									"description": "The date the photo was taken (see the dates documentation)"
								},
								{
									"key": "date_taken_granularity",
									"value": "<>",
									"description": "The granularity of the date the photo was taken (see the dates documentation)"
								}
							]
						},
						"description": "Set one or both of the dates for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Set Meta",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.setMeta&api_key=<>&photo_id=<>&title=<>&description=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.setMeta"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "title",
									"value": "<>",
									"description": "The title of the photo. Optional."
								},
								{
									"key": "description",
									"value": "<>",
									"description": "A description of the photo. May contain some limited HTML. Optional."
								}
							]
						},
						"description": "Set the meta information for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Set Perms",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.setPerms&api_key=<>&format=<>&photo_id=<>&is_public=<>&is_friend=<>&is_family=<>&perm_comment=<>&perm_addmeta=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.setPerms"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "is_public",
									"value": "<>",
									"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
								},
								{
									"key": "is_friend",
									"value": "<>",
									"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
								},
								{
									"key": "is_family",
									"value": "<>",
									"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
								},
								{
									"key": "perm_comment",
									"value": "<>",
									"description": "Who can add comments to the photo and its notes. one of: 0: nobody, 1: friends & family, 2: contacts, 3: everybody."
								},
								{
									"key": "perm_addmeta",
									"value": "<>",
									"description": "Who can add notes and tags to the photo. one of: 0: nobody / just the owner, 1: friends & family, 2: contacts, 3: everybody."
								}
							]
						},
						"description": "Set permissions for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Set Safety Level",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.setSafetyLevel&api_key=<>&format=<>&photo_id=<>&safety_level=<>&hidden=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.setSafetyLevel"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "safety_level",
									"value": "<>",
									"description": "Set to 1 for Safe, 2 for Moderate, or 3 for Restricted. Optional."
								},
								{
									"key": "hidden",
									"value": "<>",
									"description": "Set to 1 to keep the photo in global search results, 2 to hide from public searches. Optional."
								}
							]
						},
						"description": "Set the safety level of a photo."
					},
					"response": []
				},
				{
					"name": "Photos Set Tags",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.setTags&api_key=<>&photo_id=<>&tags=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.setTags"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "tags",
									"value": "<>",
									"description": "A space-seperated list of tags to apply to the photo. Optional."
								}
							]
						},
						"description": "Set the tags for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Comments Add Comment",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.comments.addComment&api_key=<>&format=<>&photo_id=<>&comment_text=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.comments.addComment"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "comment_text",
									"value": "<>",
									"description": "Text of the comment."
								}
							]
						},
						"description": "Add comment to a photo as the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Photos Comments Delete Comment",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.comments.deleteComment&api_key=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.comments.deleteComment"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Delete comment as the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Photos Comments Edit Comment",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.comments.editComment&api_key=<>&comment_id=<>&comment_text=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.comments.editComment"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "comment_id",
									"value": "<>",
									"description": "The id of the comment to edit."
								},
								{
									"key": "comment_text",
									"value": "<>",
									"description": "Text of the comment."
								}
							]
						},
						"description": "Edit the text of a comment as the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Photos Comments Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.comments.getList&api_key=<>&format=<>&photo_id=<>&min_comment_date=<>&max_comment_date=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.comments.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "min_comment_date",
									"value": "<>",
									"description": "Minimum date that a comment was added. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_comment_date",
									"value": "<>",
									"description": "Maximum date that a comment was added. The date should be in the form of a unix timestamp."
								}
							]
						},
						"description": "Returns the comments for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Comments Get Recent For Contacts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.comments.getRecentForContacts&api_key=<>&format=<>&date_lastcomment=<>&contacts_filter=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.comments.getRecentForContacts"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date_lastcomment",
									"value": "<>",
									"description": "Limits the resultset to photos that have been commented on since this date. The date should be in the form of a Unix timestamp. The default, and maximum, offset is (1) hour."
								},
								{
									"key": "contacts_filter",
									"value": "<>",
									"description": "A comma-separated list of contact NSIDs to limit the scope of the query to."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return the list of photos belonging to your contacts that have been commented on recently."
					},
					"response": []
				},
				{
					"name": "Photos Geo Batch Correct Location",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.batchCorrectLocation&api_key=<>&lat=<>&lon=<>&accuracy=<>&place_id=<>&woe_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.batchCorrectLocation"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "lat",
									"value": "<>",
									"description": "A valid latitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "lon",
									"value": "<>",
									"description": "A valid longitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "accuracy",
									"value": "<>",
									"description": "Recorded accuracy level of the location information. Current range is 1-16: World level is 1, Country is ~3, Region is ~6, City is ~11, Street is ~16. Defaults to maximum value if not specified."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								}
							]
						},
						"description": "Correct the places hierarchy for all the photos for a user at a given latitude, longitude and accuracy. Batch corrections are processed in a delayed queue so it may take a few minutes before the changes are reflected in a user's photos."
					},
					"response": []
				},
				{
					"name": "Photos Geo Correct Location",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.correctLocation&api_key=<>&photo_id=<>&place_id=<>&woe_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.correctLocation"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								}
							]
						},
						"description": "Corrects a photo's location."
					},
					"response": []
				},
				{
					"name": "Photos Geo Get Location",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.getLocation&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.getLocation"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Get the geo data (latitude and longitude and the accuracy level) for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Geo Get Perms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.getPerms&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.getPerms"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Get permissions for who may view geo data for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Geo Photos For Location",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.photosForLocation&api_key=<>&format=<>&lat=<>&lon=<>&accuracy=<>&extras=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.photosForLocation"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "lat",
									"value": "<>",
									"description": "A valid latitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "lon",
									"value": "<>",
									"description": "A valid longitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "accuracy",
									"value": "<>",
									"description": "Recorded accuracy level of the location information. Current range is 1-16: World level is 1, Country is ~3, Region is ~6, City is ~11, Street is ~16. Defaults to maximum value if not specified."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Return a list of photos for the calling user at a specific latitude, longitude and accuracy"
					},
					"response": []
				},
				{
					"name": "Photos Geo Remove Location",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.removeLocation&api_key=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.removeLocation"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Removes the geo data associated with a photo."
					},
					"response": []
				},
				{
					"name": "Photos Geo Set Context",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.setContext&api_key=<>&photo_id=<>&context=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.setContext"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "context",
									"value": "<>",
									"description": "Context is a numeric value representing the photo's geotagginess beyond latitude and longitude. For example, you may wish to indicate that a photo was taken \"indoors\" or \"outdoors\". The current list of context IDs is: 0 (not defined), 1 (indoors), 2 (outdoors). The default context for geotagged photos is 0, or \"not defined\"."
								}
							]
						},
						"description": "Indicate the state of a photo's geotagginess beyond latitude and longitude. Note : photos passed to this method must already be geotagged (using the flickr.photos.geo.setLocation method)."
					},
					"response": []
				},
				{
					"name": "Photos Geo Set Location",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.setLocation&api_key=<>&format=<>&photo_id=<>&lat=<>&lon=<>&accuracy=<>&context=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.setLocation"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "lat",
									"value": "<>",
									"description": "A valid latitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "lon",
									"value": "<>",
									"description": "A valid longitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "accuracy",
									"value": "<>",
									"description": "Recorded accuracy level of the location information. Current range is 1-16: World level is 1, Country is ~3, Region is ~6, City is ~11, Street is ~16. Defaults to maximum value if not specified."
								},
								{
									"key": "context",
									"value": "<>",
									"description": "Context is a numeric value representing the photo's geotagginess beyond latitude and longitude. For example, you may wish to indicate that a photo was taken \"indoors\" or \"outdoors\". The current list of context IDs is: 0 (not defined), 1 (indoors), 2 (outdoors). The default context for geotagged photos is 0, or \"not defined\"."
								}
							]
						},
						"description": "Sets the geo data (latitude and longitude and, optionally, the accuracy level) for a photo. Before users may assign location data to a photo they must define who, by default, may view that information. Users can edit this preference at http://www.flickr.com/account/geo/privacy/. If a user has not set this preference, the API method will return an error."
					},
					"response": []
				},
				{
					"name": "Photos Geo Set Perms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.geo.setPerms&api_key=<>&is_public=<>&is_contact=<>&is_friend=<>&is_family=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.geo.setPerms"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "is_public",
									"value": "<>",
									"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
								},
								{
									"key": "is_contact",
									"value": "<>",
									"description": "1 to set viewing permissions for the photo's location data to contacts, 0 to set it to private."
								},
								{
									"key": "is_friend",
									"value": "<>",
									"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
								},
								{
									"key": "is_family",
									"value": "<>",
									"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Set the permission for who may view the geo data associated with a photo."
					},
					"response": []
				},
				{
					"name": "Photos Licenses Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.licenses.getInfo&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.licenses.getInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Fetches a list of available photo licenses for Flickr."
					},
					"response": []
				},
				{
					"name": "Photos Licenses Set Info",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.licenses.setInfo&api_key=<>&photo_id=<>&license_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.licenses.setInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "license_id",
									"value": "<>",
									"description": "The license to apply, or 0 (zero) to remove the current license. Note : as of this writing the \"no known copyright restrictions\" license (7) is not a valid argument."
								}
							]
						},
						"description": "Sets the license for a photo."
					},
					"response": []
				},
				{
					"name": "Photos Notes Add",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.notes.add&api_key=<>&format=<>&photo_id=<>&note_x=<>&note_y=<>&note_w=<>&note_h=<>&note_text=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.notes.add"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "note_x",
									"value": "<>",
									"description": "The left coordinate of the note"
								},
								{
									"key": "note_y",
									"value": "<>",
									"description": "The top coordinate of the note"
								},
								{
									"key": "note_w",
									"value": "<>",
									"description": "The width of the note"
								},
								{
									"key": "note_h",
									"value": "<>",
									"description": "The height of the note"
								},
								{
									"key": "note_text",
									"value": "<>",
									"description": "The description of the note"
								}
							]
						},
						"description": "Add a note to a photo. Coordinates and sizes are in pixels, based on the 500px image size shown on individual photo pages."
					},
					"response": []
				},
				{
					"name": "Photos Notes Delete",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.notes.delete&api_key=<>&note_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.notes.delete"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "note_id",
									"value": "<>",
									"description": "The id of the note to delete"
								}
							]
						},
						"description": "Delete a note from a photo."
					},
					"response": []
				},
				{
					"name": "Photos Notes Edit",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.notes.edit&api_key=<>&note_id=<>&note_x=<>&note_y=<>&note_w=<>&note_h=<>&note_text=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.notes.edit"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "note_id",
									"value": "<>",
									"description": "The id of the note to delete"
								},
								{
									"key": "note_x",
									"value": "<>",
									"description": "The left coordinate of the note"
								},
								{
									"key": "note_y",
									"value": "<>",
									"description": "The top coordinate of the note"
								},
								{
									"key": "note_w",
									"value": "<>",
									"description": "The width of the note"
								},
								{
									"key": "note_h",
									"value": "<>",
									"description": "The height of the note"
								},
								{
									"key": "note_text",
									"value": "<>",
									"description": "The description of the note"
								}
							]
						},
						"description": "Edit a note on a photo. Coordinates and sizes are in pixels, based on the 500px image size shown on individual photo pages."
					},
					"response": []
				},
				{
					"name": "Photos People Add",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.people.add&api_key=<>&photo_id=<>&user_id=<>&person_x=<>&person_y=<>&person_w=<>&person_h=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.people.add"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "person_x",
									"value": "<>",
									"description": "The left-most pixel co-ordinate of the box around the person."
								},
								{
									"key": "person_y",
									"value": "<>",
									"description": "The top-most pixel co-ordinate of the box around the person."
								},
								{
									"key": "person_w",
									"value": "<>",
									"description": "The width (in pixels) of the box around the person."
								},
								{
									"key": "person_h",
									"value": "<>",
									"description": "The height (in pixels) of the box around the person."
								}
							]
						},
						"description": "Add a person to a photo. Coordinates and sizes are in pixels, based on the 500px image size shown on individual photo pages."
					},
					"response": []
				},
				{
					"name": "Photos People Delete",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.people.delete&api_key=<>&photo_id=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.people.delete"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Remove a person from a photo."
					},
					"response": []
				},
				{
					"name": "Photos People Delete Coords",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.people.deleteCoords&api_key=<>&photo_id=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.people.deleteCoords"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Remove the bounding box from a person in a photo"
					},
					"response": []
				},
				{
					"name": "Photos People Edit Coords",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.people.editCoords&api_key=<>&photo_id=<>&user_id=<>&person_x=<>&person_y=<>&person_w=<>&person_h=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.people.editCoords"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "person_x",
									"value": "<>",
									"description": "The left-most pixel co-ordinate of the box around the person."
								},
								{
									"key": "person_y",
									"value": "<>",
									"description": "The top-most pixel co-ordinate of the box around the person."
								},
								{
									"key": "person_w",
									"value": "<>",
									"description": "The width (in pixels) of the box around the person."
								},
								{
									"key": "person_h",
									"value": "<>",
									"description": "The height (in pixels) of the box around the person."
								}
							]
						},
						"description": "Edit the bounding box of an existing person on a photo."
					},
					"response": []
				},
				{
					"name": "Photos People Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.people.getList&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.people.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Get a list of people in a given photo."
					},
					"response": []
				},
				{
					"name": "Photos Transform Rotate",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.transform.rotate&api_key=<>&format=<>&photo_id=<>&degrees=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.transform.rotate"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "degrees",
									"value": "<>",
									"description": "The amount of degrees by which to rotate the photo (clockwise) from it's current orientation. Valid values are 90, 180 and 270."
								}
							]
						},
						"description": "Rotate a photo."
					},
					"response": []
				},
				{
					"name": "Photos Upload Check Tickets",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photos.upload.checkTickets&api_key=<>&format=<>&tickets=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photos.upload.checkTickets"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "tickets",
									"value": "<>",
									"description": "A comma-delimited list of ticket ids"
								}
							]
						},
						"description": "Checks the status of one or more asynchronous photo upload tickets."
					},
					"response": []
				},
				{
					"name": "Photosets Add Photo",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.addPhoto&api_key=<>&photoset_id=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.addPhoto"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Add a photo to the end of an existing photoset."
					},
					"response": []
				},
				{
					"name": "Photosets Create",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.create&api_key=<>&format=<>&title=<>&description=<>&primary_photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.create"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "title",
									"value": "<>",
									"description": "The title of the photo. Optional."
								},
								{
									"key": "description",
									"value": "<>",
									"description": "A description of the photo. May contain some limited HTML. Optional."
								},
								{
									"key": "primary_photo_id",
									"value": "<>",
									"description": "The first photo to add to your gallery."
								}
							]
						},
						"description": "Create a new photoset for the calling user."
					},
					"response": []
				},
				{
					"name": "Photosets Delete",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.delete&api_key=<>&photoset_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.delete"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								}
							]
						},
						"description": "Delete a new photoset."
					},
					"response": []
				},
				{
					"name": "Photosets Edit Meta",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.editMeta&api_key=<>&photoset_id=<>&title=<>&description=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.editMeta"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "title",
									"value": "<>",
									"description": "The title of the photo. Optional."
								},
								{
									"key": "description",
									"value": "<>",
									"description": "A description of the photo. May contain some limited HTML. Optional."
								}
							]
						},
						"description": "Modify the meta-data for a photoset."
					},
					"response": []
				},
				{
					"name": "Photosets Edit Photos",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.editPhotos&api_key=<>&photoset_id=<>&primary_photo_id=<>&photo_ids=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.editPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "primary_photo_id",
									"value": "<>",
									"description": "The first photo to add to your gallery."
								},
								{
									"key": "photo_ids",
									"value": "<>",
									"description": "A comma-delimited list of photo ids to include in the gallery. They will appear in the set in the order sent. This list must contain the primary photo id. This list of photos replaces the existing list."
								}
							]
						},
						"description": "Modify the photos in a photoset. Use this method to add, remove and re-order photos."
					},
					"response": []
				},
				{
					"name": "Photosets Get Context",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.getContext&api_key=<>&format=<>&photo_id=<>&photoset_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.getContext"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								}
							]
						},
						"description": "Returns next and previous photos for a photo in a set."
					},
					"response": []
				},
				{
					"name": "Photosets Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.getInfo&api_key=<>&format=<>&photoset_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.getInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								}
							]
						},
						"description": "Gets information about a photoset."
					},
					"response": []
				},
				{
					"name": "Photosets Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.getList&api_key=<>&format=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Returns the photosets belonging to the specified user."
					},
					"response": []
				},
				{
					"name": "Photosets Get Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.getPhotos&api_key=<>&format=<>&photoset_id=<>&extras=<>&privacy_filter=<>&media=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.getPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "extras",
									"value": "<>",
									"description": "A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: description, license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_z, url_l, url_o"
								},
								{
									"key": "privacy_filter",
									"value": "<>",
									"description": "Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are: 1 (public photos), 2 (private photos visible to friends), 3 (private photos visible to family), 4 (private photos visible to friends and family), 5 (completely private photos)"
								},
								{
									"key": "media",
									"value": "<>",
									"description": "Filter results by media type. Possible values are all (default), photos, videos"
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get the list of photos in a set."
					},
					"response": []
				},
				{
					"name": "Photosets Order Sets",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.orderSets&api_key=<>&photoset_ids=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.orderSets"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_ids",
									"value": "<>",
									"description": "A comma delimited list of photoset IDs, ordered with the set to show first, first in the list. Any set IDs not given in the list will be set to appear at the end of the list, ordered by their IDs."
								}
							]
						},
						"description": "Set the order of photosets for the calling user."
					},
					"response": []
				},
				{
					"name": "Photosets Remove Photo",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.removePhoto&api_key=<>&photoset_id=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.removePhoto"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Remove a photo from a photoset."
					},
					"response": []
				},
				{
					"name": "Photosets Remove Photos",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.removePhotos&api_key=<>&photoset_id=<>&photo_ids=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.removePhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "photo_ids",
									"value": "<>",
									"description": "A comma-delimited list of photo ids to include in the gallery. They will appear in the set in the order sent. This list must contain the primary photo id. This list of photos replaces the existing list."
								}
							]
						},
						"description": "Remove multiple photos from a photoset."
					},
					"response": []
				},
				{
					"name": "Photosets Reorder Photos",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.reorderPhotos&api_key=<>&photoset_id=<>&photo_ids=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.reorderPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "photo_ids",
									"value": "<>",
									"description": "A comma-delimited list of photo ids to include in the gallery. They will appear in the set in the order sent. This list must contain the primary photo id. This list of photos replaces the existing list."
								}
							]
						},
						"description": "Update the order of photos in a photoset."
					},
					"response": []
				},
				{
					"name": "Photosets Set Primary Photo",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.setPrimaryPhoto&api_key=<>&photoset_id=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.setPrimaryPhoto"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Set photoset primary photo"
					},
					"response": []
				},
				{
					"name": "Photosets Comments Add Comment",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.comments.addComment&api_key=<>&format=<>&photoset_id=<>&comment_text=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.comments.addComment"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "comment_text",
									"value": "<>",
									"description": "Text of the comment."
								}
							]
						},
						"description": "Add a comment to a photoset."
					},
					"response": []
				},
				{
					"name": "Photosets Comments Delete Comment",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.comments.deleteComment&api_key=<>&comment_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.comments.deleteComment"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "comment_id",
									"value": "<>",
									"description": "The id of the comment to edit."
								}
							]
						},
						"description": "Delete a photoset comment as the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Photosets Comments Edit Comment",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.comments.editComment&api_key=<>&comment_id=<>&comment_text=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.comments.editComment"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "comment_id",
									"value": "<>",
									"description": "The id of the comment to edit."
								},
								{
									"key": "comment_text",
									"value": "<>",
									"description": "Text of the comment."
								}
							]
						},
						"description": "Edit the text of a comment as the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "Photosets Comments Get List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.photosets.comments.getList&api_key=<>&format=<>&photoset_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.photosets.comments.getList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								}
							]
						},
						"description": "Returns the comments for a photoset."
					},
					"response": []
				},
				{
					"name": "Places Find",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.find&api_key=<>&format=<>&query=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.find"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "query",
									"value": "<>",
									"description": "The query string to use for place ID lookups."
								}
							]
						},
						"description": "Return a list of place IDs for a query string."
					},
					"response": []
				},
				{
					"name": "Places Find By Lat Lon",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.findByLatLon&api_key=<>&format=<>&lat=<>&lon=<>&accuracy=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.findByLatLon"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "lat",
									"value": "<>",
									"description": "A valid latitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "lon",
									"value": "<>",
									"description": "A valid longitude, in decimal format, for doing radial geo queries. See API docs for more info."
								},
								{
									"key": "accuracy",
									"value": "<>",
									"description": "Recorded accuracy level of the location information. Current range is 1-16: World level is 1, Country is ~3, Region is ~6, City is ~11, Street is ~16. Defaults to maximum value if not specified."
								}
							]
						},
						"description": "Return a place ID for a latitude, longitude and accuracy triple."
					},
					"response": []
				},
				{
					"name": "Places Get Children With Photos Public",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.getChildrenWithPhotosPublic&api_key=<>&format=<>&place_id=<>&woe_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.getChildrenWithPhotosPublic"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								}
							]
						},
						"description": "Return a list of locations with public photos that are parented by a Where on Earth (WOE) or Places ID."
					},
					"response": []
				},
				{
					"name": "Places Get Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.getInfo&api_key=<>&format=<>&place_id=<>&woe_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.getInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								}
							]
						},
						"description": "Get information about a place."
					},
					"response": []
				},
				{
					"name": "Places Get Info By Url",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.getInfoByUrl&api_key=<>&format=<>&url=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.getInfoByUrl"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "url",
									"value": "<>",
									"description": "A flickr.com/places URL in the form of /country/region/city. For example: /Canada/Quebec/Montreal"
								}
							]
						},
						"description": "Lookup information about a place, by its flickr.com/places URL."
					},
					"response": []
				},
				{
					"name": "Places Get Place Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.getPlaceTypes&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.getPlaceTypes"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Fetches a list of available place types for Flickr."
					},
					"response": []
				},
				{
					"name": "Places Get Shape History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.getShapeHistory&api_key=<>&format=<>&place_id=<>&woe_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.getShapeHistory"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								}
							]
						},
						"description": "Return an historical list of all the shape data generated for a Places or Where on Earth (WOE) ID."
					},
					"response": []
				},
				{
					"name": "Places Get Top Places List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.getTopPlacesList&api_key=<>&format=<>&place_type_id=<>&date=<>&woe_id=<>&place_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.getTopPlacesList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "place_type_id",
									"value": "<>",
									"description": "The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								}
							]
						},
						"description": "Return the top 100 most geotagged places for a day."
					},
					"response": []
				},
				{
					"name": "Places Places For Bounding Box",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.placesForBoundingBox&api_key=<>&format=<>&bbox=<>&place_type_id=<>&place_type=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.placesForBoundingBox"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "bbox",
									"value": "<>",
									"description": "A comma-delimited list of 4 values defining the Bounding Box of the area that will be searched. The 4 values represent the bottom-left corner of the box and the top-right corner, minimum_longitude, minimum_latitude, maximum_longitude, maximum_latitude."
								},
								{
									"key": "place_type_id",
									"value": "<>",
									"description": "The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent)."
								},
								{
									"key": "place_type",
									"value": "<>",
									"description": "Deprecated in favor of place_type_id. The name of place type to using as the starting point to search for places in a bounding box. Valid placetypes are: neighbourhood, locality, county, region, country, continent."
								}
							]
						},
						"description": "Return all the locations of a matching place type for a bounding box."
					},
					"response": []
				},
				{
					"name": "Places Places For Contacts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.placesForContacts&api_key=<>&format=<>&place_type_id=<>&place_type=<>&woe_id=<>&place_id=<>&threshold=<>&contacts=<>&min_upload_date=<>&max_upload_date=<>&min_taken_date=<>&max_taken_date=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.placesForContacts"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "place_type_id",
									"value": "<>",
									"description": "The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent)."
								},
								{
									"key": "place_type",
									"value": "<>",
									"description": "Deprecated in favor of place_type_id. The name of place type to using as the starting point to search for places in a bounding box. Valid placetypes are: neighbourhood, locality, county, region, country, continent."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "threshold",
									"value": "<>",
									"description": "The minimum number of photos that a place type must have to be included. If the number of photos is lowered then the parent place type for that place will be used."
								},
								{
									"key": "contacts",
									"value": "<>",
									"description": "Search your contacts. Either 'all' or 'ff' for just friends and family. (Experimental)"
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								}
							]
						},
						"description": "Return a list of the top 100 unique places clustered by a given placetype for a user's contacts."
					},
					"response": []
				},
				{
					"name": "Places Places For Tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.placesForTags&api_key=<>&format=<>&place_type_id=<>&woe_id=<>&place_id=<>&threshold=<>&tags=<>&tag_mode=<>&machine_tags=<>&machine_tag_mode=<>&min_upload_date=<>&max_upload_date=<>&min_taken_date=<>&max_taken_date=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.placesForTags"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "place_type_id",
									"value": "<>",
									"description": "The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent)."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "threshold",
									"value": "<>",
									"description": "The minimum number of photos that a place type must have to be included. If the number of photos is lowered then the parent place type for that place will be used."
								},
								{
									"key": "tags",
									"value": "<>",
									"description": "A space-seperated list of tags to apply to the photo. Optional."
								},
								{
									"key": "tag_mode",
									"value": "<>",
									"description": "Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified."
								},
								{
									"key": "machine_tags",
									"value": "<>",
									"description": "Machine tag(s). See API docs for format. Multiple machine tags may be queried by passing a comma-separated list. The number of machine tags you can pass in a single query depends on the tag mode (AND or OR) that you are querying with. \"AND\" queries are limited to (16) machine tags. \"OR\" queries are limited to (8)."
								},
								{
									"key": "machine_tag_mode",
									"value": "<>",
									"description": "Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified."
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								}
							]
						},
						"description": "Return a list of the top 100 unique places clustered by a given placetype for set of tags or machine tags."
					},
					"response": []
				},
				{
					"name": "Places Places For User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.placesForUser&api_key=<>&format=<>&place_type_id=<>&place_type=<>&woe_id=<>&place_id=<>&threshold=<>&min_upload_date=<>&max_upload_date=<>&min_taken_date=<>&max_taken_date=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.placesForUser"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "place_type_id",
									"value": "<>",
									"description": "The numeric ID for a specific place type to cluster photos by. Valid place type IDs are: 22 (neighborhood), 7 (locality), 8 (region), 12 (country), 29 (continent)."
								},
								{
									"key": "place_type",
									"value": "<>",
									"description": "Deprecated in favor of place_type_id. The name of place type to using as the starting point to search for places in a bounding box. Valid placetypes are: neighbourhood, locality, county, region, country, continent."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "threshold",
									"value": "<>",
									"description": "The minimum number of photos that a place type must have to be included. If the number of photos is lowered then the parent place type for that place will be used."
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								}
							]
						},
						"description": "Return a list of the top 100 unique places clustered by a given placetype for a user."
					},
					"response": []
				},
				{
					"name": "Places Resolve Place Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.resolvePlaceId&api_key=<>&format=<>&place_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.resolvePlaceId"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								}
							]
						},
						"description": "Find Flickr Places information by Place ID. This method has been deprecated. It won't be removed but you should use flickr.places.getInfo instead."
					},
					"response": []
				},
				{
					"name": "Places Resolve Place U R L",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.resolvePlaceURL&api_key=<>&format=<>&url=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.resolvePlaceURL"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "url",
									"value": "<>",
									"description": "A flickr.com/places URL in the form of /country/region/city. For example: /Canada/Quebec/Montreal"
								}
							]
						},
						"description": "Find Flickr Places information by Place URL. This method has been deprecated. It won't be removed but you should use flickr.places.getInfo instead."
					},
					"response": []
				},
				{
					"name": "Places Tags For Place",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.places.tagsForPlace&api_key=<>&format=<>&woe_id=<>&place_id=<>&min_upload_date=<>&max_upload_date=<>&min_taken_date=<>&max_taken_date=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.places.tagsForPlace"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "woe_id",
									"value": "<>",
									"description": "A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "place_id",
									"value": "<>",
									"description": "A Flickr place id. (not used if bbox argument is present). See API docs for more info."
								},
								{
									"key": "min_upload_date",
									"value": "<>",
									"description": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "max_upload_date",
									"value": "<>",
									"description": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
								},
								{
									"key": "min_taken_date",
									"value": "<>",
									"description": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								},
								{
									"key": "max_taken_date",
									"value": "<>",
									"description": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
								}
							]
						},
						"description": "Return a list of the top 100 unique tags for a Flickr Places or Where on Earth (WOE) ID."
					},
					"response": []
				},
				{
					"name": "Prefs Get Content Type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.prefs.getContentType&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.prefs.getContentType"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns the default content type preference for the user."
					},
					"response": []
				},
				{
					"name": "Prefs Get Geo Perms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.prefs.getGeoPerms&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.prefs.getGeoPerms"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns the default privacy level for geographic information attached to the user's photos and whether or not the user has chosen to use geo-related EXIF information to automatically geotag their photos."
					},
					"response": []
				},
				{
					"name": "Prefs Get Hden",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.prefs.getHidden&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.prefs.getHidden"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns the default hidden preference for the user."
					},
					"response": []
				},
				{
					"name": "Prefs Get Privacy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.prefs.getPrivacy&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.prefs.getPrivacy"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns the default privacy level preference for the user."
					},
					"response": []
				},
				{
					"name": "Prefs Get Safety Level",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.prefs.getSafetyLevel&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.prefs.getSafetyLevel"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns the default safety level preference for the user."
					},
					"response": []
				},
				{
					"name": "Reflection Get Method Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.reflection.getMethodInfo&api_key=<>&format=<>&method_name=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.reflection.getMethodInfo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "method_name",
									"value": "<>",
									"description": "The name of the method to fetch information for."
								}
							]
						},
						"description": "Returns information for a given Flickr API method."
					},
					"response": []
				},
				{
					"name": "Reflection Get Methods",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.reflection.getMethods&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.reflection.getMethods"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "Returns a list of available Flickr API methods."
					},
					"response": []
				},
				{
					"name": "Stats Get Collection Domains",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getCollectionDomains&api_key=<>&format=<>&date=<>&collection_id=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getCollectionDomains"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "collection_id",
									"value": "<>",
									"description": "The ID of the collection to fetch information for."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of referring domains for a collection"
					},
					"response": []
				},
				{
					"name": "Stats Get Collection Referrers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getCollectionReferrers&api_key=<>&format=<>&date=<>&domain=<>&collection_id=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getCollectionReferrers"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "domain",
									"value": "<>",
									"description": "The domain to return referrers for. This should be a hostname (eg: \"flickr.com\") with no protocol or pathname."
								},
								{
									"key": "collection_id",
									"value": "<>",
									"description": "The ID of the collection to fetch information for."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of referrers from a given domain to a collection"
					},
					"response": []
				},
				{
					"name": "Stats Get Collection Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getCollectionStats&api_key=<>&format=<>&date=<>&collection_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getCollectionStats"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "collection_id",
									"value": "<>",
									"description": "The ID of the collection to fetch information for."
								}
							]
						},
						"description": "Get the number of views on a collection for a given date."
					},
					"response": []
				},
				{
					"name": "Stats Get Photo Domains",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotoDomains&api_key=<>&format=<>&date=<>&photo_id=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotoDomains"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of referring domains for a photo."
					},
					"response": []
				},
				{
					"name": "Stats Get Photo Referrers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotoReferrers&api_key=<>&format=<>&domain=<>&photo_id=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotoReferrers"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "domain",
									"value": "<>",
									"description": "The domain to return referrers for. This should be a hostname (eg: \"flickr.com\") with no protocol or pathname."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of referring domains for a photo."
					},
					"response": []
				},
				{
					"name": "Stats Get Photo Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotoStats&api_key=<>&format=<>&date=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotoStats"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Get the number of views, comments and favorites on a photo for a given date."
					},
					"response": []
				},
				{
					"name": "Stats Get Photoset Domains",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotosetDomains&api_key=<>&format=<>&date=<>&photoset_id=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotosetDomains"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of referring domains for a photoset."
					},
					"response": []
				},
				{
					"name": "Stats Get Photoset Referrers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotosetReferrers&api_key=<>&format=<>&domain=<>&photoset_id=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotosetReferrers"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "domain",
									"value": "<>",
									"description": "The domain to return referrers for. This should be a hostname (eg: \"flickr.com\") with no protocol or pathname."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of referring domains for a photoset."
					},
					"response": []
				},
				{
					"name": "Stats Get Photoset Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotosetStats&api_key=<>&format=<>&date=<>&photoset_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotosetStats"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "photoset_id",
									"value": "<>",
									"description": "The id of the photoset to add a photo to."
								}
							]
						},
						"description": "Get the number of views on a photoset for a given date."
					},
					"response": []
				},
				{
					"name": "Stats Get Photostream Domains",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotostreamDomains&api_key=<>&format=<>&date=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotostreamDomains"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of referring domains for a photostream."
					},
					"response": []
				},
				{
					"name": "Stats Get Photostream Referrers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotostreamReferrers&api_key=<>&format=<>&domain=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotostreamReferrers"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "domain",
									"value": "<>",
									"description": "The domain to return referrers for. This should be a hostname (eg: \"flickr.com\") with no protocol or pathname."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "Get a list of referrers from a given domain to a user's photostream"
					},
					"response": []
				},
				{
					"name": "Stats Get Photostream Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPhotostreamStats&api_key=<>&format=<>&date=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPhotostreamStats"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								}
							]
						},
						"description": "Get the number of views on a user's photostream for a given date."
					},
					"response": []
				},
				{
					"name": "Stats Get Popular Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getPopularPhotos&api_key=<>&format=<>&date=<>&sort=<>&per_page=<>&page=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getPopularPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								},
								{
									"key": "sort",
									"value": "<>",
									"description": "The order in which to sort returned photos. Deafults to date-posted-desc (unless you are doing a radial geo query, in which case the default sorting is by ascending distance from the point specified). The possible values are: date-posted-asc, date-posted-desc, date-taken-asc, date-taken-desc, interestingness-desc, interestingness-asc, and relevance."
								},
								{
									"key": "per_page",
									"value": "<>",
									"description": "Number of items to return per page. If this argument is omitted, it defaults to 10. The maximum allowed value is 50."
								},
								{
									"key": "page",
									"value": "<>",
									"description": "The page of results to return. If this argument is omitted, it defaults to 1."
								}
							]
						},
						"description": "List the photos with the most views, comments or favorites."
					},
					"response": []
				},
				{
					"name": "Stats Get Total Views",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.stats.getTotalViews&api_key=<>&format=<>&date=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.stats.getTotalViews"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "date",
									"value": "<>",
									"description": "A specific date, formatted as YYYY-MM-DD, to return interesting photos for."
								}
							]
						},
						"description": "Get the overall view counts for an account."
					},
					"response": []
				},
				{
					"name": "Tags Get Cluster Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.tags.getClusterPhotos&api_key=<>&format=<>&tag=<>&cluster_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.tags.getClusterPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "tag",
									"value": "<>",
									"description": "The tag that this cluster belongs to."
								},
								{
									"key": "cluster_id",
									"value": "<>",
									"description": "The top three tags for the cluster, separated by dashes (just like the url)."
								}
							]
						},
						"description": "Returns the first 24 photos for a given tag cluster."
					},
					"response": []
				},
				{
					"name": "Tags Get Clusters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.tags.getClusters&api_key=<>&format=<>&tag=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.tags.getClusters"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "tag",
									"value": "<>",
									"description": "The tag that this cluster belongs to."
								}
							]
						},
						"description": "Returns a list of tag clusters for the given tag."
					},
					"response": []
				},
				{
					"name": "Tags Get Hot List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.tags.getHotList&api_key=<>&format=<>&period=<>&count=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.tags.getHotList"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "period",
									"value": "<>",
									"description": "The period for which to fetch hot tags. Valid values are day and week (defaults to day)."
								},
								{
									"key": "count",
									"value": "<>",
									"description": "Number of photos to return. Defaults to 10, maximum 50. This is only used if single_photo is not passed."
								}
							]
						},
						"description": "Returns a list of hot tags for the given period."
					},
					"response": []
				},
				{
					"name": "Tags Get List Photo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.tags.getListPhoto&api_key=<>&format=<>&photo_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.tags.getListPhoto"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "photo_id",
									"value": "<>",
									"description": "The ID of the photo to replace."
								}
							]
						},
						"description": "Get the tag list for a given photo."
					},
					"response": []
				},
				{
					"name": "Tags Get List User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.tags.getListUser&api_key=<>&format=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.tags.getListUser"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Get the tag list for a given user (or the currently logged in user)."
					},
					"response": []
				},
				{
					"name": "Tags Get List User Popular",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.tags.getListUserPopular&api_key=<>&format=<>&user_id=<>&count=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.tags.getListUserPopular"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								},
								{
									"key": "count",
									"value": "<>",
									"description": "Number of photos to return. Defaults to 10, maximum 50. This is only used if single_photo is not passed."
								}
							]
						},
						"description": "Get the popular tags for a given user (or the currently logged in user)."
					},
					"response": []
				},
				{
					"name": "Tags Get List User Raw",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.tags.getListUserRaw&api_key=<>&format=<>&tag=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.tags.getListUserRaw"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "tag",
									"value": "<>",
									"description": "The tag that this cluster belongs to."
								}
							]
						},
						"description": "Get the raw versions of a given tag (or all tags) for the currently logged-in user."
					},
					"response": []
				},
				{
					"name": "Tags Get Related",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.tags.getRelated&api_key=<>&format=<>&tag=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.tags.getRelated"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "tag",
									"value": "<>",
									"description": "The tag that this cluster belongs to."
								}
							]
						},
						"description": "Returns a list of tags 'related' to the given tag, based on clustered usage analysis."
					},
					"response": []
				},
				{
					"name": "Test Echo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.test.echo&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.test.echo"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "A testing method which echoes all parameters back in the response."
					},
					"response": []
				},
				{
					"name": "Test Login",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.test.login&api_key=<>&format=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.test.login"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								}
							]
						},
						"description": "A testing method which checks if the caller is logged in then returns their username."
					},
					"response": []
				},
				{
					"name": "Test Null",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.test.null&api_key=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.test.null"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								}
							]
						},
						"description": "This method doesn't do anything."
					},
					"response": []
				},
				{
					"name": "Urls Get Group",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.urls.getGroup&api_key=<>&format=<>&group_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.urls.getGroup"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "group_id",
									"value": "<>",
									"description": "The NSID of the group to fetch information for."
								}
							]
						},
						"description": "Returns the url to a group's page."
					},
					"response": []
				},
				{
					"name": "Urls Get User Photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.urls.getUserPhotos&api_key=<>&format=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.urls.getUserPhotos"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Returns the url to a user's photos."
					},
					"response": []
				},
				{
					"name": "Urls Get User Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.urls.getUserProfile&api_key=<>&format=<>&user_id=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.urls.getUserProfile"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "user_id",
									"value": "<>",
									"description": "The ID of the account to fetch the collection tree for. Deafults to the calling user."
								}
							]
						},
						"description": "Returns the url to a user's profile."
					},
					"response": []
				},
				{
					"name": "Urls Lookup Gallery",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.urls.lookupGallery&api_key=<>&format=<>&url=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.urls.lookupGallery"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "url",
									"value": "<>",
									"description": "A flickr.com/places URL in the form of /country/region/city. For example: /Canada/Quebec/Montreal"
								}
							]
						},
						"description": "Returns gallery info, by url."
					},
					"response": []
				},
				{
					"name": "Urls Lookup Group",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.urls.lookupGroup&api_key=<>&format=<>&url=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.urls.lookupGroup"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "url",
									"value": "<>",
									"description": "A flickr.com/places URL in the form of /country/region/city. For example: /Canada/Quebec/Montreal"
								}
							]
						},
						"description": "Returns a group NSID, given the url to a group's page or photo pool."
					},
					"response": []
				},
				{
					"name": "Urls Lookup User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rest/?method=flickr.urls.lookupUser&api_key=<>&format=<>&url=<>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rest",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "flickr.urls.lookupUser"
								},
								{
									"key": "api_key",
									"value": "<>",
									"description": "Your API application key."
								},
								{
									"key": "format",
									"value": "<>",
									"description": "Response format. Accepted values: rest (REST), xmlrpc (XML-RPC), soap (SOAP), soap2 (Alternate SOAP) json (JSON), php_serial (Serialized PHP)."
								},
								{
									"key": "url",
									"value": "<>",
									"description": "A flickr.com/places URL in the form of /country/region/city. For example: /Canada/Quebec/Montreal"
								}
							]
						},
						"description": "Returns a user NSID, given the url to a user's photos or profile."
					},
					"response": []
				}
			]
		},
		{
			"name": "Upload",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/upload?title=<>&description=<>&tags=<>&is_public=<>&is_friend=<>&is_family=<>&safety_level=<>&content_type=<>&hidden=<>&async=<>",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"upload"
					],
					"query": [
						{
							"key": "title",
							"value": "<>",
							"description": "The title of the photo. Optional."
						},
						{
							"key": "description",
							"value": "<>",
							"description": "A description of the photo. May contain some limited HTML. Optional."
						},
						{
							"key": "tags",
							"value": "<>",
							"description": "A space-seperated list of tags to apply to the photo. Optional."
						},
						{
							"key": "is_public",
							"value": "<>",
							"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
						},
						{
							"key": "is_friend",
							"value": "<>",
							"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
						},
						{
							"key": "is_family",
							"value": "<>",
							"description": "Set to 0 for no, 1 for yes. Specifies who can view the photo. Optional."
						},
						{
							"key": "safety_level",
							"value": "<>",
							"description": "Set to 1 for Safe, 2 for Moderate, or 3 for Restricted. Optional."
						},
						{
							"key": "content_type",
							"value": "<>",
							"description": "Set to 1 for Photo, 2 for Screenshot, or 3 for Other. Optional."
						},
						{
							"key": "hidden",
							"value": "<>",
							"description": "Set to 1 to keep the photo in global search results, 2 to hide from public searches. Optional."
						},
						{
							"key": "async",
							"value": "<>",
							"description": "Flickr can process photos in async mode, for applications that need to post multiple photos and don't want to wait around for each one to complete, leaving a socket connection open the whole time. Set to 1 for async mode, 0 for sync mode."
						}
					]
				},
				"description": "Uploads a photo. Uploading apps can call the flickr.people.getUploadStatus method in the regular API to obtain file and bandwidth limits for the user."
			},
			"response": []
		},
		{
			"name": "Replace",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/replace?photo_id=<>&async=<>",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"replace"
					],
					"query": [
						{
							"key": "photo_id",
							"value": "<>",
							"description": "The ID of the photo to replace."
						},
						{
							"key": "async",
							"value": "<>",
							"description": "Flickr can process photos in async mode, for applications that need to post multiple photos and don't want to wait around for each one to complete, leaving a socket connection open the whole time. Set to 1 for async mode, 0 for sync mode."
						}
					]
				},
				"description": "Replaces a photo that has already been uploaded to Flickr. Uploading apps can call the flickr.people.getUploadStatus method in the regular API to obtain file and bandwidth limits for the user."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "httpsapi.flickr.com/services/",
			"type": "string"
		}
	]
}